{"version":3,"sources":["economic/const.ts","common/verifiable.ts","common/StringStateHandler.ts","common/StringStateRecordHandler.ts","common/number-state-handler/FloatStringStateHandler.ts","common/number-state-handler/IntStringStateHandler.ts","economic/handler/CapacityParamsStateHandler.ts","economic/handler/ParallelScheduleParamsStateHandler.ts","common/StringStateTableHandler.ts","common/StringStringStateHandler.ts","economic/handler/CapitalExpendituresStateHandler.ts","economic/handler/AdditionalExpenduresStateHandler.ts","economic/handler/SalaryStateHandler.ts","economic/handler/RatesStateHandler.ts","economic/handler/EfficiencyComputationMainHandler.ts","economic/slice.tsx","store/reducers/index.ts","store/index.ts","economic/component/CapacityParamsView.tsx","economic/component/CapitalExpendituresView.tsx","economic/component/ParallelScheduleParamsView.tsx","economic/component/AdditionalExpendituresView.tsx","economic/component/SalaryView.tsx","economic/component/Rates.tsx","economic/component/Root.tsx","App.tsx","index.tsx"],"names":["VALUE_IS_REQUIRED","NUMERIC_RANGE_VIOLATION","NOT_A_NUMBER","MAX_SYMBOL_QTY","DEFAULT_AND_ACTUAL_VALUES_MISMATCH","Status","StateHandler","_classCallCheck","_createClass","key","value","tgt","e","status","Error","what","find","it","push","w","Math","max","Warning","src","_src$what","_step","_iterator","_createForOfIteratorHelper","s","n","done","this","addWarning","addError","err","f","condition","msg","Ok","replace","NaN","parseNumber","isNaN","isBlank","trim","length","cnt","Number","MIN_SAFE_INTEGER","StringStateHandler","_StateHandler","_inherits","_super","_createSuper","apply","arguments","create","instance","handle","normalized","validate","newValue","_default","newInstance","numberValue","stringValue","blank","min","check","concat","isInteger","format","v","maxFractionDigits","minFractionDigits","undefined","options","maximumFractionDigits","minimumFractionDigits","signDisplay","c","re","toLocaleString","im","sign","StringStateRecordHandler","_this","_len","args","Array","_key","call","handlers","kwargs","row","_kwargs$key","h","toString","_kwargs$key2","reset","field","transferStatus","FloatStringStateHandler","_StringStateHandler","minValue","maxValue","precision","required","checkIsNotBlank","checkIsNumber","checkInRange","defaultValue","equal","IntStringStateHandler","_FloatStringStateHand","MAX_SAFE_INTEGER","CapacityParamsStateHandler","_StringStateRecordHan","massHandler","intervalHandler","trainQtyHandler","oldCapacityDto","newCapacityDto","maxTrainMass","oldInterval","newInterval","oldTrainQty","newTrainQty","trainInterval","trainQty","defaultMass","_get","_getPrototypeOf","prototype","_tgt$oldCapacityDto$t","_tgt$oldCapacityDto","_tgt$newCapacityDto$t","_tgt$newCapacityDto","trainWeightMaximum","ParallelScheduleParamsStateHandler","dcHandler","oldComputation","newComputation","oldDailyConsumption","newDailyConsumption","energyConsumption","StringStateTableHandler","rowHandler","rows","idx","splice","slice","kw","copy","update","StringStringStateHandler","minLength","maxLength","state","RowHandler","equipment","type","price","qty","serviceLife","CapitalExpendituresStateHandler","_StringStateTableHand","_super2","RowHanler","expItemHandler","equipmentHandler","priceHandler","qtyHandler","expendureItem","period","AdditionalExpendituresStateHandler","SalaryRowStateHandler","employee","hourlyRate","annualOutput","motivation","RatesStateHandler","DEFAULT_INCOME_TAX","DEFAULT_PROPERTY_TAX","DEFAULT_UNIFIED_SOCIAL_TAX","DEFAULT_DISCOUNT_RATE","DEFAULT_ANNUAL_INFLATION_RATE","DEFAULT_ANNUAL_SALARY_INDEXATION","DEFAULT_ANNUAL_INCREASE_IN_ELECTRICITY_TARIFF","DEFAULT_CALC_PERIOD","rateHandler","energyConsumptionHandler","electricityCostHandler","fOptHandler","calcPeriodHandler","profitRateForCargoTurnover","spendingRateForEconomicTasks","reducedEnergyConsumption","electricityCostPerTraction","incomeTax","propertyTax","unifiedSocialTax","discountRate","annualInflationRate","annualSalaryIndexation","annualIncreaseInElectricityTariff","calculationPeriod","compareToDefault","EfficiencyComputationMainHandler","capacityHandler","parSchHandler","capitalExpendituresHandler","additionalExpendituresHandler","salaryHandler","ratesHandler","nameHandler","descriptionHandler","_state$capacity$oldCa","_state$capacity$newCa","_state$parallelSchedu","_state$parallelSchedu2","_this$tryParseNumber","_this$tryParseNumber2","_this$tryParseNumber3","_this$tryParseNumber4","_this$tryParseNumber5","_this$tryParseNumber6","_this$tryParseNumber7","_this$tryParseNumber8","_this$tryParseNumber9","_this$tryParseNumber10","_this$tryParseNumber11","_this$tryParseNumber12","_this$tryParseNumber13","_this$tryParseNumber14","_this$tryParseNumber15","_state$what","_this2","join","id","name","description","trackId","track","trackName","trackLength","capacityComputationBefore","capacity","capacityComputationAfter","parallelComputationBefore","parallelSchedule","parallelComputationAfter","inputData","tryParseNumber","trainIntervalBefore","trainIntervalAfter","trainQtyBefore","trainQtyAfter","energyConsumptionBefore","energyConsumptionAfter","capitalInvestments","capitalExpenditures","map","r","equipmentType","amount","additionalExpenditures","maintenanceSalaries","salary","paidWorker","equipmentName","productivity","additionalPayments","profitOptions","rates","taxRates","inflation","dto","_dto$inputData$trainW","_dto$inputData$trainI","_dto$inputData$trainI2","_dto$inputData$trainQ","_dto$inputData$trainQ2","_dto$inputData$energy","_dto$inputData$energy2","createDefault","insertRow","_step2","_iterator2","_step3","_iterator3","checkEquipmentNames","_tgt$what$map","_tgt$what","messages","includes","from","Set","sort","i","_old","_new","abs","rel","cp","_objectSpread","trackParams","_tgt$track","updateParallelScheduleParams","updateCapacityParams","_kwargs$oldCapacityDt","_tgt$capacity$oldCapa","_kwargs$newCapacityDt","_tgt$capacity$newCapa","schemaId","updateRow","deleteRow","duplicateRow","current","arr","names","dependentRows","_step4","equipmentNames","uniqueEquipmentNames","_iterator4","_instance","getInstance","economicSlice","createSlice","initialState","reducers","updateName","action","payload","updateDescription","updateTrack","updateCapitalExpendituresRow","insertCapitalExpendituresRow","deleteCapitalExpendituresRow","duplicateCapitalExpendituresRow","updateAdditionalExpendituresRow","insertAdditionalExpendituresRow","deleteAdditionalExpendituresRow","duplicateAdditionalExpendituresRow","insertSalaryRow","updateSalaryRow","deleteSalaryRow","duplicateSalaryRow","updateRates","fromDto","combineReducers","economic","reducer","store","configureStore","useAppDispatch","useDispatch","useAppSelector","useSelector","getStyle","color","backgroundColor","StringStateInput","props","_props$state$what$map","_props$state$what","_props$state$what$map2","_props$placeholder","_jsxs","children","_jsx","style","className","title","substr","localized","placeholder","onBlur","target","label","htmlFor","TextArea","_useState","useState","_useState2","_slicedToArray","text","setText","useEffect","JSON","stringify","obj","onChange","parse","width","height","disabled","titleIfDisabled","CapacityParamsView","_h$capacityHandler$de","_h$capacityHandler$de2","_props$capacity$oldCa","_props$capacity$oldCa2","_props$capacity$oldCa3","_props$capacity$newCa","_props$capacity$newCa2","_props$capacity$newCa3","_props$capacity$oldCa4","_props$capacity$oldCa5","_props$capacity$oldCa6","_props$capacity$newCa4","_props$capacity$newCa5","_props$capacity$newCa6","_props$capacity","oldCapacityInfo","newCapacityInfo","dispatch","intervalDiff","trainQtyDiff","actions","isTrackSelected","CapitalExpendituresView","onClick","tbl","ParallelScheduleParamsView","_props$sch$oldComputa","_props$sch$oldComputa2","_props$sch$oldComputa3","_props$sch$newComputa","_props$sch$newComputa2","_props$sch$newComputa3","powerDiff","sch","isOldCapacitySelected","isNewCapacitySelected","AdditionalExpendituresView","rowSpan","colSpan","_row$equipment$what$j","_row$equipment$what","capitalTbl","checked","readOnly","SalaryView","RatesView","display","discountCoefficient","Root","energyConsumptionCalculated","calculationDuration","_Fragment","MCapacityParamsView","MParallelScheduleParamsView","MCapitalExpendituresView","MAdditionalExpendituresView","MSalaryView","MRatesView","console","log","toDto","logErrors","memo","App","Provider","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.70178847.chunk.js","sourcesContent":["export const VALUE_IS_REQUIRED = 'Поле обязательно для заполнения'\nexport const ANY_REQUIRED_VALUES_ARE_MISSED = 'Не все обязательные значения введены'\n\nexport const NUMERIC_RANGE_VIOLATION = 'Значение должно находиться в пределах'\nexport const ANY_NUMERIC_VALUES_ARE_OUT_OF_RANGE = 'Значения некоторых числовых полей не соответствуют ограничениям'\n\nexport const NOT_A_NUMBER = 'Значение должно быть числом'\nexport const ANY_NUMBERS_ARE_NOT_NUMBERS = 'Значения в некоторых числовых полях не удалось распознать как числа'\n\nexport const MAX_SYMBOL_QTY = 'Количество символов должно находиться в пределах'\nexport const ANY_STRINGS_HAVE_WRONG_LENGTH = 'Длины некоторых строк не соответствуют ограничениям'\n\nexport const DEFAULT_AND_ACTUAL_VALUES_MISMATCH = 'Уведомление: введенное значение не совпадает со значением по умолчанию'","/**\n * Здесь определены базовые типы, на которых основана предлагаемая стратегия управления\n * состоянием объектов со сложной валидацией.\n */\n\n/** Базовый интерфейс всех верифицируемых объектов. */\nexport interface Verifiable {\n  /** Идентификатор объекта. */\n  handle: number\n  /** Статус - результат последней валидации объекта. */\n  status: Status\n  /** Массив строк, разъясняющих ошибку или предупреждение. */\n  what?: string[]\n}\n\n/** Статус верифицируемого объекта. */\nexport enum Status {\n  Ok,\n  Warning,\n  Error\n}\n\n/**\n * Инкапсулирует логику управления состоянием верефицируемых объектов.\n * @param S тип управляемого объекта.\n * @param D тип Dto управляемого объекта.\n */\nexport abstract class StateHandler<S extends Verifiable> {\n  /** Счетчик с автоинкрементом при создании новго объекта StringState.\n   * Текущее значение присваивается полю handle вновь создаваемого объекта.\n   */\n  protected static cnt = Number.MIN_SAFE_INTEGER\n\n  /**\n   * Проверяет собственные инварианты объекта. Изменяет status и what управляемого объекта.\n   * @returns статус объекта\n   */\n  abstract validate(tgt: S): Status\n\n  /**\n   * Добавить сведения об ошибке в управляемом объекте.\n   * @param tgt целевой объект\n   * @param e строка или массив строк с текстами ошибок\n   */\n  addError(tgt: Verifiable, e: string): void {\n    tgt.status = Status.Error\n    if (tgt.what == null) {\n      tgt.what = []\n    }\n    if (tgt.what!.find((it) => it === e) == null) {\n      tgt.what.push(e)\n    }\n  }\n\n  /**\n   * Добавить сведения о предупреждении в управляемом объекте.\n   * @param tgt целевой объект\n   * @param w строка или массив строк с текстами ошибок\n   */\n  addWarning(tgt: Verifiable, w: string): void {\n    tgt.status = Math.max(Status.Warning, tgt.status)\n    if (tgt.what == null) {\n      tgt.what = []\n    }\n    if (tgt.what!.find((it) => it === w) == null) {\n      tgt.what.push(w)\n    }\n  }\n\n  transferStatus(tgt: Verifiable, src: Verifiable): void {\n    tgt.status = Math.max(tgt.status, src.status)\n    for (const s of src.what ?? []) {\n      const m = src.status === Status.Warning ? this.addWarning : this.addError\n      m(tgt, s)\n    }\n  }\n\n  /**\n   *\n   * @param tgt целевой объект.\n   * @param condition условие логическое значение или выражение, вычисляемое в логическое значение.\n   * @param status статус, который требуется назначить объекту, если условие ложно.\n   * @param msg текст ошибки или предупреждения.\n   */\n  check(\n    tgt: Verifiable,\n    condition: boolean,\n    status: Status.Error | Status.Warning,\n    msg: string\n  ) {\n    if (!condition) {\n      switch (status) {\n        case Status.Warning:\n          this.addWarning(tgt, msg)\n          break\n        case Status.Error:\n          this.addError(tgt, msg)\n          break\n        default:\n          break\n      }\n    }\n    return condition\n  }\n\n  /** Подготовить объект в валидации: установить status = Ok, удалить what. */\n  reset(tgt: Verifiable) {\n    tgt.status = Status.Ok\n    delete tgt.what\n  }\n\n  parseNumber(s: string): number {\n    s = s.replace(',', '.').replace(/\\s/g, '')\n    if (s == '') {\n      return NaN\n    }\n    return +s\n  }\n\n  tryParseNumber(s: string): number | null {\n    const n = this.parseNumber(s)\n    if (isNaN(n)) {\n      return null\n    }\n    return n\n  }\n}\n","import { NOT_A_NUMBER, VALUE_IS_REQUIRED, NUMERIC_RANGE_VIOLATION } from 'economic/const'\nimport { StateHandler, Status, Verifiable } from './verifiable'\n\n/** Верефицируемое строковое состояние. */\nexport interface StringState extends Verifiable {\n  value: string\n}\n\nexport function isBlank(s: string): boolean {\n  return s.trim().length === 0\n}\n\n/**\n * Определяет интерфейс и общую логику для управления верифицируемым строковым состоянием.\n */\nexport abstract class StringStateHandler extends StateHandler<StringState> {\n\n  /**\n   * Создать копию управляемого объекта.\n   * @param tgt целевой объект.\n   * @param value значение. Если не задано, значение берется из целевого объекта.\n   */\n  copy(tgt: StringState, value?: string): StringState {\n    return this.create(value != null ? value : tgt.value)\n  }\n\n  /**\n   * Создать новый объект StringState.\n   * @param value хранимое строковое значение.\n   */\n  create(value?: string): StringState {\n    const instance = {\n      handle: StateHandler.cnt++,\n      value: this.normalized(value),\n      status: Status.Ok\n    } as StringState\n    this.validate(instance)\n    return instance\n  }\n\n  createOrDefault(newValue: string | undefined, _default: StringState): StringState {\n    if (newValue != null && newValue !== _default.value) {\n      const newInstance = {\n        handle: StateHandler.cnt++,\n        value: this.normalized(newValue),\n        status: Status.Ok\n      } as StringState\n      this.validate(newInstance)\n      return newInstance\n    }\n    return _default\n  }\n\n  abstract validate(tgt: StringState): Status\n\n  /** Проверить, приводится ли хранимое значение к действительному числу. */\n  checkIsNumber(tgt: StringState): number {\n    const numberValue = this.parseNumber(tgt.value)\n    if (isNaN(numberValue)) {\n      this.addError(tgt, NOT_A_NUMBER)\n    }\n    return numberValue\n  }\n\n  /** Проверить, приводится ли хранимое значение к действительному числу. */\n  checkIsNumberOrBlank(tgt: StringState): number {\n    const stringValue = tgt.value\n    const numberValue = this.parseNumber(stringValue)\n    if (isNaN(numberValue)) {\n      this.addError(tgt, NOT_A_NUMBER)\n    }\n    return numberValue\n  }\n\n  checkIsNotBlank(tgt: StringState): boolean {\n    const blank = isBlank(tgt.value)\n    if (blank) {\n      this.addError(tgt, VALUE_IS_REQUIRED)\n    }\n    return !blank\n  }\n\n  /**\n   * Проверить, лежит ли хранимое значение в заданном диапазоне чисел (включительно для обеих границ).\n   * @param tgt целевой объект.\n   * @param value хранимое значение или число, к которому оно приводится.\n   * @param min минимальное значение.\n   * @param max максимальное значение.\n   */\n  checkInRange(\n    tgt: StringState,\n    value: string | number,\n    min: number,\n    max: number\n  ) {\n    const numberValue = typeof value === 'number' ? value : this.parseNumber(value)\n    return this.check(\n      tgt,\n      numberValue >= min && numberValue <= max,\n      Status.Error,\n      `${NUMERIC_RANGE_VIOLATION} [${min}...${max}]`\n    )\n  }\n\n  /**\n   *\n   * @param tgt целевой объект\n   * @param value хранимое значение или число, к которому оно приводится.\n   */\n  checkIsInteger(tgt: StringState, value: number | string) {\n    const numberValue = typeof value === 'number' ? value : this.parseNumber(value)\n    return this.check(\n      tgt,\n      Number.isInteger(numberValue),\n      Status.Error,\n      NOT_A_NUMBER\n    )\n  }\n\n  abstract normalized(s?: string): string\n}\n\nexport function format(\n  v: string | number | null | undefined,\n  maxFractionDigits?: number,\n  minFractionDigits?: number,\n  defaultValue: string = '-',\n  signDisplay: 'auto' | 'always' | 'exceptZero' | 'never' | undefined = 'auto' \n): string {\n  if (v == null) {\n    return defaultValue\n  }\n  const options = { maximumFractionDigits: maxFractionDigits, minimumFractionDigits: minFractionDigits, signDisplay: signDisplay }\n  if (typeof v === 'object') { // Complex\n    const c = v as { re: number, im: number }\n    const re = c.re.toLocaleString('ru', options)\n    let im = c.im.toLocaleString('ru', options)\n    if (Math.sign(c.im) >= 0) im = `+${im}`\n    return `${re}${im}j`\n  }\n  return (+v).toLocaleString('ru', options)\n}\n\nexport function localized(\n  s: string,\n  maxFractionDigits?: number,\n  minFractionDigits?: number\n): string {\n  return s.replace(/[-]?\\d+[.]?\\d+/g, (substr) => format(substr, maxFractionDigits, minFractionDigits))\n}\n","import { StringStateHandler } from './StringStateHandler'\nimport { StateHandler, Status, Verifiable } from './verifiable'\n\nexport abstract class StringStateRecordHandler<R extends Verifiable, K extends Record<string, any>> extends StateHandler<R> {\n\n    readonly abstract handlers: Record<keyof K, StringStateHandler | ((arg?: any) => any)>\n\n    create(kwargs: K): R {\n        const row = {} as any\n        for (const key in this.handlers) {\n            const h = this.handlers[key]\n            if (h instanceof StringStateHandler) {\n                row[key] = h.create(kwargs[key]?.toString())\n            } else {\n                row[key] = h(kwargs[key])\n            }\n        }\n        row.handle = StateHandler.cnt++\n        row.status = Status.Ok\n        this.validate(row as R)\n        return row as R\n    }\n\n    update(tgt: R, kwargs: K): R {\n        const row = tgt as any\n        for (const key in this.handlers) {\n            const newValue = kwargs[key]\n            if (newValue !== undefined) {\n                const h = this.handlers[key]\n                if (h instanceof StringStateHandler) {\n                    row[key] = h.create(kwargs[key]?.toString())\n                } else {\n                    row[key] = h(kwargs[key])\n                }\n            }\n        }\n        this.validate(tgt)\n        return tgt\n    }\n\n    validate(tgt: R): Status {\n        this.reset(tgt)\n        for (const key in tgt) {\n            const field = tgt[key] as any\n            if (typeof field === 'object' && field !== null && field.status !== undefined) {\n                this.transferStatus(tgt, field as Verifiable)\n            }\n        }\n        return tgt.status\n    }\n}\n","import { DEFAULT_AND_ACTUAL_VALUES_MISMATCH } from 'economic/const'\nimport {\n  StringState,\n  StringStateHandler,\n  format,\n  isBlank\n} from '.././StringStateHandler'\nimport { Status } from '.././verifiable'\n\nexport class FloatStringStateHandler extends StringStateHandler {\n  readonly minValue: number\n  readonly maxValue: number\n  readonly precision: number\n  readonly required: boolean\n\n  constructor(minValue: number, maxValue: number, precision: number, required: boolean) {\n    super()\n    this.minValue = minValue\n    this.maxValue = maxValue\n    this.precision = precision\n    this.required = required\n  }\n  \n  validate(tgt: StringState): Status {\n    this.reset(tgt)\n    if (this.required) {\n      this.checkIsNotBlank(tgt)\n    }\n    if (!isBlank(tgt.value)) {\n      const n = this.checkIsNumber(tgt)\n      if (!isNaN(n)) {\n        this.checkInRange(tgt, n, this.minValue, this.maxValue)\n      }\n    }\n    return tgt.status\n  }\n\n  normalized(s?: string): string {\n    const n = this.parseNumber(s ?? '')\n    if (isNaN(n)) {\n      return s ?? ''\n    }\n    return format(n, this.precision)\n  }\n\n  equal(tgt: StringState, value: number | string): boolean {\n    if (typeof(value) === 'number') {\n      value = format(value, this.precision, undefined, '')\n    }\n    return value === tgt.value\n  }\n\n  compareToDefault(tgt: StringState, defaultValue: number | string): boolean {\n    if (tgt.value !== '' && !this.equal(tgt, defaultValue)) {\n      this.addWarning(tgt, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\n      return false\n    }\n    return true\n  }\n}\n","import { NUMERIC_RANGE_VIOLATION } from 'economic/const';\nimport { FloatStringStateHandler } from './FloatStringStateHandler';\n\nexport class IntStringStateHandler extends FloatStringStateHandler {\n  readonly minValue: number;\n  readonly maxValue: number;\n  readonly required: boolean;\n\n  constructor(minValue: number, maxValue: number, required: boolean) {\n    super(minValue, maxValue, 0, required);\n    if (\n      minValue < Number.MIN_SAFE_INTEGER ||\n      maxValue > Number.MAX_SAFE_INTEGER\n    ) {\n      throw new Error(`${NUMERIC_RANGE_VIOLATION} [${Number.MIN_SAFE_INTEGER}...${Number.MAX_SAFE_INTEGER}]`);\n    }\n    this.minValue = minValue;\n    this.maxValue = maxValue;\n    this.required = required;\n  }\n}\n","import { StringStateHandler } from 'common/StringStateHandler'\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\nimport { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\nimport { IntStringStateHandler } from 'common/number-state-handler/IntStringStateHandler'\nimport { Status } from 'common/verifiable'\nimport { DEFAULT_AND_ACTUAL_VALUES_MISMATCH } from 'economic/const'\nimport { CapacityParamsState, CapacityParamsKw } from 'economic/model/capacity-params'\nimport { CapacityEconComputationDto } from 'economic/model/dto'\n\nexport class CapacityParamsStateHandler extends StringStateRecordHandler<CapacityParamsState, CapacityParamsKw> {\n  private massHandler = new FloatStringStateHandler(1, 110e3, 3, false)\n  private intervalHandler = new IntStringStateHandler(1, 1440, false)\n  private trainQtyHandler = new IntStringStateHandler(1, 1000, false)\n\n  readonly handlers: Record<keyof CapacityParamsKw, StringStateHandler | ((arg?: any) => any)> = {\n    oldCapacityDto: (v: CapacityEconComputationDto) => v === undefined ? null : v,\n    newCapacityDto: (v: CapacityEconComputationDto) => v === undefined ? null : v,\n    maxTrainMass: this.massHandler,\n    oldInterval: this.intervalHandler,\n    newInterval: this.intervalHandler,\n    oldTrainQty: this.trainQtyHandler,\n    newTrainQty: this.trainQtyHandler\n  }\n\n  validate(tgt: CapacityParamsState): Status {\n    this.massHandler.validate(tgt.maxTrainMass)\n    this.intervalHandler.validate(tgt.oldInterval)\n    this.trainQtyHandler.validate(tgt.oldTrainQty)\n    this.intervalHandler.validate(tgt.newInterval)\n    this.trainQtyHandler.validate(tgt.newTrainQty)\n\n    if (tgt.oldCapacityDto === null) {\n      this.intervalHandler.checkIsNotBlank(tgt.oldInterval)\n      this.trainQtyHandler.checkIsNotBlank(tgt.oldTrainQty)\n    } else {\n      if (tgt.oldInterval.value !== '' && !this.intervalHandler.equal(tgt.oldInterval, tgt.oldCapacityDto.trainInterval)) {\n        this.intervalHandler.addWarning(tgt.oldInterval, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\n      }\n      if (tgt.oldTrainQty.value !== '' && !this.trainQtyHandler.equal(tgt.oldTrainQty, tgt.oldCapacityDto.trainQty)) {\n        this.trainQtyHandler.addWarning(tgt.oldTrainQty, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\n      }\n    }\n    \n    if (tgt.newCapacityDto === null) {\n      this.intervalHandler.checkIsNotBlank(tgt.newInterval)\n      this.trainQtyHandler.checkIsNotBlank(tgt.newTrainQty)\n    } else {\n      if (tgt.newInterval.value !== '' && !this.intervalHandler.equal(tgt.newInterval, tgt.newCapacityDto.trainInterval)) {\n        this.intervalHandler.addWarning(tgt.newInterval, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\n      }\n      if (tgt.newTrainQty.value !== '' && !this.trainQtyHandler.equal(tgt.newTrainQty, tgt.newCapacityDto.trainQty)) {\n        this.trainQtyHandler.addWarning(tgt.newTrainQty, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\n      }\n    }\n\n    if (tgt.oldCapacityDto === null && tgt.newCapacityDto === null) {\n      this.massHandler.checkIsNotBlank(tgt.maxTrainMass)\n    } else {\n      this.massHandler.validate(tgt.maxTrainMass)\n      if (tgt.maxTrainMass.value !== '' && !this.massHandler.equal(tgt.maxTrainMass, this.defaultMass(tgt)!)) {\n        this.massHandler.addWarning(tgt.maxTrainMass, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\n      }\n    }\n\n    return super.validate(tgt)\n  }\n\n  defaultMass(tgt: CapacityParamsState): string {\n    if (tgt.oldCapacityDto == null && tgt.newCapacityDto == null) {\n      return ''\n    }\n    return this.massHandler.normalized(Math.max(tgt.oldCapacityDto?.trainWeightMaximum ?? 0, tgt.newCapacityDto?.trainWeightMaximum ?? 0).toString())\n  }\n}\n","import { StringStateHandler } from 'common/StringStateHandler'\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\nimport { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\nimport { Status } from 'common/verifiable'\nimport { DEFAULT_AND_ACTUAL_VALUES_MISMATCH } from 'economic/const'\nimport { ParallelEconComputationDto } from 'economic/model/dto'\nimport { ParallelScheduleParamsKwArgs, ParallelScheduleParamsState } from 'economic/model/parallel-schedule-params'\n\nexport class ParallelScheduleParamsStateHandler extends StringStateRecordHandler<ParallelScheduleParamsState, ParallelScheduleParamsKwArgs> {\n    \n    readonly dcHandler = new FloatStringStateHandler(0, 1e6, 3, false)\n    \n    handlers: Record<keyof ParallelScheduleParamsKwArgs, StringStateHandler | ((arg?: any) => any)> = {\n        oldComputation: (c?: ParallelEconComputationDto) => c === undefined ? null : c,\n        newComputation: (c?: ParallelEconComputationDto) => c === undefined ? null : c,\n        oldDailyConsumption: this.dcHandler,\n        newDailyConsumption: this.dcHandler\n    }\n\n    validate(tgt: ParallelScheduleParamsState): Status {\n        this.reset(tgt)\n\n        this.dcHandler.validate(tgt.oldDailyConsumption)\n        if (tgt.oldComputation === null) {\n            this.dcHandler.checkIsNotBlank(tgt.oldDailyConsumption)\n        } else {\n            if (tgt.oldDailyConsumption.value !== '' && !this.dcHandler.equal(tgt.oldDailyConsumption, tgt.oldComputation.energyConsumption)) {\n                this.dcHandler.addWarning(tgt.oldDailyConsumption, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\n            }\n        }\n\n        this.dcHandler.validate(tgt.newDailyConsumption)\n        if (tgt.newComputation === null) {\n            this.dcHandler.checkIsNotBlank(tgt.newDailyConsumption)\n        } else {\n            if (tgt.newDailyConsumption.value !== '' && !this.dcHandler.equal(tgt.newDailyConsumption, tgt.newComputation.energyConsumption)) {\n                this.dcHandler.addWarning(tgt.newDailyConsumption, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\n            }\n        }\n\n        this.transferStatus(tgt, tgt.oldDailyConsumption)\n        this.transferStatus(tgt, tgt.newDailyConsumption)\n        return tgt.status\n    }\n}","import { StringState } from './StringStateHandler'\nimport { StringStateRecordHandler } from './StringStateRecordHandler'\nimport { StateHandler, Status, Verifiable } from './verifiable'\n\nexport interface StringStateTable<R extends Verifiable> extends Verifiable {\n    rows: R[]\n}\n\nexport class StringStateTableHandler<R extends Verifiable, K extends Record<string, any>> extends StateHandler<StringStateTable<R>> {\n\n    private rowHandler: StringStateRecordHandler<R, K>\n\n    constructor(rowHandler: StringStateRecordHandler<R, K>) {\n        super()\n        this.rowHandler = rowHandler\n    }\n\n    validate(tgt: StringStateTable<R>): Status {\n        this.reset(tgt)\n        for (const row of tgt.rows) {\n            this.transferStatus(tgt, row)\n        }\n        return tgt.status\n    }\n\n    createDefault(): StringStateTable<R> {\n        const instance = {\n            handle: StateHandler.cnt++,\n            status: Status.Ok,\n            rows: []\n        }\n        this.validate(instance)\n        return instance\n    }\n\n    insertRow(tgt: StringStateTable<R>, idx: number | null, kwargs: K): R {\n        const row = this.rowHandler.create(kwargs)\n        if (idx === null) {\n            idx = tgt.rows.length\n        }\n        if (idx < 0) {\n            idx += tgt.rows.length\n        }\n        tgt.rows.splice(idx, 0, row)\n        tgt.rows = tgt.rows.slice()\n        this.validate(tgt)\n        return row\n    }\n\n    duplicateRow(tgt: StringStateTable<R>, idx: number): R {\n        const row = tgt.rows[idx]\n        const kw = {} as any\n        for (const key in this.rowHandler.handlers) {\n            const value = (row as any)[key]\n            if (value.handle !== undefined) {\n                kw[key] = (value as StringState).value\n            } else {\n                kw[key] = value\n            }\n        }\n        const copy = this.rowHandler.create(kw)\n        tgt.rows.splice(idx, 0, copy)\n        tgt.rows = tgt.rows.slice()\n        this.validate(tgt)\n        return copy\n    }\n\n    updateRow(tgt: StringStateTable<R>, idx: number, kwargs: K) {\n        const row = tgt.rows[idx]\n        this.rowHandler.update(row, kwargs)\n        this.validate(tgt)\n    }\n\n    deleteRow(tgt: StringStateTable<R>, idx: number) {\n        tgt.rows.splice(idx, 1)\n        tgt.rows = tgt.rows.slice()\n        this.validate(tgt)\n    }\n}","import { StringState, StringStateHandler } from 'common/StringStateHandler'\nimport { Status } from 'common/verifiable'\nimport { MAX_SYMBOL_QTY } from 'economic/const'\n\nexport class StringStringStateHandler extends StringStateHandler {\n\n    private maxLength: number\n    private minLength: number\n\n    constructor(minLength: number, maxLength: number = 0) {\n        super()\n        this.maxLength = maxLength\n        this.minLength = minLength\n    }\n\n    toDto(state: StringState): string {\n        return state.value\n    }\n\n    validate(tgt: StringState): Status {\n        this.reset(tgt)\n        if (tgt.value.length > this.maxLength || tgt.value.length < this.minLength) {\n            this.addError(tgt, `${MAX_SYMBOL_QTY} [${this.minLength}...${this.maxLength}]`)\n        }\n        return tgt.status\n    }\n\n    normalized(s?: string | undefined): string {\n        if (s == null) {\n            return ''\n        } else {\n            return s.trim()\n        }\n    }\n\n}","import { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\nimport { IntStringStateHandler } from 'common/number-state-handler/IntStringStateHandler'\nimport { StringStateHandler } from 'common/StringStateHandler'\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\nimport { StringStateTableHandler } from 'common/StringStateTableHandler'\nimport { StringStringStateHandler } from 'common/StringStringStateHandler'\nimport {CapitalExpendituresRowKwArgs, CapitalExpendituresRowState} from 'economic/model/capital-expenditures'\n\nclass RowHandler extends StringStateRecordHandler<CapitalExpendituresRowState, CapitalExpendituresRowKwArgs> {\n\n    readonly handlers: Record<keyof CapitalExpendituresRowKwArgs, StringStateHandler | ((arg?: any) => any)> = {\n        equipment: new StringStringStateHandler(5, 50),\n        type: new StringStringStateHandler(0, 50),\n        price: new FloatStringStateHandler(1, 100e6, 2, true),\n        qty: new IntStringStateHandler(1, 1e3, true),\n        serviceLife: new IntStringStateHandler(1, 100, true)\n    }\n}\n\nexport class CapitalExpendituresStateHandler extends StringStateTableHandler<CapitalExpendituresRowState, CapitalExpendituresRowKwArgs> {\n    constructor() {\n        super(new RowHandler())\n    }\n}","import { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\nimport { IntStringStateHandler } from 'common/number-state-handler/IntStringStateHandler'\nimport { StringStateHandler } from 'common/StringStateHandler'\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\nimport { StringStateTableHandler } from 'common/StringStateTableHandler'\nimport { StringStringStateHandler } from 'common/StringStringStateHandler'\nimport { AdditionalExpendituresRowKwArgs, AdditionalExpendituresRowState } from 'economic/model/additional-expendures'\nimport { ExpenditureType } from 'economic/model/dto'\n\nclass RowHanler extends StringStateRecordHandler<AdditionalExpendituresRowState, AdditionalExpendituresRowKwArgs> {\n\n    private expItemHandler = new StringStringStateHandler(5, 50)\n    private equipmentHandler = new StringStringStateHandler(0, 50)\n    private priceHandler = new FloatStringStateHandler(1, 10e6, 2, true)\n    private qtyHandler = new IntStringStateHandler(1, 1e3, true)\n\n    handlers: Record<keyof AdditionalExpendituresRowKwArgs, StringStateHandler | ((arg?: any) => any)> = {\n        expendureItem: this.expItemHandler,\n        equipment: this.equipmentHandler,\n        price: this.priceHandler,\n        qty: this.qtyHandler,\n        period: (s?: ExpenditureType) => s ?? 'ANNUAL'\n    }\n}\n\nexport class AdditionalExpendituresStateHandler extends StringStateTableHandler<AdditionalExpendituresRowState, AdditionalExpendituresRowKwArgs> {\n    constructor() {\n        super(new RowHanler())\n    }\n}","import { StringStateHandler } from 'common/StringStateHandler'\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\nimport { StringStringStateHandler } from 'common/StringStringStateHandler'\nimport { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\nimport { IntStringStateHandler } from 'common/number-state-handler/IntStringStateHandler'\nimport { SalaryStateRow, SalaryStateKw } from 'economic/model/salary'\n\nexport class SalaryRowStateHandler extends StringStateRecordHandler<SalaryStateRow, SalaryStateKw> {\n\n    handlers: Record<keyof SalaryStateKw, StringStateHandler | ((arg?: any) => any)> = {\n        employee: new StringStringStateHandler(5, 50),\n        equipment: new StringStringStateHandler(0, 50),\n        qty: new IntStringStateHandler(1, 100, true),\n        hourlyRate: new FloatStringStateHandler(1, 1e4, 2, true),\n        annualOutput: new IntStringStateHandler(1, 1e4, true),\n        motivation: new FloatStringStateHandler(0, 100, 2, true),\n    }\n}\n","import { StringStateHandler, format } from 'common/StringStateHandler'\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\nimport { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\nimport { IntStringStateHandler } from 'common/number-state-handler/IntStringStateHandler'\nimport { Status } from 'common/verifiable'\nimport { RatesState, RatesStateKw } from 'economic/model/rates'\n\nexport class RatesStateHandler extends StringStateRecordHandler<RatesState, RatesStateKw> {\n\n    readonly DEFAULT_INCOME_TAX = 20.0\n    readonly DEFAULT_PROPERTY_TAX = 2.2\n    readonly DEFAULT_UNIFIED_SOCIAL_TAX = 30.4\n    readonly DEFAULT_DISCOUNT_RATE = 10.0\n    readonly DEFAULT_ANNUAL_INFLATION_RATE = 5.0\n    readonly DEFAULT_ANNUAL_SALARY_INDEXATION = 5.0\n    readonly DEFAULT_ANNUAL_INCREASE_IN_ELECTRICITY_TARIFF = 5.0\n    readonly DEFAULT_CALC_PERIOD = 5\n\n    private rateHandler = new FloatStringStateHandler(0, 1e4, 1, true)\n    private energyConsumptionHandler = new FloatStringStateHandler(-100, 50, 2, true)\n    private electricityCostHandler = new FloatStringStateHandler(0, 1e3, 1, true)\n    private fOptHandler = new FloatStringStateHandler(0, 50, 2, false)\n    private calcPeriodHandler = new IntStringStateHandler(1, 50, false)\n\n    handlers: Record<keyof RatesStateKw, StringStateHandler | ((arg?: any) => any)> = {\n        profitRateForCargoTurnover: this.rateHandler,\n        spendingRateForEconomicTasks: this.rateHandler,\n        reducedEnergyConsumption: this.energyConsumptionHandler,\n        electricityCostPerTraction: this.electricityCostHandler,\n        incomeTax: this.fOptHandler,\n        propertyTax: this.fOptHandler,\n        unifiedSocialTax: this.fOptHandler,\n        discountRate: this.fOptHandler,\n        annualInflationRate: this.fOptHandler,\n        annualSalaryIndexation: this.fOptHandler,\n        annualIncreaseInElectricityTariff: this.fOptHandler,\n        calculationPeriod: this.calcPeriodHandler\n    }\n\n    validate(tgt: RatesState): Status {\n        this.fOptHandler.compareToDefault(tgt.incomeTax, this.DEFAULT_INCOME_TAX)\n        this.fOptHandler.compareToDefault(tgt.propertyTax, this.DEFAULT_PROPERTY_TAX)\n        this.fOptHandler.compareToDefault(tgt.unifiedSocialTax, this.DEFAULT_UNIFIED_SOCIAL_TAX)\n        this.fOptHandler.compareToDefault(tgt.discountRate, this.DEFAULT_DISCOUNT_RATE)\n        this.fOptHandler.compareToDefault(tgt.annualInflationRate, this.DEFAULT_ANNUAL_INFLATION_RATE)\n        this.fOptHandler.compareToDefault(tgt.annualSalaryIndexation, this.DEFAULT_ANNUAL_SALARY_INDEXATION)\n        this.fOptHandler.compareToDefault(tgt.annualIncreaseInElectricityTariff, this.DEFAULT_ANNUAL_INCREASE_IN_ELECTRICITY_TARIFF)\n        this.calcPeriodHandler.compareToDefault(tgt.calculationPeriod, this.DEFAULT_CALC_PERIOD)\n\n        super.validate(tgt)\n        return tgt.status\n    }\n\n    discountCoefficient(tgt: RatesState): string {\n        if (tgt.discountRate.status < Status.Error) {\n            const dr = tgt.discountRate.value !== ''\n             ? this.fOptHandler.parseNumber(tgt.discountRate.value)\n             : this.DEFAULT_DISCOUNT_RATE\n            return format(1.0 / (1.0 + 0.01 * dr), 3)\n        }\n        return ''\n    }\n}","import { CapacityParamsStateHandler } from 'economic/handler/CapacityParamsStateHandler'\nimport { StateHandler, Status } from '../../common/verifiable'\nimport { CapacityParamsKw, CapacityParamsState } from '../model/capacity-params'\nimport { ParallelScheduleParamsKwArgs, ParallelScheduleParamsState } from '../model/parallel-schedule-params'\nimport { ParallelScheduleParamsStateHandler } from 'economic/handler/ParallelScheduleParamsStateHandler'\nimport { CapitalExpendituresRowKwArgs, CapitalExpendituresRowState } from '../model/capital-expenditures'\nimport { CapitalExpendituresStateHandler } from 'economic/handler/CapitalExpendituresStateHandler'\nimport { EfficiencyComputationState, TrackParams } from 'economic/model/efficiency-computation'\nimport { AdditionalExpendituresStateHandler } from './AdditionalExpenduresStateHandler'\nimport { AdditionalExpendituresRowKwArgs } from 'economic/model/additional-expendures'\nimport { StringStateTableHandler } from 'common/StringStateTableHandler'\nimport { SalaryRowStateHandler } from './SalaryStateHandler'\nimport { SalaryStateKw } from 'economic/model/salary'\nimport { StringState, StringStateHandler, format } from 'common/StringStateHandler'\nimport { RatesStateHandler } from './RatesStateHandler'\nimport { RatesStateKw } from 'economic/model/rates'\nimport { EfficiencyComputationDto, EfficiencyInputDto } from 'economic/model/dto'\nimport { StringStringStateHandler } from 'common/StringStringStateHandler'\nimport { ANY_REQUIRED_VALUES_ARE_MISSED, MAX_SYMBOL_QTY, VALUE_IS_REQUIRED, NUMERIC_RANGE_VIOLATION, ANY_NUMERIC_VALUES_ARE_OUT_OF_RANGE, ANY_STRINGS_HAVE_WRONG_LENGTH, NOT_A_NUMBER, ANY_NUMBERS_ARE_NOT_NUMBERS } from 'economic/const'\n\nexport class EfficiencyComputationMainHandler extends StateHandler<EfficiencyComputationState> {\n\n  private static _instance?: EfficiencyComputationMainHandler = undefined\n  readonly capacityHandler = new CapacityParamsStateHandler()\n  readonly parSchHandler = new ParallelScheduleParamsStateHandler()\n  private capitalExpendituresHandler = new CapitalExpendituresStateHandler()\n  private additionalExpendituresHandler = new AdditionalExpendituresStateHandler()\n  private salaryHandler = new StringStateTableHandler(new SalaryRowStateHandler())\n  readonly ratesHandler = new RatesStateHandler()\n  private nameHandler = new StringStringStateHandler(5, 50)\n  private descriptionHandler = new StringStringStateHandler(0, 50)\n\n  private constructor() {\n    super()\n  }\n\n  static getInstance(): EfficiencyComputationMainHandler {\n    if (!EfficiencyComputationMainHandler._instance) {\n      EfficiencyComputationMainHandler._instance = new EfficiencyComputationMainHandler()\n    }\n    return EfficiencyComputationMainHandler._instance\n  }\n\n  toDto(state: EfficiencyComputationState): EfficiencyComputationDto {\n    if (state.status > Status.Warning) {\n      throw new Error(state.what?.join('\\n'))\n    }\n    return {\n      id: state.id,\n      name: state.name.value,\n      description: state.description.value,\n      trackId: state.track!.id,\n      trackName: state.track!.name,\n      trackLength: state.track!.length,\n      capacityComputationBefore: state.capacity.oldCapacityDto ?? undefined,\n      capacityComputationAfter: state.capacity.newCapacityDto ?? undefined,\n      parallelComputationBefore: state.parallelSchedule.oldComputation ?? undefined,\n      parallelComputationAfter: state.parallelSchedule.newComputation ?? undefined,\n      inputData: {\n        trainWeightMaximum: this.tryParseNumber(state.capacity.maxTrainMass.value) ?? undefined,\n        trainIntervalBefore: this.tryParseNumber(state.capacity.oldInterval.value) ?? undefined,\n        trainIntervalAfter: this.tryParseNumber(state.capacity.newInterval.value) ?? undefined,\n        trainQtyBefore: this.tryParseNumber(state.capacity.oldTrainQty.value) ?? undefined,\n        trainQtyAfter: this.tryParseNumber(state.capacity.newTrainQty.value) ?? undefined,\n        energyConsumptionBefore: this.tryParseNumber(\n          state.parallelSchedule.oldDailyConsumption.value\n        ) ?? undefined,\n        energyConsumptionAfter: this.tryParseNumber(\n          state.parallelSchedule.newDailyConsumption.value\n        ) ?? undefined,\n        capitalInvestments: state.capitalExpenditures.rows.map(r => {\n          return {\n            equipment: r.equipment.value,\n            equipmentType: r.type.value,\n            price: this.parseNumber(r.price.value),\n            amount: this.parseNumber(r.qty.value),\n            serviceLife: this.parseNumber(r.serviceLife.value)\n          }\n        }),\n        additionalExpenditures: state.additionalExpenditures.rows.map(r => {\n          return {\n            name: r.expendureItem.value,\n            equipment: r.equipment.value,\n            amount: this.parseNumber(r.qty.value),\n            price: this.parseNumber(r.price.value),\n            type: r.period\n          }\n        }),\n        maintenanceSalaries: state.salary.rows.map(r => {\n          const hourlyRate = this.parseNumber(r.hourlyRate.value)\n          return {\n            paidWorker: r.employee.value,\n            equipmentName: r.equipment.value,\n            amount: this.parseNumber(r.qty.value),\n            hourlyRate: hourlyRate,\n            productivity: this.parseNumber(r.annualOutput.value),\n            additionalPayments: this.parseNumber(r.motivation.value)\n          }\n        }),\n        profitOptions: {\n          profitRateForCargoTurnover: this.parseNumber(state.rates.profitRateForCargoTurnover.value),\n          spendingRateForEconomicTasks: this.parseNumber(state.rates.spendingRateForEconomicTasks.value),\n          reducedEnergyConsumption: this.parseNumber(state.rates.reducedEnergyConsumption.value),\n          electricityCostPerTraction: this.parseNumber(state.rates.electricityCostPerTraction.value)\n        },\n        taxRates: {\n          incomeTax: this.tryParseNumber(state.rates.incomeTax.value)\n            ?? this.ratesHandler.DEFAULT_INCOME_TAX,\n          propertyTax: this.tryParseNumber(state.rates.propertyTax.value)\n            ?? this.ratesHandler.DEFAULT_PROPERTY_TAX,\n          unifiedSocialTax: this.tryParseNumber(state.rates.unifiedSocialTax.value)\n            ?? this.ratesHandler.DEFAULT_UNIFIED_SOCIAL_TAX\n        },\n        inflation: {\n          discountRate: this.tryParseNumber(state.rates.discountRate.value)\n            ?? this.ratesHandler.DEFAULT_DISCOUNT_RATE,\n          annualInflationRate: this.tryParseNumber(state.rates.annualInflationRate.value)\n            ?? this.ratesHandler.DEFAULT_ANNUAL_INFLATION_RATE,\n          annualSalaryIndexation: this.tryParseNumber(state.rates.annualSalaryIndexation.value)\n            ?? this.ratesHandler.DEFAULT_ANNUAL_SALARY_INDEXATION,\n          annualIncreaseInElectricityTariff: this.tryParseNumber(state.rates.annualIncreaseInElectricityTariff.value)\n            ?? this.ratesHandler.DEFAULT_ANNUAL_INCREASE_IN_ELECTRICITY_TARIFF\n        },\n        calculationPeriod: this.tryParseNumber(state.rates.calculationPeriod.value)\n          ?? this.ratesHandler.DEFAULT_CALC_PERIOD\n      }\n    }\n  }\n\n  fromDto(dto: EfficiencyComputationDto): EfficiencyComputationState {\n    const capitalExpenditures = this.capitalExpendituresHandler.createDefault()\n    for (const row of dto.inputData.capitalInvestments) {\n      this.capitalExpendituresHandler.insertRow(\n        capitalExpenditures,\n        null,\n        {\n          equipment: row.equipment,\n          price: row.price,\n          qty: row.amount,\n          serviceLife: row.serviceLife,\n          type: row.equipmentType\n        }\n      )\n    }\n\n    const additionalExpenditures = this.additionalExpendituresHandler.createDefault()\n    for (const row of dto.inputData.additionalExpenditures) {\n      this.additionalExpendituresHandler.insertRow(\n        additionalExpenditures,\n        null,\n        {\n          equipment: row.equipment,\n          expendureItem: row.name,\n          period: row.type,\n          price: row.price,\n          qty: row.amount\n        }\n      )\n    }\n\n    const salary = this.salaryHandler.createDefault()\n    for (const row of dto.inputData.maintenanceSalaries) {\n      this.salaryHandler.insertRow(\n        salary,\n        null,\n        {\n          employee: row.paidWorker,\n          equipment: row.equipmentName,\n          qty: row.amount,\n          hourlyRate: row.hourlyRate,\n          annualOutput: row.productivity,\n          motivation: row.additionalPayments\n        }\n      )\n    }\n\n    const state: EfficiencyComputationState = {\n      handle: StateHandler.cnt++,\n      status: Status.Ok,\n      id: dto.id,\n      name: this.nameHandler.create(dto.name),\n      description: this.descriptionHandler.create(dto.description),\n      track: {\n        id: dto.trackId,\n        name: dto.trackName,\n        length: dto.trackLength\n      },\n      capacity: this.capacityHandler.create({\n        oldCapacityDto: dto.capacityComputationBefore,\n        newCapacityDto: dto.capacityComputationAfter,\n        maxTrainMass: dto.inputData.trainWeightMaximum?.toString(),\n        oldInterval: dto.inputData.trainIntervalBefore?.toString(),\n        newInterval: dto.inputData.trainIntervalAfter?.toString(),\n        oldTrainQty: dto.inputData.trainQtyBefore?.toString(),\n        newTrainQty: dto.inputData.trainQtyAfter?.toString()\n      }),\n      parallelSchedule: this.parSchHandler.create({\n        oldComputation: dto.parallelComputationBefore,\n        newComputation: dto.parallelComputationAfter,\n        oldDailyConsumption: dto.inputData.energyConsumptionBefore?.toString(),\n        newDailyConsumption: dto.inputData.energyConsumptionAfter?.toString()\n      }),\n      capitalExpenditures: capitalExpenditures,\n      additionalExpenditures: additionalExpenditures,\n      salary: salary,\n      rates: this.ratesHandler.create({\n        profitRateForCargoTurnover: dto.inputData.profitOptions.profitRateForCargoTurnover,\n        spendingRateForEconomicTasks: dto.inputData.profitOptions.spendingRateForEconomicTasks,\n        reducedEnergyConsumption: dto.inputData.profitOptions.reducedEnergyConsumption,\n        electricityCostPerTraction: dto.inputData.profitOptions.electricityCostPerTraction,\n        incomeTax: dto.inputData.taxRates.incomeTax,\n        propertyTax: dto.inputData.taxRates.propertyTax,\n        unifiedSocialTax: dto.inputData.taxRates.unifiedSocialTax,\n        discountRate: dto.inputData.inflation.discountRate,\n        annualInflationRate: dto.inputData.inflation.annualInflationRate,\n        annualSalaryIndexation: dto.inputData.inflation.annualSalaryIndexation,\n        annualIncreaseInElectricityTariff: dto.inputData.inflation.annualIncreaseInElectricityTariff,\n        calculationPeriod: dto.inputData.calculationPeriod\n      })\n    }\n    this.validate(state)\n    return state\n  }\n\n  validate(tgt: EfficiencyComputationState): Status {\n    this.reset(tgt)\n    this.check(tgt, tgt.track !== null, Status.Error, 'Необходимо выбрать участок')\n    this.check(\n      tgt,\n      tgt.capitalExpenditures.rows.length > 0 || tgt.additionalExpenditures.rows.length > 0 || tgt.salary.rows.length > 0,\n      Status.Error,\n      'Необходимо ввести хотя бы одну строку затрат'\n    )\n    this.checkEquipmentNames(tgt, tgt.additionalExpenditures.rows)\n    this.checkEquipmentNames(tgt, tgt.salary.rows)\n    this.transferStatus(tgt, tgt.name)\n    this.transferStatus(tgt, tgt.description)\n    this.transferStatus(tgt, tgt.capacity)\n    this.transferStatus(tgt, tgt.parallelSchedule)\n    this.transferStatus(tgt, tgt.capitalExpenditures)\n    this.transferStatus(tgt, tgt.additionalExpenditures)\n    this.transferStatus(tgt, tgt.salary)\n    this.transferStatus(tgt, tgt.rates)\n    return tgt.status\n  }\n\n  createDefault(): EfficiencyComputationState {\n    const state: EfficiencyComputationState = {\n      id: undefined,\n      name: this.nameHandler.create(),\n      description: this.descriptionHandler.create(),\n      track: null,\n      handle: StateHandler.cnt++,\n      status: Status.Ok,\n      capacity: this.capacityHandler.create({}),\n      parallelSchedule: this.parSchHandler.create({}),\n      capitalExpenditures: this.capitalExpendituresHandler.createDefault(),\n      additionalExpenditures: this.additionalExpendituresHandler.createDefault(),\n      salary: this.salaryHandler.createDefault(),\n      rates: this.ratesHandler.create({})\n    }\n    this.validate(state)\n    return state\n  }\n\n  logErrors(tgt: EfficiencyComputationState): string {\n    const messages = tgt.what\n      ?.map(msg => {\n        if (msg === VALUE_IS_REQUIRED) {\n          return ANY_REQUIRED_VALUES_ARE_MISSED\n        } else if (msg.includes(MAX_SYMBOL_QTY)) {\n          return ANY_STRINGS_HAVE_WRONG_LENGTH\n        } else if (msg.includes(NUMERIC_RANGE_VIOLATION)) {\n          return ANY_NUMERIC_VALUES_ARE_OUT_OF_RANGE\n        } else if (msg.includes(NOT_A_NUMBER)) {\n          return ANY_NUMBERS_ARE_NOT_NUMBERS\n        }\n        return msg\n      }) ?? []\n    return Array.from(new Set(messages)).sort()\n      .map((s, i) => `${i + 1}. ${s}`)\n      .join('\\n')\n  }\n\n  powerDiff(tgt: ParallelScheduleParamsState): { abs: string, rel: string } {\n    if (tgt.status < Status.Error) {\n      let _old: number = 0\n      if (tgt.oldDailyConsumption.value !== '') {\n        _old = this.parSchHandler.dcHandler.parseNumber(tgt.oldDailyConsumption.value)\n      } else {\n        _old = tgt.oldComputation!.energyConsumption\n      }\n\n      let _new: number = 0\n      if (tgt.newDailyConsumption.value !== '') {\n        _new = this.parSchHandler.dcHandler.parseNumber(tgt.newDailyConsumption.value)\n      } else {\n        _new = tgt.newComputation!.energyConsumption\n      }\n\n      return {\n        abs: format(_new - _old, 2, 0, '', 'always'),\n        rel: format(100 * (_new - _old) / _old, 2, 0, '', 'always') + ' %'\n      }\n    }\n    return { abs: '', rel: '' }\n  }\n\n  intervalDiff(tgt: CapacityParamsState): { abs: string, rel: string } {\n    if (tgt.newInterval.status < Status.Error && tgt.oldInterval.status < Status.Error) {\n      let _old: number = 0\n      if (tgt.oldInterval.value !== '') {\n        _old = this.parSchHandler.dcHandler.parseNumber(tgt.oldInterval.value)\n      } else {\n        _old = tgt.oldCapacityDto!.trainInterval\n      }\n\n      let _new: number = 0\n      if (tgt.newInterval.value !== '') {\n        _new = this.parSchHandler.dcHandler.parseNumber(tgt.newInterval.value)\n      } else {\n        _new = tgt.newCapacityDto!.trainInterval\n      }\n\n      return {\n        abs: format(_new - _old, 0, 0, '', 'always'),\n        rel: format(100 * (_new - _old) / _old, 2, 0, '', 'always') + ' %'\n      }\n    }\n    return { abs: '', rel: '' }\n  }\n\n  trainQtyDiff(tgt: CapacityParamsState): { abs: string, rel: string } {\n    if (tgt.newTrainQty.status < Status.Error && tgt.oldTrainQty.status < Status.Error) {\n      let _old: number = 0\n      if (tgt.oldTrainQty.value !== '') {\n        _old = this.parSchHandler.dcHandler.parseNumber(tgt.oldTrainQty.value)\n      } else {\n        _old = tgt.oldCapacityDto!.trainQty\n      }\n\n      let _new: number = 0\n      if (tgt.newTrainQty.value !== '') {\n        _new = this.parSchHandler.dcHandler.parseNumber(tgt.newTrainQty.value)\n      } else {\n        _new = tgt.newCapacityDto!.trainQty\n      }\n\n      return {\n        abs: format(_new - _old, 0, 0, '', 'always'),\n        rel: format(100 * (_new - _old) / _old, 2, 0, '', 'always') + ' %'\n      }\n    }\n    return { abs: '', rel: '' }\n  }\n\n  copy(tgt: EfficiencyComputationState): EfficiencyComputationState {\n    const cp = { ...tgt }\n    cp.handle = StateHandler.cnt++\n    return cp\n  }\n\n  updateName(tgt: EfficiencyComputationState, name: string) {\n    tgt.name = this.nameHandler.create(name)\n    this.validate(tgt)\n  }\n\n  updateDescription(tgt: EfficiencyComputationState, description: string) {\n    tgt.description = this.descriptionHandler.create(description)\n    this.validate(tgt)\n  }\n\n  updateTrack(tgt: EfficiencyComputationState, trackParams: TrackParams | null) {\n    if (trackParams?.id !== tgt.track?.id) {\n      this.updateParallelScheduleParams(tgt, { oldComputation: null, newComputation: null })\n      this.updateCapacityParams(tgt, { oldCapacityDto: null, newCapacityDto: null })\n    }\n    tgt.track = trackParams\n    this.validate(tgt)\n  }\n\n  updateCapacityParams(tgt: EfficiencyComputationState, kwargs: CapacityParamsKw) {\n    if ((kwargs.oldCapacityDto != null || kwargs.newCapacityDto != null) && tgt.track === null) {\n      throw new Error('Попытка выбора расчета пропускной способности при невыбранном участке')\n    }\n    if (kwargs.oldCapacityDto !== undefined && kwargs.oldCapacityDto?.schemaId !== tgt.capacity.oldCapacityDto?.schemaId) {\n      this.updateParallelScheduleParams(tgt, { oldComputation: null })\n    }\n    if (kwargs.newCapacityDto !== undefined && kwargs.newCapacityDto?.schemaId !== tgt.capacity.newCapacityDto?.schemaId) {\n      this.updateParallelScheduleParams(tgt, { newComputation: null })\n    }\n    this.capacityHandler.update(tgt.capacity, kwargs)\n    this.validate(tgt)\n  }\n\n  updateParallelScheduleParams(tgt: EfficiencyComputationState, kwargs: ParallelScheduleParamsKwArgs) {\n    if (\n      tgt.capacity.oldCapacityDto === null && kwargs.oldComputation != null ||\n      tgt.capacity.newCapacityDto === null && kwargs.newComputation != null\n    ) {\n      throw new Error('Попытка выбрать расчет нагрузочной способности при невыбранном расчете пропускной способности')\n    }\n    this.parSchHandler.update(tgt.parallelSchedule, kwargs)\n    this.validate(tgt)\n  }\n\n  updateCapitalExpendituresRow(tgt: EfficiencyComputationState, idx: number, kwargs: CapitalExpendituresRowKwArgs) {\n    this.capitalExpendituresHandler.updateRow(tgt.capitalExpenditures, idx, kwargs)\n    if (kwargs.equipment !== undefined) {\n      this.checkEquipmentNames(tgt, tgt.additionalExpenditures.rows)\n      this.checkEquipmentNames(tgt, tgt.salary.rows)\n    }\n    this.validate(tgt)\n  }\n\n  insertCapitalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\n    this.capitalExpendituresHandler.insertRow(tgt.capitalExpenditures, idx, {})\n    this.validate(tgt)\n  }\n\n  deleteCapitalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\n    this.capitalExpendituresHandler.deleteRow(tgt.capitalExpenditures, idx)\n    this.checkEquipmentNames(tgt, tgt.additionalExpenditures.rows)\n    this.checkEquipmentNames(tgt, tgt.salary.rows)\n    this.validate(tgt)\n  }\n\n  duplicateCapitalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\n    this.capitalExpendituresHandler.duplicateRow(tgt.capitalExpenditures, idx)\n    this.validate(tgt)\n  }\n\n  updateAdditionalExpendituresRow(tgt: EfficiencyComputationState, idx: number, kwargs: AdditionalExpendituresRowKwArgs) {\n    this.additionalExpendituresHandler.updateRow(tgt.additionalExpenditures, idx, kwargs)\n    this.validate(tgt)\n  }\n\n  insertAdditionalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\n    const row = this.additionalExpendituresHandler.insertRow(tgt.additionalExpenditures, idx, {})\n    this.checkEquipmentNames(tgt, [row])\n    this.validate(tgt)\n  }\n\n  deleteAdditionalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\n    this.additionalExpendituresHandler.deleteRow(tgt.additionalExpenditures, idx)\n    this.validate(tgt)\n  }\n\n  duplicateAdditionalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\n    const row = this.additionalExpendituresHandler.duplicateRow(tgt.additionalExpenditures, idx)\n    this.checkEquipmentNames(tgt, [row])\n    this.validate(tgt)\n  }\n\n  uniqueEquipmentNames(current: string, arr: CapitalExpendituresRowState[]): string[] {\n    const names = arr.map(row => row.equipment.value)\n    names.splice(0, 0, '')\n    names.push(current)\n    return Array.from(new Set(names))\n  }\n\n  insertSalaryRow(tgt: EfficiencyComputationState, idx: number) {\n    const row = this.salaryHandler.insertRow(tgt.salary, idx, {})\n    this.checkEquipmentNames(tgt, [row])\n    this.validate(tgt)\n  }\n\n  updateSalaryRow(tgt: EfficiencyComputationState, idx: number, kwargs: SalaryStateKw) {\n    this.salaryHandler.updateRow(tgt.salary, idx, kwargs)\n    this.validate(tgt)\n  }\n\n  deleteSalaryRow(tgt: EfficiencyComputationState, idx: number) {\n    this.salaryHandler.deleteRow(tgt.salary, idx)\n    this.validate(tgt)\n  }\n\n  duplicateSalaryRow(tgt: EfficiencyComputationState, idx: number) {\n    const row = this.salaryHandler.duplicateRow(tgt.salary, idx)\n    this.checkEquipmentNames(tgt, [row])\n    this.validate(tgt)\n  }\n\n  updateRates(tgt: EfficiencyComputationState, kwargs: RatesStateKw) {\n    this.ratesHandler.update(tgt.rates, kwargs)\n    this.validate(tgt)\n  }\n\n  private checkEquipmentNames(tgt: EfficiencyComputationState, dependentRows: { equipment: StringState }[]) {\n    const equipmentNames = this.uniqueEquipmentNames('', tgt.capitalExpenditures.rows)\n    for (const row of dependentRows) {\n      this.reset(row.equipment)\n      if (!equipmentNames.includes(row.equipment.value)) {\n        this.addWarning(row.equipment, 'Необъявленное оборудование')\n        this.transferStatus(tgt, row.equipment)\n      }\n    }\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { CapacityParamsKw } from './model/capacity-params';\nimport { EfficiencyComputationMainHandler } from './handler/EfficiencyComputationMainHandler';\nimport { ParallelScheduleParamsKwArgs } from './model/parallel-schedule-params';\nimport { CapitalExpendituresRowKwArgs } from './model/capital-expenditures';\nimport { AdditionalExpendituresRowKwArgs } from './model/additional-expendures';\nimport { SalaryStateKw } from './model/salary'\nimport { RatesStateKw } from './model/rates'\nimport { TrackParams } from './model/efficiency-computation';\nimport { EfficiencyComputationDto } from './model/dto';\n\nconst h = EfficiencyComputationMainHandler.getInstance();\n\nconst economicSlice = createSlice({\n  name: 'economic',\n  initialState: h.createDefault(),\n  reducers: {\n    updateName(state, action: PayloadAction<string>) {\n      h.updateName(state, action.payload)\n    },\n\n    updateDescription(state, action: PayloadAction<string>) {\n      h.updateDescription(state, action.payload)\n    },\n\n    updateTrack(state, action: PayloadAction<TrackParams | null>) {\n      h.updateTrack(state, action.payload)\n    },\n\n    updateCapacityParams(state, action: PayloadAction<CapacityParamsKw>) {\n      h.updateCapacityParams(state, action.payload);\n    },\n\n    updateParallelScheduleParams(state, action: PayloadAction<ParallelScheduleParamsKwArgs>) {\n      h.updateParallelScheduleParams(state, action.payload);\n    },\n\n    updateCapitalExpendituresRow(state, action: PayloadAction<{ idx: number } & CapitalExpendituresRowKwArgs>) {\n      h.updateCapitalExpendituresRow(state, action.payload.idx, action.payload)\n    },\n\n    insertCapitalExpendituresRow(state, action: PayloadAction<number>) {\n      h.insertCapitalExpendituresRow(state, action.payload)\n      return state\n    },\n\n    deleteCapitalExpendituresRow(state, action: PayloadAction<number>) {\n      h.deleteCapitalExpendituresRow(state, action.payload)\n    },\n\n    duplicateCapitalExpendituresRow(state, action: PayloadAction<number>) {\n      h.duplicateCapitalExpendituresRow(state, action.payload)\n    },\n\n    updateAdditionalExpendituresRow(state, action: PayloadAction<{ idx: number } & AdditionalExpendituresRowKwArgs>) {\n      h.updateAdditionalExpendituresRow(state, action.payload.idx, action.payload)\n    },\n\n    insertAdditionalExpendituresRow(state, action: PayloadAction<number>) {\n      h.insertAdditionalExpendituresRow(state, action.payload)\n    },\n\n    deleteAdditionalExpendituresRow(state, action: PayloadAction<number>) {\n      h.deleteAdditionalExpendituresRow(state, action.payload)\n    },\n\n    duplicateAdditionalExpendituresRow(state, action: PayloadAction<number>) {\n      h.duplicateAdditionalExpendituresRow(state, action.payload)\n    },\n\n    insertSalaryRow(state, action: PayloadAction<number>) {\n      h.insertSalaryRow(state, action.payload)\n    },\n\n    updateSalaryRow(state, action: PayloadAction<{idx: number} & SalaryStateKw>) {\n      h.updateSalaryRow(state, action.payload.idx, action.payload)\n    },\n\n    deleteSalaryRow(state, action: PayloadAction<number>) {\n      h.deleteSalaryRow(state, action.payload)\n    },\n\n    duplicateSalaryRow(state, action: PayloadAction<number>) {\n      h.duplicateSalaryRow(state, action.payload)\n    },\n\n    updateRates(state, action: PayloadAction<RatesStateKw>) {\n      h.updateRates(state, action.payload)\n    },\n\n    fromDto(state, action: PayloadAction<EfficiencyComputationDto>) {\n      return h.fromDto(action.payload)\n    }\n  }\n});\n\nexport default economicSlice;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport economicSlice from '../../economic/slice';\n\nconst reducers = combineReducers({\n  economic: economicSlice.reducer\n});\n\nexport default reducers;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport reducers from './reducers';\n\nconst store = configureStore({\n  reducer: reducers\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport default store;\n","import { CSSProperties, useEffect, useState } from 'react'\nimport React from 'react'\nimport { StringState, localized } from '../../common/StringStateHandler'\nimport { Status } from '../../common/verifiable'\nimport { useAppDispatch } from '../../store'\nimport { CapacityParamsState } from '../model/capacity-params'\nimport { EfficiencyComputationMainHandler } from '../handler/EfficiencyComputationMainHandler'\nimport economicSlice from '../slice'\n\nexport function getStyle(status: Status): CSSProperties {\n  let color = ''\n  if (status === Status.Error) {\n    color = 'pink'\n  } else if (status === Status.Warning) {\n    color = 'lightyellow'\n  }\n  return {\n    backgroundColor: color\n  }\n}\n\nexport const StringStateInput = (props: {\n  state: StringState\n  label?: string\n  placeholder?: string\n  onBlur: (v: string) => void\n}) => {\n  return (\n    <div>\n      <input\n        key={props.state.handle}\n        name=\"mass\"\n        type=\"text\"\n        defaultValue={props.state.value}\n        style={getStyle(props.state.status)}\n        className={'warning'}\n        title={props.state.what?.map(s => localized(s))?.join('\\n') ?? ''}\n        placeholder={props.placeholder ?? ''}\n        onBlur={(e) => props.onBlur(e.target.value)}\n      />\n      {props.label && <label htmlFor=\"mass\"> - {props.label}</label>}\n    </div>\n  )\n}\n\nexport function TextArea<T>(props: {\n  obj: T | null,\n  onBlur: (v: T | null) => void,\n  disabled?: boolean,\n  titleIfDisabled?: string,\n  required?: boolean\n}) {\n  const [text, setText] = useState('null')\n  useEffect(() => {\n    let text: string\n    try {\n      text = JSON.stringify(props.obj)\n    } catch (e: any) {\n      text = 'null'\n    }\n    setText(text)\n  }, [props.obj])\n  return (\n    <textarea\n      value={text}\n      onChange={e => setText(e.target.value)}\n      onBlur={e => {\n        let obj: T | null\n        try {\n          obj = JSON.parse(e.target.value) as T\n        } catch (e: any) {\n          obj = null\n        }\n        props.onBlur(obj)\n      }}\n      style={{ width: 300, height: 120, backgroundColor: props.required && props.obj === null ? 'pink' : '' }}\n      disabled={props.disabled}\n      title={props.disabled ? props.titleIfDisabled : ''}\n    />\n  )\n}\n\nexport function CapacityParamsView(props: { capacity: CapacityParamsState, isTrackSelected: boolean }) {\n  const {\n    oldCapacityDto: oldCapacityInfo,\n    newCapacityDto: newCapacityInfo,\n    maxTrainMass,\n    oldInterval,\n    newInterval,\n    oldTrainQty,\n    newTrainQty\n  } = props.capacity\n  const dispatch = useAppDispatch()\n  const h = EfficiencyComputationMainHandler.getInstance()\n  const intervalDiff = h.intervalDiff(props.capacity)\n  const trainQtyDiff = h.trainQtyDiff(props.capacity)\n  return (\n    <div>\n      <h2>Пропускная</h2>\n      <TextArea\n        obj={oldCapacityInfo}\n        onBlur={obj => dispatch(economicSlice.actions.updateCapacityParams({ oldCapacityDto: obj }))}\n        disabled={!props.isTrackSelected}\n        titleIfDisabled='Сначала нужно выбрать участок'\n      />\n      <TextArea\n        obj={newCapacityInfo}\n        onBlur={obj => dispatch(economicSlice.actions.updateCapacityParams({ newCapacityDto: obj }))}\n        disabled={!props.isTrackSelected}\n        titleIfDisabled='Сначала нужно выбрать участок'\n      />\n      <StringStateInput\n        state={maxTrainMass}\n        label={'Масса'}\n        placeholder={\n          h.capacityHandler.defaultMass(props.capacity)?.toString() ?? ''\n        }\n        onBlur={(v) =>\n          dispatch(\n            economicSlice.actions.updateCapacityParams({ maxTrainMass: v })\n          )\n        }\n      />\n      <StringStateInput\n        state={oldInterval}\n        label={'Старый интервал'}\n        placeholder={props.capacity.oldCapacityDto?.trainInterval?.toString() ?? ''}\n        onBlur={(v) =>\n          dispatch(\n            economicSlice.actions.updateCapacityParams({ oldInterval: v })\n          )\n        }\n      />\n      <StringStateInput\n        state={newInterval}\n        label={'Новый интервал'}\n        placeholder={props.capacity.newCapacityDto?.trainInterval?.toString() ?? ''}\n        onBlur={(v) =>\n          dispatch(\n            economicSlice.actions.updateCapacityParams({ newInterval: v })\n          )\n        }\n      />\n      <StringStateInput\n        state={oldTrainQty}\n        label={'Старое количество'}\n        placeholder={props.capacity.oldCapacityDto?.trainQty?.toString() ?? ''}\n        onBlur={(v) =>\n          dispatch(\n            economicSlice.actions.updateCapacityParams({ oldTrainQty: v })\n          )\n        }\n      />\n      <StringStateInput\n        state={newTrainQty}\n        label={'Новое количество'}\n        placeholder={props.capacity.newCapacityDto?.trainQty?.toString() ?? ''}\n        onBlur={(v) =>\n          dispatch(\n            economicSlice.actions.updateCapacityParams({ newTrainQty: v })\n          )\n        }\n      />\n\n      <div>\n        <input type=\"text\" name=\"absPowerDiff\" disabled value={intervalDiff.abs} />\n        <input type=\"text\" name=\"relPowerDiff\" disabled value={intervalDiff.rel} />\n        <label htmlFor=\"relPowerDiff\">Изменение в межпоездном интервале</label>\n      </div>\n      <div>\n        <input type=\"text\" name=\"absPowerDiff\" disabled value={trainQtyDiff.abs} />\n        <input type=\"text\" name=\"relPowerDiff\" disabled value={trainQtyDiff.rel} />\n        <label htmlFor=\"relPowerDiff\">Изменение в межпоездном интервале</label>\n      </div>\n\n    </div>\n  )\n}\n","import { CapitalExpendituresTableState } from 'economic/model/capital-expenditures'\nimport React from 'react'\nimport { StringStateInput } from './CapacityParamsView'\nimport economicSlice from 'economic/slice'\nimport { useAppDispatch } from 'store'\n\nexport function CapitalExpendituresView(props: { tbl: CapitalExpendituresTableState }) {\n    const dispatch = useAppDispatch()\n    return (\n        <div>\n            <h2>Капитальные затраты</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Оборудование</th>\n                        <th>Тип</th>\n                        <th>Стоимость</th>\n                        <th>Количество</th>\n                        <th>Срок службы</th>\n                        <th>\n                            <button onClick={() => dispatch(economicSlice.actions.insertCapitalExpendituresRow(0))}\n                            >+</button>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {props.tbl.rows.map((row, idx) => {\n                        return (\n                            <tr key={row.handle}>\n                                <td>\n                                    <StringStateInput\n                                        state={row.equipment}\n                                        placeholder={''}\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, equipment: v }))}\n                                    />\n                                </td>\n                                <td>\n                                    <StringStateInput\n                                        state={row.type}\n                                        placeholder={''}\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, type: v }))}\n                                    />\n                                </td>\n                                <td>\n                                    <StringStateInput\n                                        state={row.price}\n                                        placeholder={''}\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, price: v }))}\n                                    />\n                                </td>\n                                <td>\n                                    <StringStateInput\n                                        state={row.qty}\n                                        placeholder={''}\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, qty: v }))}\n                                    />\n                                </td>\n                                <td>\n                                    <StringStateInput\n                                        state={row.serviceLife}\n                                        placeholder={''}\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, serviceLife: v }))}\n                                    />\n                                </td>\n                                <td>\n                                    <button\n                                        onClick={() => dispatch(economicSlice.actions.insertCapitalExpendituresRow(idx + 1))}\n                                    >+</button>\n                                    <button\n                                        onClick={() => dispatch(economicSlice.actions.deleteCapitalExpendituresRow(idx))}\n                                    >-</button>\n                                    <button\n                                        onClick={() => dispatch(economicSlice.actions.duplicateCapitalExpendituresRow(idx))}\n                                    >c</button>\n                                </td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n        </div>\n    )\n}","import { ParallelScheduleParamsState } from 'economic/model/parallel-schedule-params'\nimport { StringStateInput, TextArea } from './CapacityParamsView'\nimport React from 'react'\nimport { useAppDispatch } from 'store'\nimport economicSlice from 'economic/slice'\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\n\nexport function ParallelScheduleParamsView(\n    props: { sch: ParallelScheduleParamsState, isOldCapacitySelected: boolean, isNewCapacitySelected: boolean }\n) {\n    const dispatch = useAppDispatch()\n    const h = EfficiencyComputationMainHandler.getInstance()\n    const powerDiff = h.powerDiff(props.sch)\n    return (\n        <div>\n            <h2>Нагрузочная</h2>\n            <TextArea\n                obj={props.sch.oldComputation}\n                onBlur={v =>\n                    dispatch(\n                        economicSlice.actions.updateParallelScheduleParams({oldComputation: v})\n                    )\n                }\n                disabled={!props.isOldCapacitySelected}\n                titleIfDisabled={'Сначала нужно выбрать базовый расчет пропускной способности'}\n            />\n            <TextArea\n                obj={props.sch.newComputation}\n                onBlur={v =>\n                    dispatch(\n                        economicSlice.actions.updateParallelScheduleParams({newComputation: v})\n                    )\n                }\n                disabled={!props.isNewCapacitySelected}\n                titleIfDisabled={'Сначала нужно выбрать базовый расчет пропускной способности'}\n            />\n            <StringStateInput\n                state={props.sch.oldDailyConsumption}\n                label={'Старое суточное потербление'}\n                placeholder={props.sch.oldComputation?.energyConsumption?.toString() ?? ''}\n                onBlur={v => dispatch(economicSlice.actions.updateParallelScheduleParams({ oldDailyConsumption: v }))}\n            />\n            <StringStateInput\n                state={props.sch.newDailyConsumption}\n                label={'Новое суточное потербление'}\n                placeholder={props.sch.newComputation?.energyConsumption?.toString() ?? ''}\n                onBlur={v => dispatch(economicSlice.actions.updateParallelScheduleParams({ newDailyConsumption: v }))}\n            />\n            <div>\n                <input type=\"text\" name=\"absPowerDiff\" disabled value={powerDiff.abs} />\n                <input type=\"text\" name=\"relPowerDiff\" disabled value={powerDiff.rel} />\n                <label htmlFor=\"relPowerDiff\">Изменение в расходе электроэнергии</label>\n            </div>\n        </div>\n    )\n}\n","import { StringStateInput, getStyle } from './CapacityParamsView'\nimport economicSlice from 'economic/slice'\nimport { useAppDispatch } from 'store'\nimport { AdditionalExpendituresTableState } from 'economic/model/additional-expendures'\nimport { CapitalExpendituresTableState } from 'economic/model/capital-expenditures'\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\nimport React from 'react'\n\nexport function AdditionalExpendituresView(props: { tbl: AdditionalExpendituresTableState, capitalTbl: CapitalExpendituresTableState }) {\n  const dispatch = useAppDispatch()\n  const h = EfficiencyComputationMainHandler.getInstance()\n  return (\n    <div>\n      <h2>Дополнительные затраты</h2>\n      <table>\n        <thead>\n          <tr>\n            <th rowSpan={2}>Статья расходов</th>\n            <th rowSpan={2}>Оборудование</th>\n            <th rowSpan={2}>Стоимость</th>\n            <th rowSpan={2}>Количество</th>\n            <th colSpan={2}>Характер расходов</th>\n            <th rowSpan={2}>\n              <button onClick={() => dispatch(economicSlice.actions.insertAdditionalExpendituresRow(0))}\n              >+</button>\n            </th>\n          </tr>\n          <tr>\n            <th>единовременные</th>\n            <th>годовые</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.tbl.rows.map((row, idx) => {\n            return (\n              <tr key={row.handle}>\n                <td>\n                  <StringStateInput\n                    state={row.expendureItem}\n                    placeholder={''}\n                    onBlur={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx: idx, expendureItem: v }))}\n                  />\n                </td>\n                <td>\n                  <select\n                    value={row.equipment.value}\n                    onChange={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx, equipment: v.target.value }))}\n                    style={getStyle(row.equipment.status)}\n                    title={row.equipment.what?.join('\\n') ?? ''}\n                  >\n                    {h.uniqueEquipmentNames(row.equipment.value, props.capitalTbl.rows).map((name, i) => {\n                      return (\n                        <option key={name} value={name}>{name}</option>\n                      )\n                    })}\n                  </select>\n                </td>\n                <td>\n                  <StringStateInput\n                    state={row.price}\n                    placeholder={''}\n                    onBlur={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx: idx, price: v }))}\n                  />\n                </td>\n                <td>\n                  <StringStateInput\n                    state={row.qty}\n                    placeholder={''}\n                    onBlur={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx: idx, qty: v }))}\n                  />\n                </td>\n                <td>\n                  <input\n                    type='radio'\n                    name={`${row.handle}`}\n                    value='ONETIME'\n                    checked={row.period === 'ONETIME'}\n                    onClick={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx, period: 'ONETIME' }))}\n                    readOnly\n                  />\n                </td>\n                <td>\n                  <input\n                    type='radio'\n                    name={`${row.handle}`}\n                    value='ANNUAL'\n                    checked={row.period === 'ANNUAL'}\n                    onClick={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx, period: 'ANNUAL' }))}\n                    readOnly\n                  />\n                </td>\n                <td>\n                  <button\n                    onClick={() => dispatch(economicSlice.actions.insertAdditionalExpendituresRow(idx + 1))}\n                  >+</button>\n                  <button\n                    onClick={() => dispatch(economicSlice.actions.deleteAdditionalExpendituresRow(idx))}\n                  >-</button>\n                  <button\n                    onClick={() => dispatch(economicSlice.actions.duplicateAdditionalExpendituresRow(idx))}\n                  >c</button>\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n","import { SalaryStateTable } from 'economic/model/salary'\nimport { useAppDispatch } from 'store'\nimport React from 'react'\nimport { StringStateInput, getStyle } from './CapacityParamsView'\nimport economicSlice from 'economic/slice'\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\nimport { CapitalExpendituresTableState } from 'economic/model/capital-expenditures'\n\nexport function SalaryView(props: { tbl: SalaryStateTable, capitalTbl: CapitalExpendituresTableState }) {\n  const dispatch = useAppDispatch()\n  const h = EfficiencyComputationMainHandler.getInstance()\n  return (\n    <div>\n      <h2>Оплата труда</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Работник</th>\n            <th>Оборудование</th>\n            <th>Число работников</th>\n            <th>Часовая тарифная ставка</th>\n            <th>Годовая выработка</th>\n            <th>Стимулирующие выплаты</th>\n            <th>\n              <button onClick={() => dispatch(economicSlice.actions.insertSalaryRow(0))}\n              >+</button>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.tbl.rows.map((row, idx) => {\n            return (\n              <tr key={row.handle}>\n                <td>\n                  <StringStateInput\n                    state={row.employee}\n                    placeholder={''}\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, employee: v }))}\n                  />\n                </td>\n                <td>\n                  <select\n                    value={row.equipment.value}\n                    onChange={v => dispatch(economicSlice.actions.updateSalaryRow({ idx, equipment: v.target.value }))}\n                    style={getStyle(row.equipment.status)}\n                    title={row.equipment.what?.join('\\n') ?? ''}\n                  >\n                    {h.uniqueEquipmentNames(row.equipment.value, props.capitalTbl.rows).map((name, i) => {\n                      return (\n                        <option key={name} value={name}>{name}</option>\n                      )\n                    })}\n                  </select>\n                </td>\n                <td>\n                  <StringStateInput\n                    state={row.qty}\n                    placeholder={''}\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, qty: v }))}\n                  />\n                </td>\n                <td>\n                  <StringStateInput\n                    state={row.hourlyRate}\n                    placeholder={''}\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, hourlyRate: v }))}\n                  />\n                </td>\n                <td>\n                  <StringStateInput\n                    state={row.annualOutput}\n                    placeholder={''}\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, annualOutput: v }))}\n                  />\n                </td>\n                <td>\n                  <StringStateInput\n                    state={row.motivation}\n                    placeholder={''}\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, motivation: v }))}\n                  />\n                </td>\n                <td>\n                  <button\n                    onClick={() => dispatch(economicSlice.actions.insertSalaryRow(idx + 1))}\n                  >+</button>\n                  <button\n                    onClick={() => dispatch(economicSlice.actions.deleteSalaryRow(idx))}\n                  >-</button>\n                  <button\n                    onClick={() => dispatch(economicSlice.actions.duplicateSalaryRow(idx))}\n                  >c</button>\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}","import * as taxes from 'economic/model/rates'\nimport React, { memo } from 'react'\nimport { StringStateInput } from './CapacityParamsView'\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\nimport economicSlice from 'economic/slice'\nimport { useAppDispatch } from 'store'\n\nexport const RatesView = (props: { rates: taxes.RatesState }) => {\n  const h = EfficiencyComputationMainHandler.getInstance()\n  const dispatch = useAppDispatch()\n  return (\n    <div>\n      <h2>Ставки</h2>\n      <StringStateInput\n        state={props.rates.profitRateForCargoTurnover}\n        label='Доходная ставка за грузооборот, руб / 1000 т·км брутто'\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ profitRateForCargoTurnover: v }))}\n      />\n      <StringStateInput\n        state={props.rates.spendingRateForEconomicTasks}\n        label='Расходная ставка для экономических задач, руб / 1000 т·км брутто'\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ spendingRateForEconomicTasks: v }))}\n      />\n      <StringStateInput\n        state={props.rates.reducedEnergyConsumption}\n        label='Снижение энергопотребления благодаря проводимым мероприятиям, %'\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ reducedEnergyConsumption: v }))}\n      />\n      <StringStateInput\n        state={props.rates.electricityCostPerTraction}\n        label='Стоимость электроэнергии на тягу, руб / кВт·ч'\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ electricityCostPerTraction: v }))}\n      />\n      <StringStateInput\n        state={props.rates.incomeTax}\n        label='Налог на прибыль, %'\n        placeholder={h.ratesHandler.DEFAULT_INCOME_TAX.toString()}\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ incomeTax: v }))}\n      />\n      <StringStateInput\n        state={props.rates.propertyTax}\n        label='Налог на имущество, %'\n        placeholder={h.ratesHandler.DEFAULT_PROPERTY_TAX.toString()}\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ propertyTax: v }))}\n      />\n      <StringStateInput\n        state={props.rates.unifiedSocialTax}\n        label='Единый социальный налог, %'\n        placeholder={h.ratesHandler.DEFAULT_UNIFIED_SOCIAL_TAX.toString()}\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ unifiedSocialTax: v }))}\n      />\n      <div style={{ display: 'inline-block' }}>\n        <StringStateInput\n          state={props.rates.discountRate}\n          label='Ставка дисконтирования, %'\n          placeholder={h.ratesHandler.DEFAULT_DISCOUNT_RATE.toString()}\n          onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ discountRate: v }))}\n        />\n        <input name='coef' value={h.ratesHandler.discountCoefficient(props.rates)} disabled />\n        <label htmlFor=\"coef\">- Коэффициент дисконтирования</label>\n      </div>\n      <StringStateInput\n        state={props.rates.annualInflationRate}\n        label='Годовой темп инфляции, %'\n        placeholder={h.ratesHandler.DEFAULT_ANNUAL_INFLATION_RATE.toString()}\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ annualInflationRate: v }))}\n      />\n      <StringStateInput\n        state={props.rates.annualSalaryIndexation}\n        label='Годовая индексация заработной платы, %'\n        placeholder={h.ratesHandler.DEFAULT_ANNUAL_SALARY_INDEXATION.toString()}\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ annualSalaryIndexation: v }))}\n      />\n      <StringStateInput\n        state={props.rates.annualIncreaseInElectricityTariff}\n        label='Годовой рост тарифа на электроэнергию, %'\n        placeholder={h.ratesHandler.DEFAULT_ANNUAL_INCREASE_IN_ELECTRICITY_TARIFF.toString()}\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ annualIncreaseInElectricityTariff: v }))}\n      />\n      <StringStateInput\n        state={props.rates.calculationPeriod}\n        label='Расчетный период, лет'\n        placeholder={h.ratesHandler.DEFAULT_CALC_PERIOD.toString()}\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ calculationPeriod: v }))}\n      />\n    </div>\n  )\n}\n","import { useAppDispatch, useAppSelector } from '../../store'\nimport { CapacityParamsView, StringStateInput, TextArea } from './CapacityParamsView'\nimport { CapitalExpendituresView } from './CapitalExpendituresView'\nimport { ParallelScheduleParamsView } from './ParallelScheduleParamsView'\nimport React, { memo, useEffect } from 'react'\nimport { AdditionalExpendituresView } from './AdditionalExpendituresView'\nimport { SalaryView } from './SalaryView'\nimport { RatesView } from './Rates'\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\nimport { Status } from 'common/verifiable'\nimport { useDispatch } from 'react-redux'\nimport economicSlice from 'economic/slice'\n\nexport default function Root() {\n  const state = useAppSelector((state) => state.economic)\n  const dispatch = useAppDispatch()\n  const h = EfficiencyComputationMainHandler.getInstance()\n  \n  useEffect(() => {\n    dispatch(economicSlice.actions.fromDto(\n      {\n        id: 12,\n        name: 'qwrrt',\n        description: '',\n        trackId: 1,\n        trackName: 'Участок',\n        trackLength: 100,\n        capacityComputationBefore: {\n          id: 1,\n          name: 'Пропускная-1',\n          schemaId: 1,\n          trainWeightMaximum: 9000,\n          trainInterval: 16,\n          trainQty: 145\n        },\n        capacityComputationAfter: {\n          id: 1,\n          name: 'Пропускная-1',\n          schemaId: 1,\n          trainWeightMaximum: 9000,\n          trainInterval: 16,\n          trainQty: 145\n        },\n        parallelComputationBefore: {\n          id: 1,\n          name: 'Нагрузочная-1',\n          schemaId: 1,\n          energyConsumptionCalculated: 1300,\n          calculationDuration: 120,\n          energyConsumption: 15600\n        },\n        parallelComputationAfter: {\n          id: 1,\n          name: 'Нагрузочная-1',\n          schemaId: 1,\n          energyConsumptionCalculated: 1300,\n          calculationDuration: 120,\n          energyConsumption: 15600\n        },\n        inputData: {\n          trainWeightMaximum: 12,\n          trainIntervalBefore: 1,\n          trainIntervalAfter: 11,\n          trainQtyBefore: 1,\n          trainQtyAfter: 1,\n          energyConsumptionBefore: 15660,\n          energyConsumptionAfter: 16600,\n          capitalInvestments: [\n            {\n              equipment: '2wwee',\n              equipmentType: 'qwqw',\n              price: 12,\n              amount: 12,\n              serviceLife: 1\n            }\n          ],\n          additionalExpenditures: [],\n          maintenanceSalaries: [],\n          profitOptions: {\n            profitRateForCargoTurnover: 1,\n            spendingRateForEconomicTasks: 1,\n            reducedEnergyConsumption: 1,\n            electricityCostPerTraction: 1\n          },\n          taxRates: {\n            incomeTax: 20,\n            propertyTax: 2.2,\n            unifiedSocialTax: 30.4\n          },\n          inflation: {\n            discountRate: 10,\n            annualInflationRate: 5,\n            annualSalaryIndexation: 5,\n            annualIncreaseInElectricityTariff: 5\n          },\n          calculationPeriod: 5\n        }\n      }\n    ))\n  }, [])\n  \n  return (\n    <>\n      <div>\n        <StringStateInput\n          state={state.name}\n          onBlur={v => dispatch(economicSlice.actions.updateName(v))}\n          label='Наименование расчёта'\n        />\n        <StringStateInput\n          state={state.description}\n          onBlur={v => dispatch(economicSlice.actions.updateDescription(v))}\n          label='Примечание'\n        />\n      </div>\n      <div>\n        <h2>Участок</h2>\n        <p>\n          Текстовые поля предназначены для ручного ввода объектов в формате JSON. В рабочем\n          варианте эти объекты будут приходить по сети как результаты запросов к API, и согласованность\n          их структуры будет обеспечена системой типов Kotlin-а. Здесь поэтому коректность структуры\n          не проверяется. Если она все же не корректна (вследствие ошибки при ручном вводе), это\n          приведет к неопределенному поведению.\n        </p>\n        <p>\n          Если JSON не валиден (то есть в нем есть синтаксические ошибки,\n          и стандартная функция JSON.parse выбрасывает исключение), результатом его разбора\n          (неудачного) будет null.\n        </p>\n        <TextArea\n          obj={state.track}\n          onBlur={obj => dispatch(economicSlice.actions.updateTrack(obj))}\n          required\n        />\n      </div>\n      <MCapacityParamsView capacity={state.capacity} isTrackSelected={state.track !== null} />\n      <MParallelScheduleParamsView\n        sch={state.parallelSchedule}\n        isOldCapacitySelected={state.capacity.oldCapacityDto !== null}\n        isNewCapacitySelected={state.capacity.newCapacityDto !== null}\n      />\n      <MCapitalExpendituresView tbl={state.capitalExpenditures} />\n      <MAdditionalExpendituresView tbl={state.additionalExpenditures} capitalTbl={state.capitalExpenditures} />\n      <MSalaryView tbl={state.salary} capitalTbl={state.capitalExpenditures} />\n      <MRatesView rates={state.rates} />\n      <button\n        onClick={() => console.log(h.toDto(state))}\n        disabled={state.status > Status.Warning}\n        title={h.logErrors(state)}\n      >DTO в консоль</button>\n    </>\n  )\n}\n\nconst MCapacityParamsView = memo(CapacityParamsView)\nconst MParallelScheduleParamsView = memo(ParallelScheduleParamsView)\nconst MCapitalExpendituresView = memo(CapitalExpendituresView)\nconst MAdditionalExpendituresView = memo(AdditionalExpendituresView)\nconst MSalaryView = memo(SalaryView)\nconst MRatesView = memo(RatesView)","import { Provider } from 'react-redux';\nimport React from 'react';\nimport Root from './economic/component/Root';\nimport store from './store';\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <Root />\n    </Provider>\n  );\n}\n","import { render } from 'react-dom';\nimport React from 'react';\n\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nrender(<App />, rootElement);\n"],"sourceRoot":""}