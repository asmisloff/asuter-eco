{"version":3,"sources":["economic/std-messages.ts","common/verifiable.ts","common/StringStateHandler.ts","common/StringStateRecordHandler.ts","common/number-state-handler/FloatStringStateHandler.ts","common/number-state-handler/IntStringStateHandler.ts","economic/handler/CapacityParamsStateHandler.ts","economic/handler/ParallelScheduleParamsStateHandler.ts","common/StringStateTableHandler.ts","common/StringStringStateHandler.ts","economic/handler/CapitalExpendituresStateHandler.ts","economic/handler/AdditionalExpenduresStateHandler.ts","economic/handler/SalaryStateHandler.ts","economic/handler/RatesStateHandler.ts","economic/handler/EfficiencyComputationMainHandler.ts","economic/slice.ts","store/reducers/index.ts","store/index.ts","economic/component/CapacityParamsView.tsx","economic/component/CapitalExpendituresView.tsx","economic/component/ParallelScheduleParamsView.tsx","economic/component/AdditionalExpendituresView.tsx","economic/component/SalaryView.tsx","economic/component/Rates.tsx","economic/component/Root.tsx","App.tsx","index.tsx"],"names":["VALUE_IS_REQUIRED","NUMERIC_RANGE_VIOLATION","NOT_A_NUMBER","MAX_SYMBOL_QTY","DEFAULT_AND_ACTUAL_VALUES_MISMATCH","Status","StateHandler","_classCallCheck","_createClass","key","value","tgt","e","status","Error","what","find","it","push","w","Math","max","Warning","src","_src$what","_step","_iterator","_createForOfIteratorHelper","s","n","done","this","addWarning","addError","err","f","condition","msg","Ok","replace","NaN","parseNumber","isNaN","isBlank","trim","length","cnt","Number","MIN_SAFE_INTEGER","StringStateHandler","_StateHandler","_inherits","_super","_createSuper","apply","arguments","create","instance","handle","normalized","validate","newValue","_default","newInstance","numberValue","stringValue","blank","min","check","concat","isInteger","format","v","maxFractionDigits","minFractionDigits","undefined","options","maximumFractionDigits","minimumFractionDigits","signDisplay","c","re","toLocaleString","im","sign","StringStateRecordHandler","_this","_len","args","Array","_key","call","handlers","kwargs","row","_kwargs$key","h","toString","_kwargs$key2","reset","field","transferStatus","FloatStringStateHandler","_StringStateHandler","minValue","maxValue","precision","required","checkIsNotBlank","checkIsNumber","checkInRange","numberOfFractionDigits","expected","digits","toFixed","illegalNumberPrecisionMsg","defaultValue","equal","commaIdx","lastIndexOf","IntStringStateHandler","_FloatStringStateHand","MAX_SAFE_INTEGER","CapacityParamsStateHandler","_StringStateRecordHan","massHandler","intervalHandler","trainQtyHandler","oldCapacityDto","newCapacityDto","maxTrainMass","oldInterval","newInterval","oldTrainQty","newTrainQty","trainInterval","trainQty","defaultMass","_get","_getPrototypeOf","prototype","_tgt$oldCapacityDto$t","_tgt$oldCapacityDto","_tgt$newCapacityDto$t","_tgt$newCapacityDto","trainWeightMaximum","ParallelScheduleParamsStateHandler","dcHandler","oldComputation","newComputation","oldDailyConsumption","newDailyConsumption","energyConsumption","StringStateTableHandler","rowHandler","rows","idx","splice","slice","kw","copy","update","StringStringStateHandler","minLength","maxLength","RowHandler","equipment","type","price","qty","serviceLife","CapitalExpendituresStateHandler","_StringStateTableHand","_super2","RowHanler","expItemHandler","equipmentHandler","priceHandler","qtyHandler","expendureItem","period","AdditionalExpendituresStateHandler","SalaryRowStateHandler","employee","hourlyRate","annualOutput","motivation","RatesStateHandler","DEFAULT_REDUCED_ENERGY_CONSUMPTION","DEFAULT_INCOME_TAX","DEFAULT_PROPERTY_TAX","DEFAULT_SOCIAL_TAX","DEFAULT_DISCOUNT_RATE","DEFAULT_ANNUAL_INFLATION_RATE","DEFAULT_ANNUAL_SALARY_INDEXATION","DEFAULT_ANNUAL_INCREASE_IN_ELECTRICITY_TARIFF","rateHandler","energyConsumptionHandler","electricityCostHandler","reqHandler","optHandler","calcPeriodHandler","profitRateForCargoTurnover","spendingRateForEconomicTasks","reducedEnergyConsumption","electricityCostPerTraction","incomeTax","propertyTax","socialTax","discountRate","annualInflationRate","annualSalaryIndexation","annualIncreaseInElectricityTariff","calculationPeriod","EfficiencyComputationMainHandler","capacityHandler","parSchHandler","capitalExpendituresHandler","additionalExpendituresHandler","salaryHandler","ratesHandler","nameHandler","descriptionHandler","state","_state$capacity$oldCa","_state$capacity$newCa","_state$parallelSchedu","_state$parallelSchedu2","_this$tryParseNumber","_this$tryParseNumber2","_this$tryParseNumber3","_this$tryParseNumber4","_this$tryParseNumber5","_this$tryParseNumber6","_this$tryParseNumber7","_this$tryParseNumber8","_this$tryParseNumber9","_this$tryParseNumber10","_this$tryParseNumber11","_this$tryParseNumber12","_this$tryParseNumber13","_this$tryParseNumber14","_state$what","_this2","join","id","name","description","trackId","track","trackName","trackLength","capacityComputationBefore","capacity","capacityComputationAfter","parallelComputationBefore","parallelSchedule","parallelComputationAfter","inputData","tryParseNumber","trainIntervalBefore","trainIntervalAfter","trainQtyBefore","trainQtyAfter","energyConsumptionBefore","energyConsumptionAfter","capitalInvestments","capitalExpenditures","map","r","equipmentType","amount","additionalExpenditures","maintenanceSalaries","salary","paidWorker","equipmentName","productivity","additionalPayments","profitOptions","rates","taxRates","averageAnnualRateOfSocialContributions","inflation","dto","_dto$inputData$trainW","_dto$inputData$trainI","_dto$inputData$trainI2","_dto$inputData$trainQ","_dto$inputData$trainQ2","_dto$inputData$energy","_dto$inputData$energy2","createDefault","insertRow","_step2","_iterator2","_step3","_iterator3","checkEquipmentNames","_tgt$what$map","_tgt$what","messages","includes","from","Set","sort","i","_old","_new","abs","rel","cp","_objectSpread","trackParams","_tgt$track","updateParallelScheduleParams","updateCapacityParams","_kwargs$oldCapacityDt","_tgt$capacity$oldCapa","_kwargs$newCapacityDt","_tgt$capacity$newCapa","schemaId","updateRow","deleteRow","duplicateRow","current","arr","names","dependentRows","_step4","equipmentNames","uniqueEquipmentNames","_iterator4","_instance","getInstance","economicSlice","createSlice","initialState","reducers","updateName","action","payload","updateDescription","updateTrack","updateCapitalExpendituresRow","insertCapitalExpendituresRow","deleteCapitalExpendituresRow","duplicateCapitalExpendituresRow","updateAdditionalExpendituresRow","insertAdditionalExpendituresRow","deleteAdditionalExpendituresRow","duplicateAdditionalExpendituresRow","insertSalaryRow","updateSalaryRow","deleteSalaryRow","duplicateSalaryRow","updateRates","fromDto","combineReducers","economic","reducer","store","configureStore","useAppDispatch","useDispatch","useAppSelector","useSelector","getStyle","color","backgroundColor","StringStateInput","props","_props$state$what$map","_props$state$what","_props$state$what$map2","_props$placeholder","_jsxs","children","_jsx","style","className","title","substr","localized","placeholder","onBlur","target","label","htmlFor","TextArea","_useState","useState","_useState2","_slicedToArray","text","setText","useEffect","JSON","stringify","obj","onChange","parse","width","height","disabled","titleIfDisabled","CapacityParamsView","_h$capacityHandler$de","_h$capacityHandler$de2","_props$capacity$oldCa","_props$capacity$oldCa2","_props$capacity$oldCa3","_props$capacity$newCa","_props$capacity$newCa2","_props$capacity$newCa3","_props$capacity$oldCa4","_props$capacity$oldCa5","_props$capacity$oldCa6","_props$capacity$newCa4","_props$capacity$newCa5","_props$capacity$newCa6","_props$capacity","oldCapacityInfo","newCapacityInfo","dispatch","intervalDiff","trainQtyDiff","actions","isTrackSelected","CapitalExpendituresView","onClick","tbl","ParallelScheduleParamsView","_props$sch$oldComputa","_props$sch$oldComputa2","_props$sch$oldComputa3","_props$sch$newComputa","_props$sch$newComputa2","_props$sch$newComputa3","powerDiff","sch","isOldCapacitySelected","isNewCapacitySelected","AdditionalExpendituresView","rowSpan","colSpan","_row$equipment$what$j","_row$equipment$what","capitalTbl","checked","readOnly","SalaryView","RatesView","display","discountCoefficient","Root","energyConsumptionCalculated","calculationDuration","_Fragment","MCapacityParamsView","MParallelScheduleParamsView","MCapitalExpendituresView","MAdditionalExpendituresView","MSalaryView","MRatesView","console","log","toDto","logErrors","memo","App","Provider","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.97728333.chunk.js","sourcesContent":["export const VALUE_IS_REQUIRED = 'Поле обязательно для заполнения'\r\nexport const ANY_REQUIRED_VALUES_ARE_MISSED = 'Не все обязательные значения введены'\r\n\r\nexport const NUMERIC_RANGE_VIOLATION = 'Значение должно находиться в пределах'\r\nexport const ANY_NUMERIC_VALUES_ARE_OUT_OF_RANGE = 'Значения некоторых числовых полей не соответствуют ограничениям'\r\n\r\nexport const NOT_A_NUMBER = 'Значение должно быть числом'\r\nexport const ANY_NUMBERS_ARE_NOT_NUMBERS = 'Значения в некоторых числовых полях не удалось распознать как числа'\r\n\r\nexport const MAX_SYMBOL_QTY = 'Количество символов должно находиться в пределах'\r\nexport const ANY_STRINGS_HAVE_WRONG_LENGTH = 'Длины некоторых строк не соответствуют ограничениям'\r\n\r\nexport const DEFAULT_AND_ACTUAL_VALUES_MISMATCH = 'Уведомление: введенное значение не совпадает со значением по умолчанию'\r\n\r\nexport function illegalNumberPrecisionMsg(expected: number): string {\r\n    if (expected < 0) {\r\n        throw new Error('Количество знаков после зяпятой не может быть отрицательным числом')\r\n    }\r\n    if (expected === 0) {\r\n        return 'Должно быть целым числом'\r\n    }\r\n    const digits = expected === 1 ? 'знака' : 'знаков'\r\n    return `Допсукается не более ${expected.toFixed()} ${digits} после десятичной запятой`;\r\n}","/**\r\n * Здесь определены базовые типы, на которых основана предлагаемая стратегия управления\r\n * состоянием объектов со сложной валидацией.\r\n */\r\n\r\n/** Базовый интерфейс всех верифицируемых объектов. */\r\nexport interface Verifiable {\r\n  /** Идентификатор объекта. */\r\n  handle: number\r\n  /** Статус - результат последней валидации объекта. */\r\n  status: Status\r\n  /** Массив строк, разъясняющих ошибку или предупреждение. */\r\n  what?: string[]\r\n}\r\n\r\n/** Статус верифицируемого объекта. */\r\nexport enum Status {\r\n  Ok,\r\n  Warning,\r\n  Error\r\n}\r\n\r\n/**\r\n * Инкапсулирует логику управления состоянием верефицируемых объектов.\r\n * @param S тип управляемого объекта.\r\n * @param D тип Dto управляемого объекта.\r\n */\r\nexport abstract class StateHandler<S extends Verifiable> {\r\n  /** Счетчик с автоинкрементом при создании новго объекта StringState.\r\n   * Текущее значение присваивается полю handle вновь создаваемого объекта.\r\n   */\r\n  protected static cnt = Number.MIN_SAFE_INTEGER\r\n\r\n  /**\r\n   * Проверяет собственные инварианты объекта. Изменяет status и what управляемого объекта.\r\n   * @returns статус объекта\r\n   */\r\n  abstract validate(tgt: S): Status\r\n\r\n  /**\r\n   * Добавить сведения об ошибке в управляемом объекте.\r\n   * @param tgt целевой объект\r\n   * @param e строка или массив строк с текстами ошибок\r\n   */\r\n  addError(tgt: Verifiable, e: string): void {\r\n    tgt.status = Status.Error\r\n    if (tgt.what == null) {\r\n      tgt.what = []\r\n    }\r\n    if (tgt.what!.find((it) => it === e) == null) {\r\n      tgt.what.push(e)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Добавить сведения о предупреждении в управляемом объекте.\r\n   * @param tgt целевой объект\r\n   * @param w строка или массив строк с текстами ошибок\r\n   */\r\n  addWarning(tgt: Verifiable, w: string): void {\r\n    tgt.status = Math.max(Status.Warning, tgt.status)\r\n    if (tgt.what == null) {\r\n      tgt.what = []\r\n    }\r\n    if (tgt.what!.find((it) => it === w) == null) {\r\n      tgt.what.push(w)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Передать информацию о статусе верификации из одного объекта в другой.\r\n   * @param tgt состояние, в которое передается статус.\r\n   * @param src состояние, из которого передается статус.\r\n   */\r\n  transferStatus(tgt: Verifiable, src: Verifiable): void {\r\n    tgt.status = Math.max(tgt.status, src.status)\r\n    for (const s of src.what ?? []) {\r\n      const m = src.status === Status.Warning ? this.addWarning : this.addError\r\n      m(tgt, s)\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param tgt целевой объект.\r\n   * @param condition условие логическое значение или выражение, вычисляемое в логическое значение.\r\n   * @param status статус, который требуется назначить объекту, если условие ложно.\r\n   * @param msg текст ошибки или предупреждения.\r\n   */\r\n  check(\r\n    tgt: Verifiable,\r\n    condition: boolean,\r\n    status: Status.Error | Status.Warning,\r\n    msg: string\r\n  ) {\r\n    if (!condition) {\r\n      switch (status) {\r\n        case Status.Warning:\r\n          this.addWarning(tgt, msg)\r\n          break\r\n        case Status.Error:\r\n          this.addError(tgt, msg)\r\n          break\r\n        default:\r\n          break\r\n      }\r\n    }\r\n    return condition\r\n  }\r\n\r\n  /** Подготовить объект в валидации: установить status = Ok, удалить what. */\r\n  reset(tgt: Verifiable) {\r\n    tgt.status = Status.Ok\r\n    delete tgt.what\r\n  }\r\n\r\n  parseNumber(s: string): number {\r\n    s = s.replace(',', '.').replace(/\\s/g, '')\r\n    if (s == '') {\r\n      return NaN\r\n    }\r\n    return +s\r\n  }\r\n\r\n  tryParseNumber(s: string): number | null {\r\n    const n = this.parseNumber(s)\r\n    if (isNaN(n)) {\r\n      return null\r\n    }\r\n    return n\r\n  }\r\n}\r\n","import { NOT_A_NUMBER, VALUE_IS_REQUIRED, NUMERIC_RANGE_VIOLATION } from 'economic/std-messages'\r\nimport { StateHandler, Status, Verifiable } from './verifiable'\r\n\r\n/** Верефицируемое строковое состояние. */\r\nexport interface StringState extends Verifiable {\r\n  value: string\r\n}\r\n\r\nexport function isBlank(s: string): boolean {\r\n  return s.trim().length === 0\r\n}\r\n\r\n/**\r\n * Определяет интерфейс и общую логику для управления верифицируемым строковым состоянием.\r\n */\r\nexport abstract class StringStateHandler extends StateHandler<StringState> {\r\n\r\n  /**\r\n   * Создать копию управляемого объекта.\r\n   * @param tgt целевой объект.\r\n   * @param value значение. Если не задано, значение берется из целевого объекта.\r\n   */\r\n  copy(tgt: StringState, value?: string): StringState {\r\n    return this.create(value != null ? value : tgt.value)\r\n  }\r\n\r\n  /**\r\n   * Создать новый объект StringState.\r\n   * @param value хранимое строковое значение.\r\n   */\r\n  create(value?: string): StringState {\r\n    const instance = {\r\n      handle: StateHandler.cnt++,\r\n      value: this.normalized(value),\r\n      status: Status.Ok\r\n    } as StringState\r\n    this.validate(instance)\r\n    return instance\r\n  }\r\n\r\n  createOrDefault(newValue: string | undefined, _default: StringState): StringState {\r\n    if (newValue != null && newValue !== _default.value) {\r\n      const newInstance = {\r\n        handle: StateHandler.cnt++,\r\n        value: this.normalized(newValue),\r\n        status: Status.Ok\r\n      } as StringState\r\n      this.validate(newInstance)\r\n      return newInstance\r\n    }\r\n    return _default\r\n  }\r\n\r\n  abstract validate(tgt: StringState): Status\r\n\r\n  /** Проверить, приводится ли хранимое значение к действительному числу. */\r\n  checkIsNumber(tgt: StringState): number {\r\n    const numberValue = this.parseNumber(tgt.value)\r\n    if (isNaN(numberValue)) {\r\n      this.addError(tgt, NOT_A_NUMBER)\r\n    }\r\n    return numberValue\r\n  }\r\n\r\n  /** Проверить, приводится ли хранимое значение к действительному числу. */\r\n  checkIsNumberOrBlank(tgt: StringState): number {\r\n    const stringValue = tgt.value\r\n    const numberValue = this.parseNumber(stringValue)\r\n    if (isNaN(numberValue)) {\r\n      this.addError(tgt, NOT_A_NUMBER)\r\n    }\r\n    return numberValue\r\n  }\r\n\r\n  checkIsNotBlank(tgt: StringState): boolean {\r\n    const blank = isBlank(tgt.value)\r\n    if (blank) {\r\n      this.addError(tgt, VALUE_IS_REQUIRED)\r\n    }\r\n    return !blank\r\n  }\r\n\r\n  /**\r\n   * Проверить, лежит ли хранимое значение в заданном диапазоне чисел (включительно для обеих границ).\r\n   * @param tgt целевой объект.\r\n   * @param value хранимое значение или число, к которому оно приводится.\r\n   * @param min минимальное значение.\r\n   * @param max максимальное значение.\r\n   */\r\n  checkInRange(\r\n    tgt: StringState,\r\n    value: string | number,\r\n    min: number,\r\n    max: number\r\n  ) {\r\n    const numberValue = typeof value === 'number' ? value : this.parseNumber(value)\r\n    return this.check(\r\n      tgt,\r\n      numberValue >= min && numberValue <= max,\r\n      Status.Error,\r\n      `${NUMERIC_RANGE_VIOLATION} [${min}...${max}]`\r\n    )\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param tgt целевой объект\r\n   * @param value хранимое значение или число, к которому оно приводится.\r\n   */\r\n  checkIsInteger(tgt: StringState, value: number | string) {\r\n    const numberValue = typeof value === 'number' ? value : this.parseNumber(value)\r\n    return this.check(\r\n      tgt,\r\n      Number.isInteger(numberValue),\r\n      Status.Error,\r\n      NOT_A_NUMBER\r\n    )\r\n  }\r\n\r\n  abstract normalized(s?: string): string\r\n}\r\n\r\nexport function format(\r\n  v: string | number | null | undefined,\r\n  maxFractionDigits?: number,\r\n  minFractionDigits?: number,\r\n  defaultValue: string = '-',\r\n  signDisplay: 'auto' | 'always' | 'exceptZero' | 'never' | undefined = 'auto' \r\n): string {\r\n  if (v == null) {\r\n    return defaultValue\r\n  }\r\n  const options = { maximumFractionDigits: maxFractionDigits, minimumFractionDigits: minFractionDigits, signDisplay: signDisplay }\r\n  if (typeof v === 'object') { // Complex\r\n    const c = v as { re: number, im: number }\r\n    const re = c.re.toLocaleString('ru', options)\r\n    let im = c.im.toLocaleString('ru', options)\r\n    if (Math.sign(c.im) >= 0) im = `+${im}`\r\n    return `${re}${im}j`\r\n  }\r\n  return (+v).toLocaleString('ru', options)\r\n}\r\n\r\nexport function localized(\r\n  s: string,\r\n  maxFractionDigits?: number,\r\n  minFractionDigits?: number\r\n): string {\r\n  return s.replace(/[-]?\\d+[.]?\\d+/g, (substr) => format(substr, maxFractionDigits, minFractionDigits))\r\n}\r\n","import { StringStateHandler } from './StringStateHandler'\r\nimport { StateHandler, Status, Verifiable } from './verifiable'\r\n\r\n/**\r\n * Контроллер для управления записью (в форме объекта JS).\r\n * Параметры обобщения:\r\n *  - R - объект-запись, является верифицируемым состоянием (Verified).\r\n *  - K - объект kwargs, соответствующий R. Конкретно это означает, что:\r\n *      1. множество ключей K есть подмножество ключей R;\r\n *      2. для любого key преобразование K[key] -> R[key] существует и его оператор есть this.handlers[key].\r\n * \r\n * Описанные выше условия должны быть соблюдены разработчиком подкласса.\r\n */\r\nexport abstract class StringStateRecordHandler<R extends Verifiable, K extends Record<string, any>> extends StateHandler<R> {\r\n\r\n    /** Контроллеры для управления состояниями полей записи. */\r\n    readonly abstract handlers: Record<keyof K, StringStateHandler | ((arg?: any) => any)>\r\n\r\n    /** \r\n     * Создать новую запись с хранимыми значениями согласно объекту kwargs.\r\n     * Если в kwargs отсутствует значение (kwargs[key] === undefined), применяется значение по умолчанию. \r\n     */\r\n    create(kwargs: K): R {\r\n        const row = {} as any\r\n        for (const key in this.handlers) {\r\n            const h = this.handlers[key]\r\n            if (h instanceof StringStateHandler) {\r\n                row[key] = h.create(kwargs[key]?.toString())\r\n            } else {\r\n                row[key] = h(kwargs[key])\r\n            }\r\n        }\r\n        row.handle = StateHandler.cnt++\r\n        row.status = Status.Ok\r\n        this.validate(row as R)\r\n        return row as R\r\n    }\r\n\r\n    /**\r\n     * Изменить состояние записи.\r\n     * @param tgt - целевая запись.\r\n     * @param kwargs - новые значения изменяемых полей.\r\n     * @returns целевой объект с обновленными полями.\r\n     * \r\n     * Реализация по умолчанию не создает копию целевого объекта, а модифицирует и возвращает исходный экземпляр.\r\n     * Изменяемые поля при этом заменяются новыми объектами.\r\n     */\r\n    update(tgt: R, kwargs: K): R {\r\n        const row = tgt as any\r\n        for (const key in this.handlers) {\r\n            const newValue = kwargs[key]\r\n            if (newValue !== undefined) {\r\n                const h = this.handlers[key]\r\n                if (h instanceof StringStateHandler) {\r\n                    row[key] = h.create(kwargs[key]?.toString())\r\n                } else {\r\n                    row[key] = h(kwargs[key])\r\n                }\r\n            }\r\n        }\r\n        this.validate(tgt)\r\n        return tgt\r\n    }\r\n\r\n    /**\r\n     * Проверяет собственные инварианты всех Verifiable полей записи.\r\n     * Статус записи есть худший из статусов полей, what записи содержит все уникальные элементы what полей.\r\n     * @param tgt целевая запись.\r\n     * @returns статус записи.\r\n     */\r\n    validate(tgt: R): Status {\r\n        this.reset(tgt)\r\n        for (const key in tgt) {\r\n            const field = tgt[key] as any\r\n            if (typeof field === 'object' && field !== null && field.status !== undefined) {\r\n                this.transferStatus(tgt, field as Verifiable)\r\n            }\r\n        }\r\n        return tgt.status\r\n    }\r\n}\r\n","import { DEFAULT_AND_ACTUAL_VALUES_MISMATCH, illegalNumberPrecisionMsg } from 'economic/std-messages'\r\nimport {\r\n  StringState,\r\n  StringStateHandler,\r\n  format,\r\n  isBlank\r\n} from '.././StringStateHandler'\r\nimport { Status } from '.././verifiable'\r\n\r\n/**\r\n * Контроллер для управления строковым состоянием, которое хранит представление действительного числа.\r\n */\r\nexport class FloatStringStateHandler extends StringStateHandler {\r\n  readonly minValue: number\r\n  readonly maxValue: number\r\n  readonly precision: number\r\n  readonly required: boolean\r\n\r\n  constructor(minValue: number, maxValue: number, precision: number, required: boolean) {\r\n    super()\r\n    this.minValue = minValue\r\n    this.maxValue = maxValue\r\n    this.precision = precision\r\n    this.required = required\r\n  }\r\n  \r\n  validate(tgt: StringState): Status {\r\n    this.reset(tgt)\r\n    if (this.required) {\r\n      this.checkIsNotBlank(tgt)\r\n    }\r\n    if (!isBlank(tgt.value)) {\r\n      const n = this.checkIsNumber(tgt)\r\n      if (!isNaN(n)) {\r\n        this.checkInRange(tgt, n, this.minValue, this.maxValue)\r\n        this.check(\r\n          tgt,\r\n          this.numberOfFractionDigits(tgt.value) <= this.precision,\r\n          Status.Error,\r\n          illegalNumberPrecisionMsg(this.precision)\r\n        )\r\n      }\r\n    }\r\n    return tgt.status\r\n  }\r\n\r\n  /** Возвращает нормализованное строковое представление числа или пустую строку, если не удалось распознать число. */\r\n  normalized(s?: string): string {\r\n    const n = this.parseNumber(s ?? '')\r\n    if (isNaN(n)) {\r\n      return s ?? ''\r\n    }\r\n    return format(n, 20)\r\n  }\r\n\r\n  /** Предикат для проверки равенства с точностью до заданной в поле precision. */\r\n  equal(tgt: StringState, value: number | string): boolean {\r\n    if (typeof(value) === 'number') {\r\n      value = format(value, undefined, undefined, '')\r\n    }\r\n    return value === tgt.value\r\n  }\r\n\r\n  /**\r\n   * Сравнить состояние с заданным значением и добавить предупреждение, если они не равны.\r\n   * @param tgt целевое состояние.\r\n   * @param defaultValue заданное значение для сравнения.\r\n   */\r\n  compareToDefault(tgt: StringState, defaultValue: number | string): boolean {\r\n    if (tgt.value !== '' && !this.equal(tgt, defaultValue)) {\r\n      this.addWarning(tgt, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  /** Количество цифр после десятичного разделителя в строковом представлении действительного числа. */\r\n  numberOfFractionDigits(s: string): number {\r\n    const commaIdx = s.lastIndexOf(',')\r\n    if (commaIdx < 0) {\r\n      return 0\r\n    }\r\n    return s.length - commaIdx - 1\r\n  }\r\n}\r\n","import { NUMERIC_RANGE_VIOLATION } from 'economic/std-messages';\r\nimport { FloatStringStateHandler } from './FloatStringStateHandler';\r\n\r\n/**\r\n * Контроллер для управления строковым состоянием, которое хранит представление целого числа.\r\n */\r\nexport class IntStringStateHandler extends FloatStringStateHandler {\r\n  readonly minValue: number;\r\n  readonly maxValue: number;\r\n  readonly required: boolean;\r\n\r\n  constructor(minValue: number, maxValue: number, required: boolean) {\r\n    super(minValue, maxValue, 0, required);\r\n    if (\r\n      minValue < Number.MIN_SAFE_INTEGER ||\r\n      maxValue > Number.MAX_SAFE_INTEGER\r\n    ) {\r\n      throw new Error(`${NUMERIC_RANGE_VIOLATION} [${Number.MIN_SAFE_INTEGER}...${Number.MAX_SAFE_INTEGER}]`);\r\n    }\r\n    this.minValue = minValue;\r\n    this.maxValue = maxValue;\r\n    this.required = required;\r\n  }\r\n}\r\n","import { StringStateHandler } from 'common/StringStateHandler'\r\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\r\nimport { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\r\nimport { IntStringStateHandler } from 'common/number-state-handler/IntStringStateHandler'\r\nimport { Status } from 'common/verifiable'\r\nimport { DEFAULT_AND_ACTUAL_VALUES_MISMATCH } from 'economic/std-messages'\r\nimport { CapacityParamsState, CapacityParamsKwargs } from 'economic/model/capacity-params'\r\nimport { CapacityEconComputationDto } from 'economic/model/dto'\r\n\r\n/**\r\n * Контроллер для управления состоянием раздела \"Пропускная способность\".\r\n */\r\nexport class CapacityParamsStateHandler extends StringStateRecordHandler<CapacityParamsState, CapacityParamsKwargs> {\r\n    private massHandler = new FloatStringStateHandler(1, 110e3, 3, false)\r\n    private intervalHandler = new IntStringStateHandler(1, 1440, false)\r\n    private trainQtyHandler = new IntStringStateHandler(1, 1000, false)\r\n\r\n    readonly handlers: Record<keyof CapacityParamsKwargs, StringStateHandler | ((arg?: any) => any)> = {\r\n        oldCapacityDto: (v: CapacityEconComputationDto) => v === undefined ? null : v,\r\n        newCapacityDto: (v: CapacityEconComputationDto) => v === undefined ? null : v,\r\n        maxTrainMass: this.massHandler,\r\n        oldInterval: this.intervalHandler,\r\n        newInterval: this.intervalHandler,\r\n        oldTrainQty: this.trainQtyHandler,\r\n        newTrainQty: this.trainQtyHandler\r\n    }\r\n\r\n    validate(tgt: CapacityParamsState): Status {\r\n        this.massHandler.validate(tgt.maxTrainMass)\r\n        this.intervalHandler.validate(tgt.oldInterval)\r\n        this.trainQtyHandler.validate(tgt.oldTrainQty)\r\n        this.intervalHandler.validate(tgt.newInterval)\r\n        this.trainQtyHandler.validate(tgt.newTrainQty)\r\n\r\n        if (tgt.oldCapacityDto === null) {\r\n            this.intervalHandler.checkIsNotBlank(tgt.oldInterval)\r\n            this.trainQtyHandler.checkIsNotBlank(tgt.oldTrainQty)\r\n        } else {\r\n            if (tgt.oldInterval.value !== '' && !this.intervalHandler.equal(tgt.oldInterval, tgt.oldCapacityDto.trainInterval)) {\r\n                this.intervalHandler.addWarning(tgt.oldInterval, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            }\r\n            if (tgt.oldTrainQty.value !== '' && !this.trainQtyHandler.equal(tgt.oldTrainQty, tgt.oldCapacityDto.trainQty)) {\r\n                this.trainQtyHandler.addWarning(tgt.oldTrainQty, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            }\r\n        }\r\n\r\n        if (tgt.newCapacityDto === null) {\r\n            this.intervalHandler.checkIsNotBlank(tgt.newInterval)\r\n            this.trainQtyHandler.checkIsNotBlank(tgt.newTrainQty)\r\n        } else {\r\n            if (tgt.newInterval.value !== '' && !this.intervalHandler.equal(tgt.newInterval, tgt.newCapacityDto.trainInterval)) {\r\n                this.intervalHandler.addWarning(tgt.newInterval, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            }\r\n            if (tgt.newTrainQty.value !== '' && !this.trainQtyHandler.equal(tgt.newTrainQty, tgt.newCapacityDto.trainQty)) {\r\n                this.trainQtyHandler.addWarning(tgt.newTrainQty, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            }\r\n        }\r\n\r\n        if (tgt.oldCapacityDto === null && tgt.newCapacityDto === null) {\r\n            this.massHandler.checkIsNotBlank(tgt.maxTrainMass)\r\n        } else {\r\n            this.massHandler.validate(tgt.maxTrainMass)\r\n            if (tgt.maxTrainMass.value !== '' && !this.massHandler.equal(tgt.maxTrainMass, this.defaultMass(tgt)!)) {\r\n                this.massHandler.addWarning(tgt.maxTrainMass, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            }\r\n        }\r\n\r\n        return super.validate(tgt)\r\n    }\r\n\r\n    /** Возвращает массу поезда по умолчанию (согласно выбранным расчетам пропускной способности). */\r\n    defaultMass(tgt: CapacityParamsState): string {\r\n        if (tgt.oldCapacityDto == null && tgt.newCapacityDto == null) {\r\n            return ''\r\n        }\r\n        return this.massHandler.normalized(Math.max(tgt.oldCapacityDto?.trainWeightMaximum ?? 0, tgt.newCapacityDto?.trainWeightMaximum ?? 0).toString())\r\n    }\r\n}\r\n","import { StringStateHandler } from 'common/StringStateHandler'\r\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\r\nimport { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\r\nimport { Status } from 'common/verifiable'\r\nimport { DEFAULT_AND_ACTUAL_VALUES_MISMATCH } from 'economic/std-messages'\r\nimport { ParallelEconComputationDto } from 'economic/model/dto'\r\nimport { ParallelScheduleParamsKwargs, ParallelScheduleParamsState } from 'economic/model/parallel-schedule-params'\r\n\r\n/**\r\n * Контроллер для управления состоянием раздела \"Нагрузочная способность\".\r\n */\r\nexport class ParallelScheduleParamsStateHandler extends StringStateRecordHandler<ParallelScheduleParamsState, ParallelScheduleParamsKwargs> {\r\n    \r\n    readonly dcHandler = new FloatStringStateHandler(0, 1e6, 3, false)\r\n    \r\n    handlers: Record<keyof ParallelScheduleParamsKwargs, StringStateHandler | ((arg?: any) => any)> = {\r\n        oldComputation: (c?: ParallelEconComputationDto) => c === undefined ? null : c,\r\n        newComputation: (c?: ParallelEconComputationDto) => c === undefined ? null : c,\r\n        oldDailyConsumption: this.dcHandler,\r\n        newDailyConsumption: this.dcHandler\r\n    }\r\n\r\n    validate(tgt: ParallelScheduleParamsState): Status {\r\n        this.reset(tgt)\r\n\r\n        this.dcHandler.validate(tgt.oldDailyConsumption)\r\n        if (tgt.oldComputation === null) {\r\n            this.dcHandler.checkIsNotBlank(tgt.oldDailyConsumption)\r\n        } else {\r\n            if (tgt.oldDailyConsumption.value !== '' && !this.dcHandler.equal(tgt.oldDailyConsumption, tgt.oldComputation.energyConsumption)) {\r\n                this.dcHandler.addWarning(tgt.oldDailyConsumption, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            }\r\n        }\r\n\r\n        this.dcHandler.validate(tgt.newDailyConsumption)\r\n        if (tgt.newComputation === null) {\r\n            this.dcHandler.checkIsNotBlank(tgt.newDailyConsumption)\r\n        } else {\r\n            if (tgt.newDailyConsumption.value !== '' && !this.dcHandler.equal(tgt.newDailyConsumption, tgt.newComputation.energyConsumption)) {\r\n                this.dcHandler.addWarning(tgt.newDailyConsumption, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            }\r\n        }\r\n\r\n        this.transferStatus(tgt, tgt.oldDailyConsumption)\r\n        this.transferStatus(tgt, tgt.newDailyConsumption)\r\n        return tgt.status\r\n    }\r\n}","import { StringState } from './StringStateHandler'\r\nimport { StringStateRecordHandler } from './StringStateRecordHandler'\r\nimport { StateHandler, Status, Verifiable } from './verifiable'\r\n\r\n/**\r\n * Верифицируцируемое состояние таблицы. В базовом сценарии предполагается, что строки таблицы - верифицируемые записи (см. StringStateRecordHandler).\r\n */\r\nexport interface StringStateTable<R extends Verifiable> extends Verifiable {\r\n    /** Строки таблицы. */\r\n    rows: R[]\r\n}\r\n\r\n/**\r\n * Контроллер для управления верифицируемой таблицей.\r\n *  - R - тип строки таблицы.\r\n *  - K - kwargs для строки таблицы (подробнее см. StringStateRecordHandler).\r\n */\r\nexport class StringStateTableHandler<R extends Verifiable, K extends Record<string, any>> extends StateHandler<StringStateTable<R>> {\r\n\r\n    /** Контроллер для управления состоянием строк таблицы. */\r\n    private rowHandler: StringStateRecordHandler<R, K>\r\n\r\n    constructor(rowHandler: StringStateRecordHandler<R, K>) {\r\n        super()\r\n        this.rowHandler = rowHandler\r\n    }\r\n\r\n    validate(tgt: StringStateTable<R>): Status {\r\n        this.reset(tgt)\r\n        for (const row of tgt.rows) {\r\n            this.transferStatus(tgt, row)\r\n        }\r\n        return tgt.status\r\n    }\r\n\r\n    /** Создать пустую таблицу. */\r\n    createDefault(): StringStateTable<R> {\r\n        const instance = {\r\n            handle: StateHandler.cnt++,\r\n            status: Status.Ok,\r\n            rows: []\r\n        }\r\n        this.validate(instance)\r\n        return instance\r\n    }\r\n\r\n    /**\r\n     * Вставить новую строку в таблицу. Метод копирует массив rows.\r\n     * @param tgt целевая таблица.\r\n     * @param idx индекс для вставки строки.\r\n     * @param kwargs значения полей новой строки.\r\n     * @returns вновь созданная строка.\r\n     */\r\n    insertRow(tgt: StringStateTable<R>, idx: number | null, kwargs: K): R {\r\n        const row = this.rowHandler.create(kwargs)\r\n        if (idx === null) {\r\n            idx = tgt.rows.length\r\n        }\r\n        if (idx < 0) {\r\n            idx += tgt.rows.length\r\n        }\r\n        tgt.rows.splice(idx, 0, row)\r\n        tgt.rows = tgt.rows.slice()\r\n        this.validate(tgt)\r\n        return row\r\n    }\r\n\r\n    /**\r\n     * Вставить в таблицу копию строки. Метод копирует массив rows.\r\n     * @param tgt целевая таблица.\r\n     * @param idx индекс копируемой строки. Строка-копия вставляется в массив строк сразу после оригинала.\r\n     * @returns вновь созданная строка.\r\n     */\r\n    duplicateRow(tgt: StringStateTable<R>, idx: number): R {\r\n        const row = tgt.rows[idx]\r\n        const kw = {} as any\r\n        for (const key in this.rowHandler.handlers) {\r\n            const value = (row as any)[key]\r\n            if (value.handle !== undefined) {\r\n                kw[key] = (value as StringState).value\r\n            } else {\r\n                kw[key] = value\r\n            }\r\n        }\r\n        const copy = this.rowHandler.create(kw)\r\n        tgt.rows.splice(idx, 0, copy)\r\n        tgt.rows = tgt.rows.slice()\r\n        this.validate(tgt)\r\n        return copy\r\n    }\r\n\r\n    /**\r\n     * Модифицировать строку таблицы. Метод не обновляет ссылку на массив rows.\r\n     * Обновится ли сама строка определяется реализацией контроллера строк (this.rowHandler).\r\n     * @param tgt целевая таблица.\r\n     * @param idx индекс изменяемой строки.\r\n     * @param kwargs новые значения полей.\r\n     */\r\n    updateRow(tgt: StringStateTable<R>, idx: number, kwargs: K) {\r\n        const row = tgt.rows[idx]\r\n        tgt.rows[idx] = this.rowHandler.update(row, kwargs)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    /**\r\n     * Удалить строку из таблицы. Метод копирует массив rows.\r\n     * @param tgt целевая таблица.\r\n     * @param idx индекс удаляемой строки.\r\n     */\r\n    deleteRow(tgt: StringStateTable<R>, idx: number) {\r\n        tgt.rows.splice(idx, 1)\r\n        tgt.rows = tgt.rows.slice()\r\n        this.validate(tgt)\r\n    }\r\n}","import { StringState, StringStateHandler } from 'common/StringStateHandler'\r\nimport { Status } from 'common/verifiable'\r\nimport { MAX_SYMBOL_QTY } from 'economic/std-messages'\r\n\r\n/**\r\n * Контроллер для управления строковым состоянием как строкой.\r\n */\r\nexport class StringStringStateHandler extends StringStateHandler {\r\n\r\n    private maxLength: number\r\n    private minLength: number\r\n\r\n    constructor(minLength: number, maxLength: number = 0) {\r\n        super()\r\n        this.maxLength = maxLength\r\n        this.minLength = minLength\r\n    }\r\n\r\n    validate(tgt: StringState): Status {\r\n        this.reset(tgt)\r\n        if (tgt.value.length > this.maxLength || tgt.value.length < this.minLength) {\r\n            this.addError(tgt, `${MAX_SYMBOL_QTY} [${this.minLength}...${this.maxLength}]`)\r\n        }\r\n        return tgt.status\r\n    }\r\n\r\n    normalized(s?: string | undefined): string {\r\n        if (s == null) {\r\n            return ''\r\n        } else {\r\n            return s.trim()\r\n        }\r\n    }\r\n}","import { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\r\nimport { IntStringStateHandler } from 'common/number-state-handler/IntStringStateHandler'\r\nimport { StringStateHandler } from 'common/StringStateHandler'\r\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\r\nimport { StringStateTableHandler } from 'common/StringStateTableHandler'\r\nimport { StringStringStateHandler } from 'common/StringStringStateHandler'\r\nimport {CapitalExpendituresRowKwargs, CapitalExpendituresRowState} from 'economic/model/capital-expenditures'\r\n\r\nclass RowHandler extends StringStateRecordHandler<CapitalExpendituresRowState, CapitalExpendituresRowKwargs> {\r\n\r\n    readonly handlers: Record<keyof CapitalExpendituresRowKwargs, StringStateHandler | ((arg?: any) => any)> = {\r\n        equipment: new StringStringStateHandler(1, 50),\r\n        type: new StringStringStateHandler(0, 50),\r\n        price: new FloatStringStateHandler(1, 100e6, 2, true),\r\n        qty: new FloatStringStateHandler(1, 1e3, 2, true),\r\n        serviceLife: new IntStringStateHandler(1, 100, true)\r\n    }\r\n}\r\n\r\n/**\r\n * Контроллер для управления состоянием раздела \"Капитальные затраты\".\r\n */\r\nexport class CapitalExpendituresStateHandler extends StringStateTableHandler<CapitalExpendituresRowState, CapitalExpendituresRowKwargs> {\r\n    constructor() {\r\n        super(new RowHandler())\r\n    }\r\n}","import { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\r\nimport { StringStateHandler } from 'common/StringStateHandler'\r\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\r\nimport { StringStateTableHandler } from 'common/StringStateTableHandler'\r\nimport { StringStringStateHandler } from 'common/StringStringStateHandler'\r\nimport { AdditionalExpendituresRowKwargs, AdditionalExpendituresRowState } from 'economic/model/additional-expendures'\r\nimport { ExpenditureType } from 'economic/model/dto'\r\n\r\nclass RowHanler extends StringStateRecordHandler<AdditionalExpendituresRowState, AdditionalExpendituresRowKwargs> {\r\n\r\n    private expItemHandler = new StringStringStateHandler(1, 50)\r\n    private equipmentHandler = new StringStringStateHandler(0, 50)\r\n    private priceHandler = new FloatStringStateHandler(1, 10e6, 2, true)\r\n    private qtyHandler = new FloatStringStateHandler(1, 1e3, 2, true)\r\n\r\n    handlers: Record<keyof AdditionalExpendituresRowKwargs, StringStateHandler | ((arg?: any) => any)> = {\r\n        expendureItem: this.expItemHandler,\r\n        equipment: this.equipmentHandler,\r\n        price: this.priceHandler,\r\n        qty: this.qtyHandler,\r\n        period: (s?: ExpenditureType) => s ?? 'ANNUAL'\r\n    }\r\n}\r\n\r\n/**\r\n * Контроллер для управления состоянием раздела \"Дополнительные затраты\".\r\n */\r\nexport class AdditionalExpendituresStateHandler extends StringStateTableHandler<AdditionalExpendituresRowState, AdditionalExpendituresRowKwargs> {\r\n    constructor() {\r\n        super(new RowHanler())\r\n    }\r\n}","import { StringStateHandler } from 'common/StringStateHandler'\r\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\r\nimport { StringStringStateHandler } from 'common/StringStringStateHandler'\r\nimport { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\r\nimport { IntStringStateHandler } from 'common/number-state-handler/IntStringStateHandler'\r\nimport { SalaryStateRow, SalaryStateKwargs } from 'economic/model/salary'\r\n\r\n/**\r\n * Контроллер для управления состоянием раздела \"Оплата труда\".\r\n */\r\nexport class SalaryRowStateHandler extends StringStateRecordHandler<SalaryStateRow, SalaryStateKwargs> {\r\n\r\n    handlers: Record<keyof SalaryStateKwargs, StringStateHandler | ((arg?: any) => any)> = {\r\n        employee: new StringStringStateHandler(1, 50),\r\n        equipment: new StringStringStateHandler(0, 50),\r\n        qty: new IntStringStateHandler(1, 100, true),\r\n        hourlyRate: new FloatStringStateHandler(1, 1e4, 2, true),\r\n        annualOutput: new IntStringStateHandler(1, 1e4, true),\r\n        motivation: new FloatStringStateHandler(0, 100, 2, true),\r\n    }\r\n}\r\n","import { StringStateHandler, format } from 'common/StringStateHandler'\r\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\r\nimport { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\r\nimport { IntStringStateHandler } from 'common/number-state-handler/IntStringStateHandler'\r\nimport { Status } from 'common/verifiable'\r\nimport { RatesState, RatesStateKwargs } from 'economic/model/rates'\r\n\r\n\r\n/**\r\n * Контроллер для управления состоянием раздела \"Экономические ставки\".\r\n */\r\nexport class RatesStateHandler extends StringStateRecordHandler<RatesState, RatesStateKwargs> {\r\n\r\n    readonly DEFAULT_REDUCED_ENERGY_CONSUMPTION = 0\r\n    readonly DEFAULT_INCOME_TAX = 20.0\r\n    readonly DEFAULT_PROPERTY_TAX = 2.2\r\n    readonly DEFAULT_SOCIAL_TAX = 26\r\n    readonly DEFAULT_DISCOUNT_RATE = 10.0\r\n    readonly DEFAULT_ANNUAL_INFLATION_RATE = 5.0\r\n    readonly DEFAULT_ANNUAL_SALARY_INDEXATION = 5.0\r\n    readonly DEFAULT_ANNUAL_INCREASE_IN_ELECTRICITY_TARIFF = 5.0\r\n\r\n    private rateHandler = new FloatStringStateHandler(0, 1e4, 2, true)\r\n    private energyConsumptionHandler = new FloatStringStateHandler(-100, 50, 2, true)\r\n    private electricityCostHandler = new FloatStringStateHandler(0, 1e3, 2, true)\r\n    private reqHandler = new FloatStringStateHandler(0, 50, 2, true)\r\n    private optHandler = new FloatStringStateHandler(0, 50, 2, false)\r\n    private calcPeriodHandler = new IntStringStateHandler(1, 50, true)\r\n\r\n    handlers: Record<keyof RatesStateKwargs, StringStateHandler | ((arg?: any) => any)> = {\r\n        profitRateForCargoTurnover: this.rateHandler,\r\n        spendingRateForEconomicTasks: this.rateHandler,\r\n        reducedEnergyConsumption: this.energyConsumptionHandler,\r\n        electricityCostPerTraction: this.electricityCostHandler,\r\n        incomeTax: this.optHandler,\r\n        propertyTax: this.optHandler,\r\n        socialTax: this.optHandler,\r\n        discountRate: this.reqHandler,\r\n        annualInflationRate: this.reqHandler,\r\n        annualSalaryIndexation: this.reqHandler,\r\n        annualIncreaseInElectricityTariff: this.reqHandler,\r\n        calculationPeriod: this.calcPeriodHandler\r\n    }\r\n\r\n    /** Рассчитать коэффициент дисконтирования (в долях единицы). */\r\n    discountCoefficient(tgt: RatesState): string {\r\n        if (tgt.discountRate.status < Status.Error) {\r\n            const dr = tgt.discountRate.value !== ''\r\n             ? this.reqHandler.parseNumber(tgt.discountRate.value)\r\n             : this.DEFAULT_DISCOUNT_RATE\r\n            return format(1.0 / (1.0 + 0.01 * dr), 3)\r\n        }\r\n        return ''\r\n    }\r\n}","import { CapacityParamsStateHandler } from 'economic/handler/CapacityParamsStateHandler'\r\nimport { StateHandler, Status } from '../../common/verifiable'\r\nimport { CapacityParamsKwargs, CapacityParamsState } from '../model/capacity-params'\r\nimport { ParallelScheduleParamsKwargs, ParallelScheduleParamsState } from '../model/parallel-schedule-params'\r\nimport { ParallelScheduleParamsStateHandler } from 'economic/handler/ParallelScheduleParamsStateHandler'\r\nimport { CapitalExpendituresRowKwargs, CapitalExpendituresRowState } from '../model/capital-expenditures'\r\nimport { CapitalExpendituresStateHandler } from 'economic/handler/CapitalExpendituresStateHandler'\r\nimport { EfficiencyComputationState, TrackParams } from 'economic/model/efficiency-computation'\r\nimport { AdditionalExpendituresStateHandler } from './AdditionalExpenduresStateHandler'\r\nimport { AdditionalExpendituresRowKwargs } from 'economic/model/additional-expendures'\r\nimport { StringStateTableHandler } from 'common/StringStateTableHandler'\r\nimport { SalaryRowStateHandler } from './SalaryStateHandler'\r\nimport { SalaryStateKwargs } from 'economic/model/salary'\r\nimport { StringState, StringStateHandler, format } from 'common/StringStateHandler'\r\nimport { RatesStateHandler } from './RatesStateHandler'\r\nimport { RatesStateKwargs } from 'economic/model/rates'\r\nimport { EfficiencyComputationDto, EfficiencyInputDto } from 'economic/model/dto'\r\nimport { StringStringStateHandler } from 'common/StringStringStateHandler'\r\nimport { ANY_REQUIRED_VALUES_ARE_MISSED, MAX_SYMBOL_QTY, VALUE_IS_REQUIRED, NUMERIC_RANGE_VIOLATION, ANY_NUMERIC_VALUES_ARE_OUT_OF_RANGE, ANY_STRINGS_HAVE_WRONG_LENGTH, NOT_A_NUMBER, ANY_NUMBERS_ARE_NOT_NUMBERS } from 'economic/std-messages'\r\n\r\n/**\r\n * Главный контроллер раздела \"Эффективность мероприятий (экономика)\".\r\n */\r\nexport class EfficiencyComputationMainHandler extends StateHandler<EfficiencyComputationState> {\r\n\r\n    private static _instance?: EfficiencyComputationMainHandler = undefined\r\n    readonly capacityHandler = new CapacityParamsStateHandler()\r\n    readonly parSchHandler = new ParallelScheduleParamsStateHandler()\r\n    private capitalExpendituresHandler = new CapitalExpendituresStateHandler()\r\n    private additionalExpendituresHandler = new AdditionalExpendituresStateHandler()\r\n    private salaryHandler = new StringStateTableHandler(new SalaryRowStateHandler())\r\n    readonly ratesHandler = new RatesStateHandler()\r\n    private nameHandler = new StringStringStateHandler(1, 50)\r\n    private descriptionHandler = new StringStringStateHandler(0, 50)\r\n\r\n    private constructor() {\r\n        super()\r\n    }\r\n\r\n    static getInstance(): EfficiencyComputationMainHandler {\r\n        if (!EfficiencyComputationMainHandler._instance) {\r\n            EfficiencyComputationMainHandler._instance = new EfficiencyComputationMainHandler()\r\n        }\r\n        return EfficiencyComputationMainHandler._instance\r\n    }\r\n\r\n    toDto(state: EfficiencyComputationState): EfficiencyComputationDto {\r\n        if (state.status > Status.Warning) {\r\n            throw new Error(state.what?.join('\\n'))\r\n        }\r\n        return {\r\n            id: state.id,\r\n            name: state.name.value,\r\n            description: state.description.value,\r\n            trackId: state.track!.id,\r\n            trackName: state.track!.name,\r\n            trackLength: state.track!.length,\r\n            capacityComputationBefore: state.capacity.oldCapacityDto ?? undefined,\r\n            capacityComputationAfter: state.capacity.newCapacityDto ?? undefined,\r\n            parallelComputationBefore: state.parallelSchedule.oldComputation ?? undefined,\r\n            parallelComputationAfter: state.parallelSchedule.newComputation ?? undefined,\r\n            inputData: {\r\n                trainWeightMaximum: this.tryParseNumber(state.capacity.maxTrainMass.value) ?? undefined,\r\n                trainIntervalBefore: this.tryParseNumber(state.capacity.oldInterval.value) ?? undefined,\r\n                trainIntervalAfter: this.tryParseNumber(state.capacity.newInterval.value) ?? undefined,\r\n                trainQtyBefore: this.tryParseNumber(state.capacity.oldTrainQty.value) ?? undefined,\r\n                trainQtyAfter: this.tryParseNumber(state.capacity.newTrainQty.value) ?? undefined,\r\n                energyConsumptionBefore: this.tryParseNumber(\r\n                    state.parallelSchedule.oldDailyConsumption.value\r\n                ) ?? undefined,\r\n                energyConsumptionAfter: this.tryParseNumber(\r\n                    state.parallelSchedule.newDailyConsumption.value\r\n                ) ?? undefined,\r\n                capitalInvestments: state.capitalExpenditures.rows.map(r => {\r\n                    return {\r\n                        equipment: r.equipment.value,\r\n                        equipmentType: r.type.value,\r\n                        price: this.parseNumber(r.price.value),\r\n                        amount: this.parseNumber(r.qty.value),\r\n                        serviceLife: this.parseNumber(r.serviceLife.value)\r\n                    }\r\n                }),\r\n                additionalExpenditures: state.additionalExpenditures.rows.map(r => {\r\n                    return {\r\n                        name: r.expendureItem.value,\r\n                        equipment: r.equipment.value,\r\n                        amount: this.parseNumber(r.qty.value),\r\n                        price: this.parseNumber(r.price.value),\r\n                        type: r.period\r\n                    }\r\n                }),\r\n                maintenanceSalaries: state.salary.rows.map(r => {\r\n                    const hourlyRate = this.parseNumber(r.hourlyRate.value)\r\n                    return {\r\n                        paidWorker: r.employee.value,\r\n                        equipmentName: r.equipment.value,\r\n                        amount: this.parseNumber(r.qty.value),\r\n                        hourlyRate: hourlyRate,\r\n                        productivity: this.parseNumber(r.annualOutput.value),\r\n                        additionalPayments: this.parseNumber(r.motivation.value)\r\n                    }\r\n                }),\r\n                profitOptions: {\r\n                    profitRateForCargoTurnover: this.parseNumber(state.rates.profitRateForCargoTurnover.value),\r\n                    spendingRateForEconomicTasks: this.parseNumber(state.rates.spendingRateForEconomicTasks.value),\r\n                    reducedEnergyConsumption: this.parseNumber(state.rates.reducedEnergyConsumption.value),\r\n                    electricityCostPerTraction: this.parseNumber(state.rates.electricityCostPerTraction.value)\r\n                },\r\n                taxRates: {\r\n                    incomeTax: this.tryParseNumber(state.rates.incomeTax.value)\r\n                        ?? this.ratesHandler.DEFAULT_INCOME_TAX,\r\n                    propertyTax: this.tryParseNumber(state.rates.propertyTax.value)\r\n                        ?? this.ratesHandler.DEFAULT_PROPERTY_TAX,\r\n                    averageAnnualRateOfSocialContributions: this.tryParseNumber(state.rates.socialTax.value)\r\n                        ?? this.ratesHandler.DEFAULT_SOCIAL_TAX\r\n                },\r\n                inflation: {\r\n                    discountRate: this.tryParseNumber(state.rates.discountRate.value)\r\n                        ?? this.ratesHandler.DEFAULT_DISCOUNT_RATE,\r\n                    annualInflationRate: this.tryParseNumber(state.rates.annualInflationRate.value)\r\n                        ?? this.ratesHandler.DEFAULT_ANNUAL_INFLATION_RATE,\r\n                    annualSalaryIndexation: this.tryParseNumber(state.rates.annualSalaryIndexation.value)\r\n                        ?? this.ratesHandler.DEFAULT_ANNUAL_SALARY_INDEXATION,\r\n                    annualIncreaseInElectricityTariff: this.tryParseNumber(state.rates.annualIncreaseInElectricityTariff.value)\r\n                        ?? this.ratesHandler.DEFAULT_ANNUAL_INCREASE_IN_ELECTRICITY_TARIFF\r\n                },\r\n                calculationPeriod: this.parseNumber(state.rates.calculationPeriod.value)\r\n            }\r\n        }\r\n    }\r\n\r\n    fromDto(dto: EfficiencyComputationDto): EfficiencyComputationState {\r\n        const capitalExpenditures = this.capitalExpendituresHandler.createDefault()\r\n        for (const row of dto.inputData.capitalInvestments) {\r\n            this.capitalExpendituresHandler.insertRow(\r\n                capitalExpenditures,\r\n                null,\r\n                {\r\n                    equipment: row.equipment,\r\n                    price: row.price,\r\n                    qty: row.amount,\r\n                    serviceLife: row.serviceLife,\r\n                    type: row.equipmentType\r\n                }\r\n            )\r\n        }\r\n\r\n        const additionalExpenditures = this.additionalExpendituresHandler.createDefault()\r\n        for (const row of dto.inputData.additionalExpenditures) {\r\n            this.additionalExpendituresHandler.insertRow(\r\n                additionalExpenditures,\r\n                null,\r\n                {\r\n                    equipment: row.equipment,\r\n                    expendureItem: row.name,\r\n                    period: row.type,\r\n                    price: row.price,\r\n                    qty: row.amount\r\n                }\r\n            )\r\n        }\r\n\r\n        const salary = this.salaryHandler.createDefault()\r\n        for (const row of dto.inputData.maintenanceSalaries) {\r\n            this.salaryHandler.insertRow(\r\n                salary,\r\n                null,\r\n                {\r\n                    employee: row.paidWorker,\r\n                    equipment: row.equipmentName,\r\n                    qty: row.amount,\r\n                    hourlyRate: row.hourlyRate,\r\n                    annualOutput: row.productivity,\r\n                    motivation: row.additionalPayments\r\n                }\r\n            )\r\n        }\r\n\r\n        const state: EfficiencyComputationState = {\r\n            handle: StateHandler.cnt++,\r\n            status: Status.Ok,\r\n            id: dto.id,\r\n            name: this.nameHandler.create(dto.name),\r\n            description: this.descriptionHandler.create(dto.description),\r\n            track: {\r\n                id: dto.trackId,\r\n                name: dto.trackName,\r\n                length: dto.trackLength\r\n            },\r\n            capacity: this.capacityHandler.create({\r\n                oldCapacityDto: dto.capacityComputationBefore,\r\n                newCapacityDto: dto.capacityComputationAfter,\r\n                maxTrainMass: dto.inputData.trainWeightMaximum?.toString(),\r\n                oldInterval: dto.inputData.trainIntervalBefore?.toString(),\r\n                newInterval: dto.inputData.trainIntervalAfter?.toString(),\r\n                oldTrainQty: dto.inputData.trainQtyBefore?.toString(),\r\n                newTrainQty: dto.inputData.trainQtyAfter?.toString()\r\n            }),\r\n            parallelSchedule: this.parSchHandler.create({\r\n                oldComputation: dto.parallelComputationBefore,\r\n                newComputation: dto.parallelComputationAfter,\r\n                oldDailyConsumption: dto.inputData.energyConsumptionBefore?.toString(),\r\n                newDailyConsumption: dto.inputData.energyConsumptionAfter?.toString()\r\n            }),\r\n            capitalExpenditures: capitalExpenditures,\r\n            additionalExpenditures: additionalExpenditures,\r\n            salary: salary,\r\n            rates: this.ratesHandler.create({\r\n                profitRateForCargoTurnover: dto.inputData.profitOptions.profitRateForCargoTurnover,\r\n                spendingRateForEconomicTasks: dto.inputData.profitOptions.spendingRateForEconomicTasks,\r\n                reducedEnergyConsumption: dto.inputData.profitOptions.reducedEnergyConsumption,\r\n                electricityCostPerTraction: dto.inputData.profitOptions.electricityCostPerTraction,\r\n                incomeTax: dto.inputData.taxRates.incomeTax,\r\n                propertyTax: dto.inputData.taxRates.propertyTax,\r\n                socialTax: dto.inputData.taxRates.averageAnnualRateOfSocialContributions,\r\n                discountRate: dto.inputData.inflation.discountRate,\r\n                annualInflationRate: dto.inputData.inflation.annualInflationRate,\r\n                annualSalaryIndexation: dto.inputData.inflation.annualSalaryIndexation,\r\n                annualIncreaseInElectricityTariff: dto.inputData.inflation.annualIncreaseInElectricityTariff,\r\n                calculationPeriod: dto.inputData.calculationPeriod\r\n            })\r\n        }\r\n        this.validate(state)\r\n        return state\r\n    }\r\n\r\n    validate(tgt: EfficiencyComputationState): Status {\r\n        this.reset(tgt)\r\n        this.check(tgt, tgt.track !== null, Status.Error, 'Необходимо выбрать участок')\r\n        this.check(\r\n            tgt,\r\n            tgt.capitalExpenditures.rows.length > 0 || tgt.additionalExpenditures.rows.length > 0 || tgt.salary.rows.length > 0,\r\n            Status.Error,\r\n            'Необходимо ввести хотя бы одну строку затрат'\r\n        )\r\n        this.checkEquipmentNames(tgt, tgt.additionalExpenditures.rows)\r\n        this.checkEquipmentNames(tgt, tgt.salary.rows)\r\n        this.transferStatus(tgt, tgt.name)\r\n        this.transferStatus(tgt, tgt.description)\r\n        this.transferStatus(tgt, tgt.capacity)\r\n        this.transferStatus(tgt, tgt.parallelSchedule)\r\n        this.transferStatus(tgt, tgt.capitalExpenditures)\r\n        this.transferStatus(tgt, tgt.additionalExpenditures)\r\n        this.transferStatus(tgt, tgt.salary)\r\n        this.transferStatus(tgt, tgt.rates)\r\n        return tgt.status\r\n    }\r\n\r\n    createDefault(): EfficiencyComputationState {\r\n        const state: EfficiencyComputationState = {\r\n            id: undefined,\r\n            name: this.nameHandler.create(),\r\n            description: this.descriptionHandler.create(),\r\n            track: null,\r\n            handle: StateHandler.cnt++,\r\n            status: Status.Ok,\r\n            capacity: this.capacityHandler.create({}),\r\n            parallelSchedule: this.parSchHandler.create({}),\r\n            capitalExpenditures: this.capitalExpendituresHandler.createDefault(),\r\n            additionalExpenditures: this.additionalExpendituresHandler.createDefault(),\r\n            salary: this.salaryHandler.createDefault(),\r\n            rates: this.ratesHandler.create({\r\n                reducedEnergyConsumption: this.ratesHandler.DEFAULT_REDUCED_ENERGY_CONSUMPTION,\r\n                discountRate: this.ratesHandler.DEFAULT_DISCOUNT_RATE,\r\n                annualInflationRate: this.ratesHandler.DEFAULT_ANNUAL_INFLATION_RATE,\r\n                annualSalaryIndexation: this.ratesHandler.DEFAULT_ANNUAL_SALARY_INDEXATION,\r\n                annualIncreaseInElectricityTariff: this.ratesHandler.DEFAULT_ANNUAL_INCREASE_IN_ELECTRICITY_TARIFF\r\n            })\r\n        }\r\n        this.validate(state)\r\n        return state\r\n    }\r\n\r\n    logErrors(tgt: EfficiencyComputationState): string {\r\n        const messages = tgt.what\r\n            ?.map(msg => {\r\n                if (msg === VALUE_IS_REQUIRED) {\r\n                    return ANY_REQUIRED_VALUES_ARE_MISSED\r\n                } else if (msg.includes(MAX_SYMBOL_QTY)) {\r\n                    return ANY_STRINGS_HAVE_WRONG_LENGTH\r\n                } else if (msg.includes(NUMERIC_RANGE_VIOLATION)) {\r\n                    return ANY_NUMERIC_VALUES_ARE_OUT_OF_RANGE\r\n                } else if (msg.includes(NOT_A_NUMBER)) {\r\n                    return ANY_NUMBERS_ARE_NOT_NUMBERS\r\n                }\r\n                return msg\r\n            }) ?? []\r\n        return Array.from(new Set(messages)).sort()\r\n            .map((s, i) => `${i + 1}. ${s}`)\r\n            .join('\\n')\r\n    }\r\n\r\n    powerDiff(tgt: ParallelScheduleParamsState): { abs: string, rel: string } {\r\n        if (tgt.status < Status.Error) {\r\n            let _old: number = 0\r\n            if (tgt.oldDailyConsumption.value !== '') {\r\n                _old = this.parSchHandler.dcHandler.parseNumber(tgt.oldDailyConsumption.value)\r\n            } else {\r\n                _old = tgt.oldComputation!.energyConsumption\r\n            }\r\n\r\n            let _new: number = 0\r\n            if (tgt.newDailyConsumption.value !== '') {\r\n                _new = this.parSchHandler.dcHandler.parseNumber(tgt.newDailyConsumption.value)\r\n            } else {\r\n                _new = tgt.newComputation!.energyConsumption\r\n            }\r\n\r\n            return {\r\n                abs: format(_new - _old, 2, 0, '', 'always'),\r\n                rel: format(100 * (_new - _old) / _old, 2, 0, '', 'always') + ' %'\r\n            }\r\n        }\r\n        return { abs: '', rel: '' }\r\n    }\r\n\r\n    intervalDiff(tgt: CapacityParamsState): { abs: string, rel: string } {\r\n        if (tgt.newInterval.status < Status.Error && tgt.oldInterval.status < Status.Error) {\r\n            let _old: number = 0\r\n            if (tgt.oldInterval.value !== '') {\r\n                _old = this.parSchHandler.dcHandler.parseNumber(tgt.oldInterval.value)\r\n            } else {\r\n                _old = tgt.oldCapacityDto!.trainInterval\r\n            }\r\n\r\n            let _new: number = 0\r\n            if (tgt.newInterval.value !== '') {\r\n                _new = this.parSchHandler.dcHandler.parseNumber(tgt.newInterval.value)\r\n            } else {\r\n                _new = tgt.newCapacityDto!.trainInterval\r\n            }\r\n\r\n            return {\r\n                abs: format(_new - _old, 0, 0, '', 'always'),\r\n                rel: format(100 * (_new - _old) / _old, 2, 0, '', 'always') + ' %'\r\n            }\r\n        }\r\n        return { abs: '', rel: '' }\r\n    }\r\n\r\n    trainQtyDiff(tgt: CapacityParamsState): { abs: string, rel: string } {\r\n        if (tgt.newTrainQty.status < Status.Error && tgt.oldTrainQty.status < Status.Error) {\r\n            let _old: number = 0\r\n            if (tgt.oldTrainQty.value !== '') {\r\n                _old = this.parSchHandler.dcHandler.parseNumber(tgt.oldTrainQty.value)\r\n            } else {\r\n                _old = tgt.oldCapacityDto!.trainQty\r\n            }\r\n\r\n            let _new: number = 0\r\n            if (tgt.newTrainQty.value !== '') {\r\n                _new = this.parSchHandler.dcHandler.parseNumber(tgt.newTrainQty.value)\r\n            } else {\r\n                _new = tgt.newCapacityDto!.trainQty\r\n            }\r\n\r\n            return {\r\n                abs: format(_new - _old, 0, 0, '', 'always'),\r\n                rel: format(100 * (_new - _old) / _old, 2, 0, '', 'always') + ' %'\r\n            }\r\n        }\r\n        return { abs: '', rel: '' }\r\n    }\r\n\r\n    copy(tgt: EfficiencyComputationState): EfficiencyComputationState {\r\n        const cp = { ...tgt }\r\n        cp.handle = StateHandler.cnt++\r\n        return cp\r\n    }\r\n\r\n    updateName(tgt: EfficiencyComputationState, name: string) {\r\n        tgt.name = this.nameHandler.create(name)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateDescription(tgt: EfficiencyComputationState, description: string) {\r\n        tgt.description = this.descriptionHandler.create(description)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateTrack(tgt: EfficiencyComputationState, trackParams: TrackParams | null) {\r\n        if (trackParams?.id !== tgt.track?.id) {\r\n            this.updateParallelScheduleParams(tgt, { oldComputation: null, newComputation: null })\r\n            this.updateCapacityParams(tgt, { oldCapacityDto: null, newCapacityDto: null })\r\n        }\r\n        tgt.track = trackParams\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateCapacityParams(tgt: EfficiencyComputationState, kwargs: CapacityParamsKwargs) {\r\n        if ((kwargs.oldCapacityDto != null || kwargs.newCapacityDto != null) && tgt.track === null) {\r\n            throw new Error('Попытка выбора расчета пропускной способности при невыбранном участке')\r\n        }\r\n        if (kwargs.oldCapacityDto !== undefined && kwargs.oldCapacityDto?.schemaId !== tgt.capacity.oldCapacityDto?.schemaId) {\r\n            this.updateParallelScheduleParams(tgt, { oldComputation: null })\r\n        }\r\n        if (kwargs.newCapacityDto !== undefined && kwargs.newCapacityDto?.schemaId !== tgt.capacity.newCapacityDto?.schemaId) {\r\n            this.updateParallelScheduleParams(tgt, { newComputation: null })\r\n        }\r\n        this.capacityHandler.update(tgt.capacity, kwargs)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateParallelScheduleParams(tgt: EfficiencyComputationState, kwargs: ParallelScheduleParamsKwargs) {\r\n        if (\r\n            tgt.capacity.oldCapacityDto === null && kwargs.oldComputation != null ||\r\n            tgt.capacity.newCapacityDto === null && kwargs.newComputation != null\r\n        ) {\r\n            throw new Error('Попытка выбрать расчет нагрузочной способности при невыбранном расчете пропускной способности')\r\n        }\r\n        this.parSchHandler.update(tgt.parallelSchedule, kwargs)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateCapitalExpendituresRow(tgt: EfficiencyComputationState, idx: number, kwargs: CapitalExpendituresRowKwargs) {\r\n        this.capitalExpendituresHandler.updateRow(tgt.capitalExpenditures, idx, kwargs)\r\n        if (kwargs.equipment !== undefined) {\r\n            this.checkEquipmentNames(tgt, tgt.additionalExpenditures.rows)\r\n            this.checkEquipmentNames(tgt, tgt.salary.rows)\r\n        }\r\n        this.validate(tgt)\r\n    }\r\n\r\n    insertCapitalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\r\n        this.capitalExpendituresHandler.insertRow(tgt.capitalExpenditures, idx, {})\r\n        this.validate(tgt)\r\n    }\r\n\r\n    deleteCapitalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\r\n        this.capitalExpendituresHandler.deleteRow(tgt.capitalExpenditures, idx)\r\n        this.checkEquipmentNames(tgt, tgt.additionalExpenditures.rows)\r\n        this.checkEquipmentNames(tgt, tgt.salary.rows)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    duplicateCapitalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\r\n        this.capitalExpendituresHandler.duplicateRow(tgt.capitalExpenditures, idx)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateAdditionalExpendituresRow(tgt: EfficiencyComputationState, idx: number, kwargs: AdditionalExpendituresRowKwargs) {\r\n        this.additionalExpendituresHandler.updateRow(tgt.additionalExpenditures, idx, kwargs)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    insertAdditionalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\r\n        const row = this.additionalExpendituresHandler.insertRow(tgt.additionalExpenditures, idx, {})\r\n        this.checkEquipmentNames(tgt, [row])\r\n        this.validate(tgt)\r\n    }\r\n\r\n    deleteAdditionalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\r\n        this.additionalExpendituresHandler.deleteRow(tgt.additionalExpenditures, idx)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    duplicateAdditionalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\r\n        const row = this.additionalExpendituresHandler.duplicateRow(tgt.additionalExpenditures, idx)\r\n        this.checkEquipmentNames(tgt, [row])\r\n        this.validate(tgt)\r\n    }\r\n\r\n    uniqueEquipmentNames(current: string, arr: CapitalExpendituresRowState[]): string[] {\r\n        const names = arr.map(row => row.equipment.value)\r\n        names.splice(0, 0, '')\r\n        names.push(current)\r\n        return Array.from(new Set(names))\r\n    }\r\n\r\n    insertSalaryRow(tgt: EfficiencyComputationState, idx: number) {\r\n        const row = this.salaryHandler.insertRow(tgt.salary, idx, {})\r\n        this.checkEquipmentNames(tgt, [row])\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateSalaryRow(tgt: EfficiencyComputationState, idx: number, kwargs: SalaryStateKwargs) {\r\n        this.salaryHandler.updateRow(tgt.salary, idx, kwargs)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    deleteSalaryRow(tgt: EfficiencyComputationState, idx: number) {\r\n        this.salaryHandler.deleteRow(tgt.salary, idx)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    duplicateSalaryRow(tgt: EfficiencyComputationState, idx: number) {\r\n        const row = this.salaryHandler.duplicateRow(tgt.salary, idx)\r\n        this.checkEquipmentNames(tgt, [row])\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateRates(tgt: EfficiencyComputationState, kwargs: RatesStateKwargs) {\r\n        this.ratesHandler.update(tgt.rates, kwargs)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    private checkEquipmentNames(tgt: EfficiencyComputationState, dependentRows: { equipment: StringState }[]) {\r\n        const equipmentNames = this.uniqueEquipmentNames('', tgt.capitalExpenditures.rows)\r\n        for (const row of dependentRows) {\r\n            this.reset(row.equipment)\r\n            if (!equipmentNames.includes(row.equipment.value)) {\r\n                this.addWarning(row.equipment, 'Необъявленное оборудование')\r\n                this.transferStatus(tgt, row.equipment)\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { CapacityParamsKwargs } from './model/capacity-params';\r\nimport { EfficiencyComputationMainHandler } from './handler/EfficiencyComputationMainHandler';\r\nimport { ParallelScheduleParamsKwargs } from './model/parallel-schedule-params';\r\nimport { CapitalExpendituresRowKwargs } from './model/capital-expenditures';\r\nimport { AdditionalExpendituresRowKwargs } from './model/additional-expendures';\r\nimport { SalaryStateKwargs } from './model/salary'\r\nimport { RatesStateKwargs } from './model/rates'\r\nimport { TrackParams } from './model/efficiency-computation';\r\nimport { EfficiencyComputationDto } from './model/dto';\r\n\r\nconst h = EfficiencyComputationMainHandler.getInstance();\r\n\r\nconst economicSlice = createSlice({\r\n    name: 'economic',\r\n    initialState: h.createDefault(),\r\n    reducers: {\r\n        updateName(state, action: PayloadAction<string>) {\r\n            h.updateName(state, action.payload)\r\n        },\r\n\r\n        updateDescription(state, action: PayloadAction<string>) {\r\n            h.updateDescription(state, action.payload)\r\n        },\r\n\r\n        updateTrack(state, action: PayloadAction<TrackParams | null>) {\r\n            h.updateTrack(state, action.payload)\r\n        },\r\n\r\n        updateCapacityParams(state, action: PayloadAction<CapacityParamsKwargs>) {\r\n            h.updateCapacityParams(state, action.payload);\r\n        },\r\n\r\n        updateParallelScheduleParams(state, action: PayloadAction<ParallelScheduleParamsKwargs>) {\r\n            h.updateParallelScheduleParams(state, action.payload);\r\n        },\r\n\r\n        updateCapitalExpendituresRow(state, action: PayloadAction<{ idx: number } & CapitalExpendituresRowKwargs>) {\r\n            h.updateCapitalExpendituresRow(state, action.payload.idx, action.payload)\r\n        },\r\n\r\n        insertCapitalExpendituresRow(state, action: PayloadAction<number>) {\r\n            h.insertCapitalExpendituresRow(state, action.payload)\r\n            return state\r\n        },\r\n\r\n        deleteCapitalExpendituresRow(state, action: PayloadAction<number>) {\r\n            h.deleteCapitalExpendituresRow(state, action.payload)\r\n        },\r\n\r\n        duplicateCapitalExpendituresRow(state, action: PayloadAction<number>) {\r\n            h.duplicateCapitalExpendituresRow(state, action.payload)\r\n        },\r\n\r\n        updateAdditionalExpendituresRow(state, action: PayloadAction<{ idx: number } & AdditionalExpendituresRowKwargs>) {\r\n            h.updateAdditionalExpendituresRow(state, action.payload.idx, action.payload)\r\n        },\r\n\r\n        insertAdditionalExpendituresRow(state, action: PayloadAction<number>) {\r\n            h.insertAdditionalExpendituresRow(state, action.payload)\r\n        },\r\n\r\n        deleteAdditionalExpendituresRow(state, action: PayloadAction<number>) {\r\n            h.deleteAdditionalExpendituresRow(state, action.payload)\r\n        },\r\n\r\n        duplicateAdditionalExpendituresRow(state, action: PayloadAction<number>) {\r\n            h.duplicateAdditionalExpendituresRow(state, action.payload)\r\n        },\r\n\r\n        insertSalaryRow(state, action: PayloadAction<number>) {\r\n            h.insertSalaryRow(state, action.payload)\r\n        },\r\n\r\n        updateSalaryRow(state, action: PayloadAction<{ idx: number } & SalaryStateKwargs>) {\r\n            h.updateSalaryRow(state, action.payload.idx, action.payload)\r\n        },\r\n\r\n        deleteSalaryRow(state, action: PayloadAction<number>) {\r\n            h.deleteSalaryRow(state, action.payload)\r\n        },\r\n\r\n        duplicateSalaryRow(state, action: PayloadAction<number>) {\r\n            h.duplicateSalaryRow(state, action.payload)\r\n        },\r\n\r\n        updateRates(state, action: PayloadAction<RatesStateKwargs>) {\r\n            h.updateRates(state, action.payload)\r\n        },\r\n\r\n        fromDto(state, action: PayloadAction<EfficiencyComputationDto>) {\r\n            return h.fromDto(action.payload)\r\n        }\r\n    }\r\n});\r\n\r\nexport default economicSlice;\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport economicSlice from '../../economic/slice';\r\n\r\nconst reducers = combineReducers({\r\n  economic: economicSlice.reducer\r\n});\r\n\r\nexport default reducers;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport reducers from './reducers';\r\n\r\nconst store = configureStore({\r\n  reducer: reducers\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport default store;\r\n","import { CSSProperties, useEffect, useState } from 'react'\r\nimport React from 'react'\r\nimport { StringState, localized } from '../../common/StringStateHandler'\r\nimport { Status } from '../../common/verifiable'\r\nimport { useAppDispatch } from '../../store'\r\nimport { CapacityParamsState } from '../model/capacity-params'\r\nimport { EfficiencyComputationMainHandler } from '../handler/EfficiencyComputationMainHandler'\r\nimport economicSlice from '../slice'\r\n\r\nexport function getStyle(status: Status): CSSProperties {\r\n  let color = ''\r\n  if (status === Status.Error) {\r\n    color = 'pink'\r\n  } else if (status === Status.Warning) {\r\n    color = 'lightyellow'\r\n  }\r\n  return {\r\n    backgroundColor: color\r\n  }\r\n}\r\n\r\nexport const StringStateInput = (props: {\r\n  state: StringState\r\n  label?: string\r\n  placeholder?: string\r\n  onBlur: (v: string) => void\r\n}) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        key={props.state.handle}\r\n        name=\"mass\"\r\n        type=\"text\"\r\n        defaultValue={props.state.value}\r\n        style={getStyle(props.state.status)}\r\n        className={'warning'}\r\n        title={props.state.what?.map(s => localized(s))?.join('\\n') ?? ''}\r\n        placeholder={props.placeholder ?? ''}\r\n        onBlur={(e) => props.onBlur(e.target.value)}\r\n      />\r\n      {props.label && <label htmlFor=\"mass\"> - {props.label}</label>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function TextArea<T>(props: {\r\n  obj: T | null,\r\n  onBlur: (v: T | null) => void,\r\n  disabled?: boolean,\r\n  titleIfDisabled?: string,\r\n  required?: boolean\r\n}) {\r\n  const [text, setText] = useState('null')\r\n  useEffect(() => {\r\n    let text: string\r\n    try {\r\n      text = JSON.stringify(props.obj)\r\n    } catch (e: any) {\r\n      text = 'null'\r\n    }\r\n    setText(text)\r\n  }, [props.obj])\r\n  return (\r\n    <textarea\r\n      value={text}\r\n      onChange={e => setText(e.target.value)}\r\n      onBlur={e => {\r\n        let obj: T | null\r\n        try {\r\n          obj = JSON.parse(e.target.value) as T\r\n        } catch (e: any) {\r\n          obj = null\r\n        }\r\n        props.onBlur(obj)\r\n      }}\r\n      style={{ width: 300, height: 120, backgroundColor: props.required && props.obj === null ? 'pink' : '' }}\r\n      disabled={props.disabled}\r\n      title={props.disabled ? props.titleIfDisabled : ''}\r\n    />\r\n  )\r\n}\r\n\r\nexport function CapacityParamsView(props: { capacity: CapacityParamsState, isTrackSelected: boolean }) {\r\n  const {\r\n    oldCapacityDto: oldCapacityInfo,\r\n    newCapacityDto: newCapacityInfo,\r\n    maxTrainMass,\r\n    oldInterval,\r\n    newInterval,\r\n    oldTrainQty,\r\n    newTrainQty\r\n  } = props.capacity\r\n  const dispatch = useAppDispatch()\r\n  const h = EfficiencyComputationMainHandler.getInstance()\r\n  const intervalDiff = h.intervalDiff(props.capacity)\r\n  const trainQtyDiff = h.trainQtyDiff(props.capacity)\r\n  return (\r\n    <div>\r\n      <h2>Пропускная</h2>\r\n      <TextArea\r\n        obj={oldCapacityInfo}\r\n        onBlur={obj => dispatch(economicSlice.actions.updateCapacityParams({ oldCapacityDto: obj }))}\r\n        disabled={!props.isTrackSelected}\r\n        titleIfDisabled='Сначала нужно выбрать участок'\r\n      />\r\n      <TextArea\r\n        obj={newCapacityInfo}\r\n        onBlur={obj => dispatch(economicSlice.actions.updateCapacityParams({ newCapacityDto: obj }))}\r\n        disabled={!props.isTrackSelected}\r\n        titleIfDisabled='Сначала нужно выбрать участок'\r\n      />\r\n      <StringStateInput\r\n        state={maxTrainMass}\r\n        label={'Масса'}\r\n        placeholder={\r\n          h.capacityHandler.defaultMass(props.capacity)?.toString() ?? ''\r\n        }\r\n        onBlur={(v) =>\r\n          dispatch(\r\n            economicSlice.actions.updateCapacityParams({ maxTrainMass: v })\r\n          )\r\n        }\r\n      />\r\n      <StringStateInput\r\n        state={oldInterval}\r\n        label={'Старый интервал'}\r\n        placeholder={props.capacity.oldCapacityDto?.trainInterval?.toString() ?? ''}\r\n        onBlur={(v) =>\r\n          dispatch(\r\n            economicSlice.actions.updateCapacityParams({ oldInterval: v })\r\n          )\r\n        }\r\n      />\r\n      <StringStateInput\r\n        state={newInterval}\r\n        label={'Новый интервал'}\r\n        placeholder={props.capacity.newCapacityDto?.trainInterval?.toString() ?? ''}\r\n        onBlur={(v) =>\r\n          dispatch(\r\n            economicSlice.actions.updateCapacityParams({ newInterval: v })\r\n          )\r\n        }\r\n      />\r\n      <StringStateInput\r\n        state={oldTrainQty}\r\n        label={'Старое количество'}\r\n        placeholder={props.capacity.oldCapacityDto?.trainQty?.toString() ?? ''}\r\n        onBlur={(v) =>\r\n          dispatch(\r\n            economicSlice.actions.updateCapacityParams({ oldTrainQty: v })\r\n          )\r\n        }\r\n      />\r\n      <StringStateInput\r\n        state={newTrainQty}\r\n        label={'Новое количество'}\r\n        placeholder={props.capacity.newCapacityDto?.trainQty?.toString() ?? ''}\r\n        onBlur={(v) =>\r\n          dispatch(\r\n            economicSlice.actions.updateCapacityParams({ newTrainQty: v })\r\n          )\r\n        }\r\n      />\r\n\r\n      <div>\r\n        <input type=\"text\" name=\"absPowerDiff\" disabled value={intervalDiff.abs} />\r\n        <input type=\"text\" name=\"relPowerDiff\" disabled value={intervalDiff.rel} />\r\n        <label htmlFor=\"relPowerDiff\">Изменение в межпоездном интервале</label>\r\n      </div>\r\n      <div>\r\n        <input type=\"text\" name=\"absPowerDiff\" disabled value={trainQtyDiff.abs} />\r\n        <input type=\"text\" name=\"relPowerDiff\" disabled value={trainQtyDiff.rel} />\r\n        <label htmlFor=\"relPowerDiff\">Изменение в межпоездном интервале</label>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import { CapitalExpendituresTableState } from 'economic/model/capital-expenditures'\r\nimport React from 'react'\r\nimport { StringStateInput } from './CapacityParamsView'\r\nimport economicSlice from 'economic/slice'\r\nimport { useAppDispatch } from 'store'\r\n\r\nexport function CapitalExpendituresView(props: { tbl: CapitalExpendituresTableState }) {\r\n    const dispatch = useAppDispatch()\r\n    return (\r\n        <div>\r\n            <h2>Капитальные затраты</h2>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Оборудование</th>\r\n                        <th>Тип</th>\r\n                        <th>Стоимость</th>\r\n                        <th>Количество</th>\r\n                        <th>Срок службы</th>\r\n                        <th>\r\n                            <button onClick={() => dispatch(economicSlice.actions.insertCapitalExpendituresRow(0))}\r\n                            >+</button>\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.tbl.rows.map((row, idx) => {\r\n                        return (\r\n                            <tr key={row.handle}>\r\n                                <td>\r\n                                    <StringStateInput\r\n                                        state={row.equipment}\r\n                                        placeholder={''}\r\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, equipment: v }))}\r\n                                    />\r\n                                </td>\r\n                                <td>\r\n                                    <StringStateInput\r\n                                        state={row.type}\r\n                                        placeholder={''}\r\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, type: v }))}\r\n                                    />\r\n                                </td>\r\n                                <td>\r\n                                    <StringStateInput\r\n                                        state={row.price}\r\n                                        placeholder={''}\r\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, price: v }))}\r\n                                    />\r\n                                </td>\r\n                                <td>\r\n                                    <StringStateInput\r\n                                        state={row.qty}\r\n                                        placeholder={''}\r\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, qty: v }))}\r\n                                    />\r\n                                </td>\r\n                                <td>\r\n                                    <StringStateInput\r\n                                        state={row.serviceLife}\r\n                                        placeholder={''}\r\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, serviceLife: v }))}\r\n                                    />\r\n                                </td>\r\n                                <td>\r\n                                    <button\r\n                                        onClick={() => dispatch(economicSlice.actions.insertCapitalExpendituresRow(idx + 1))}\r\n                                    >+</button>\r\n                                    <button\r\n                                        onClick={() => dispatch(economicSlice.actions.deleteCapitalExpendituresRow(idx))}\r\n                                    >-</button>\r\n                                    <button\r\n                                        onClick={() => dispatch(economicSlice.actions.duplicateCapitalExpendituresRow(idx))}\r\n                                    >c</button>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}","import { ParallelScheduleParamsState } from 'economic/model/parallel-schedule-params'\r\nimport { StringStateInput, TextArea } from './CapacityParamsView'\r\nimport React from 'react'\r\nimport { useAppDispatch } from 'store'\r\nimport economicSlice from 'economic/slice'\r\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\r\n\r\nexport function ParallelScheduleParamsView(\r\n    props: { sch: ParallelScheduleParamsState, isOldCapacitySelected: boolean, isNewCapacitySelected: boolean }\r\n) {\r\n    const dispatch = useAppDispatch()\r\n    const h = EfficiencyComputationMainHandler.getInstance()\r\n    const powerDiff = h.powerDiff(props.sch)\r\n    return (\r\n        <div>\r\n            <h2>Нагрузочная</h2>\r\n            <TextArea\r\n                obj={props.sch.oldComputation}\r\n                onBlur={v =>\r\n                    dispatch(\r\n                        economicSlice.actions.updateParallelScheduleParams({oldComputation: v})\r\n                    )\r\n                }\r\n                disabled={!props.isOldCapacitySelected}\r\n                titleIfDisabled={'Сначала нужно выбрать базовый расчет пропускной способности'}\r\n            />\r\n            <TextArea\r\n                obj={props.sch.newComputation}\r\n                onBlur={v =>\r\n                    dispatch(\r\n                        economicSlice.actions.updateParallelScheduleParams({newComputation: v})\r\n                    )\r\n                }\r\n                disabled={!props.isNewCapacitySelected}\r\n                titleIfDisabled={'Сначала нужно выбрать базовый расчет пропускной способности'}\r\n            />\r\n            <StringStateInput\r\n                state={props.sch.oldDailyConsumption}\r\n                label={'Старое суточное потербление'}\r\n                placeholder={props.sch.oldComputation?.energyConsumption?.toString() ?? ''}\r\n                onBlur={v => dispatch(economicSlice.actions.updateParallelScheduleParams({ oldDailyConsumption: v }))}\r\n            />\r\n            <StringStateInput\r\n                state={props.sch.newDailyConsumption}\r\n                label={'Новое суточное потербление'}\r\n                placeholder={props.sch.newComputation?.energyConsumption?.toString() ?? ''}\r\n                onBlur={v => dispatch(economicSlice.actions.updateParallelScheduleParams({ newDailyConsumption: v }))}\r\n            />\r\n            <div>\r\n                <input type=\"text\" name=\"absPowerDiff\" disabled value={powerDiff.abs} />\r\n                <input type=\"text\" name=\"relPowerDiff\" disabled value={powerDiff.rel} />\r\n                <label htmlFor=\"relPowerDiff\">Изменение в расходе электроэнергии</label>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { StringStateInput, getStyle } from './CapacityParamsView'\r\nimport economicSlice from 'economic/slice'\r\nimport { useAppDispatch } from 'store'\r\nimport { AdditionalExpendituresTableState } from 'economic/model/additional-expendures'\r\nimport { CapitalExpendituresTableState } from 'economic/model/capital-expenditures'\r\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\r\nimport React from 'react'\r\n\r\nexport function AdditionalExpendituresView(props: { tbl: AdditionalExpendituresTableState, capitalTbl: CapitalExpendituresTableState }) {\r\n  const dispatch = useAppDispatch()\r\n  const h = EfficiencyComputationMainHandler.getInstance()\r\n  return (\r\n    <div>\r\n      <h2>Дополнительные затраты</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th rowSpan={2}>Статья расходов</th>\r\n            <th rowSpan={2}>Оборудование</th>\r\n            <th rowSpan={2}>Стоимость</th>\r\n            <th rowSpan={2}>Количество</th>\r\n            <th colSpan={2}>Характер расходов</th>\r\n            <th rowSpan={2}>\r\n              <button onClick={() => dispatch(economicSlice.actions.insertAdditionalExpendituresRow(0))}>+</button>\r\n            </th>\r\n          </tr>\r\n          <tr>\r\n            <th>единовременные</th>\r\n            <th>годовые</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.tbl.rows.map((row, idx) => {\r\n            return (\r\n              <tr key={row.handle}>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.expendureItem}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx: idx, expendureItem: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <select\r\n                    value={row.equipment.value}\r\n                    onChange={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx, equipment: v.target.value }))}\r\n                    style={getStyle(row.equipment.status)}\r\n                    title={row.equipment.what?.join('\\n') ?? ''}\r\n                  >\r\n                    {h.uniqueEquipmentNames(row.equipment.value, props.capitalTbl.rows).map((name, i) => {\r\n                      return (\r\n                        <option key={name} value={name}>{name}</option>\r\n                      )\r\n                    })}\r\n                  </select>\r\n                </td>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.price}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx: idx, price: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.qty}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx: idx, qty: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type='radio'\r\n                    name={`${row.handle}`}\r\n                    value='ONETIME'\r\n                    checked={row.period === 'ONETIME'}\r\n                    onClick={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx, period: 'ONETIME' }))}\r\n                    readOnly\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type='radio'\r\n                    name={`${row.handle}`}\r\n                    value='ANNUAL'\r\n                    checked={row.period === 'ANNUAL'}\r\n                    onClick={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx, period: 'ANNUAL' }))}\r\n                    readOnly\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    onClick={() => dispatch(economicSlice.actions.insertAdditionalExpendituresRow(idx + 1))}\r\n                  >+</button>\r\n                  <button\r\n                    onClick={() => dispatch(economicSlice.actions.deleteAdditionalExpendituresRow(idx))}\r\n                  >-</button>\r\n                  <button\r\n                    onClick={() => dispatch(economicSlice.actions.duplicateAdditionalExpendituresRow(idx))}\r\n                  >c</button>\r\n                </td>\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n","import { SalaryStateTable } from 'economic/model/salary'\r\nimport { useAppDispatch } from 'store'\r\nimport React from 'react'\r\nimport { StringStateInput, getStyle } from './CapacityParamsView'\r\nimport economicSlice from 'economic/slice'\r\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\r\nimport { CapitalExpendituresTableState } from 'economic/model/capital-expenditures'\r\n\r\nexport function SalaryView(props: { tbl: SalaryStateTable, capitalTbl: CapitalExpendituresTableState }) {\r\n  const dispatch = useAppDispatch()\r\n  const h = EfficiencyComputationMainHandler.getInstance()\r\n  return (\r\n    <div>\r\n      <h2>Оплата труда</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Работник</th>\r\n            <th>Оборудование</th>\r\n            <th>Число работников</th>\r\n            <th>Часовая тарифная ставка</th>\r\n            <th>Годовая выработка</th>\r\n            <th>Стимулирующие выплаты</th>\r\n            <th>\r\n              <button onClick={() => dispatch(economicSlice.actions.insertSalaryRow(0))}\r\n              >+</button>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.tbl.rows.map((row, idx) => {\r\n            return (\r\n              <tr key={row.handle}>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.employee}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, employee: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <select\r\n                    value={row.equipment.value}\r\n                    onChange={v => dispatch(economicSlice.actions.updateSalaryRow({ idx, equipment: v.target.value }))}\r\n                    style={getStyle(row.equipment.status)}\r\n                    title={row.equipment.what?.join('\\n') ?? ''}\r\n                  >\r\n                    {h.uniqueEquipmentNames(row.equipment.value, props.capitalTbl.rows).map((name, i) => {\r\n                      return (\r\n                        <option key={name} value={name}>{name}</option>\r\n                      )\r\n                    })}\r\n                  </select>\r\n                </td>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.qty}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, qty: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.hourlyRate}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, hourlyRate: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.annualOutput}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, annualOutput: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.motivation}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, motivation: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    onClick={() => dispatch(economicSlice.actions.insertSalaryRow(idx + 1))}\r\n                  >+</button>\r\n                  <button\r\n                    onClick={() => dispatch(economicSlice.actions.deleteSalaryRow(idx))}\r\n                  >-</button>\r\n                  <button\r\n                    onClick={() => dispatch(economicSlice.actions.duplicateSalaryRow(idx))}\r\n                  >c</button>\r\n                </td>\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}","import * as taxes from 'economic/model/rates'\r\nimport React, { memo } from 'react'\r\nimport { StringStateInput } from './CapacityParamsView'\r\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\r\nimport economicSlice from 'economic/slice'\r\nimport { useAppDispatch } from 'store'\r\n\r\nexport const RatesView = (props: { rates: taxes.RatesState }) => {\r\n  const h = EfficiencyComputationMainHandler.getInstance()\r\n  const dispatch = useAppDispatch()\r\n  return (\r\n    <div>\r\n      <h2>Ставки</h2>\r\n      <StringStateInput\r\n        state={props.rates.profitRateForCargoTurnover}\r\n        label='Доходная ставка за грузооборот, руб / 1000 т·км брутто'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ profitRateForCargoTurnover: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.spendingRateForEconomicTasks}\r\n        label='Расходная ставка для экономических задач, руб / 1000 т·км брутто'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ spendingRateForEconomicTasks: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.reducedEnergyConsumption}\r\n        label='Снижение энергопотребления благодаря проводимым мероприятиям, %'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ reducedEnergyConsumption: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.electricityCostPerTraction}\r\n        label='Стоимость электроэнергии на тягу, руб / кВт·ч'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ electricityCostPerTraction: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.incomeTax}\r\n        label='Налог на прибыль, %'\r\n        placeholder={h.ratesHandler.DEFAULT_INCOME_TAX.toString()}\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ incomeTax: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.propertyTax}\r\n        label='Налог на имущество, %'\r\n        placeholder={h.ratesHandler.DEFAULT_PROPERTY_TAX.toString()}\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ propertyTax: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.socialTax}\r\n        label='Единый социальный налог, %'\r\n        placeholder={h.ratesHandler.DEFAULT_SOCIAL_TAX.toString()}\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ socialTax: v }))}\r\n      />\r\n      <div style={{ display: 'inline-block' }}>\r\n        <StringStateInput\r\n          state={props.rates.discountRate}\r\n          label='Ставка дисконтирования, %'\r\n          onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ discountRate: v }))}\r\n        />\r\n        <input name='coef' value={h.ratesHandler.discountCoefficient(props.rates)} disabled />\r\n        <label htmlFor=\"coef\">- Коэффициент дисконтирования</label>\r\n      </div>\r\n      <StringStateInput\r\n        state={props.rates.annualInflationRate}\r\n        label='Годовой темп инфляции, %'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ annualInflationRate: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.annualSalaryIndexation}\r\n        label='Годовая индексация заработной платы, %'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ annualSalaryIndexation: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.annualIncreaseInElectricityTariff}\r\n        label='Годовой рост тарифа на электроэнергию, %'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ annualIncreaseInElectricityTariff: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.calculationPeriod}\r\n        label='Расчетный период, лет'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ calculationPeriod: v }))}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import { useAppDispatch, useAppSelector } from '../../store'\r\nimport { CapacityParamsView, StringStateInput, TextArea } from './CapacityParamsView'\r\nimport { CapitalExpendituresView } from './CapitalExpendituresView'\r\nimport { ParallelScheduleParamsView } from './ParallelScheduleParamsView'\r\nimport React, { memo, useEffect } from 'react'\r\nimport { AdditionalExpendituresView } from './AdditionalExpendituresView'\r\nimport { SalaryView } from './SalaryView'\r\nimport { RatesView } from './Rates'\r\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\r\nimport { Status } from 'common/verifiable'\r\nimport { useDispatch } from 'react-redux'\r\nimport economicSlice from 'economic/slice'\r\n\r\nexport default function Root() {\r\n  const state = useAppSelector((state) => state.economic)\r\n  const dispatch = useAppDispatch()\r\n  const h = EfficiencyComputationMainHandler.getInstance()\r\n  \r\n  useEffect(() => {\r\n    dispatch(economicSlice.actions.fromDto(\r\n      {\r\n        id: 12,\r\n        name: 'qwrrt',\r\n        description: '',\r\n        trackId: 1,\r\n        trackName: 'Участок',\r\n        trackLength: 100,\r\n        capacityComputationBefore: {\r\n          id: 1,\r\n          name: 'Пропускная-1',\r\n          schemaId: 1,\r\n          trainWeightMaximum: 9000,\r\n          trainInterval: 16,\r\n          trainQty: 145\r\n        },\r\n        capacityComputationAfter: {\r\n          id: 1,\r\n          name: 'Пропускная-1',\r\n          schemaId: 1,\r\n          trainWeightMaximum: 9000,\r\n          trainInterval: 16,\r\n          trainQty: 145\r\n        },\r\n        parallelComputationBefore: {\r\n          id: 1,\r\n          name: 'Нагрузочная-1',\r\n          schemaId: 1,\r\n          energyConsumptionCalculated: 1300,\r\n          calculationDuration: 120,\r\n          energyConsumption: 15600\r\n        },\r\n        parallelComputationAfter: {\r\n          id: 1,\r\n          name: 'Нагрузочная-1',\r\n          schemaId: 1,\r\n          energyConsumptionCalculated: 1300,\r\n          calculationDuration: 120,\r\n          energyConsumption: 15600\r\n        },\r\n        inputData: {\r\n          trainWeightMaximum: 12,\r\n          trainIntervalBefore: 1,\r\n          trainIntervalAfter: 11,\r\n          trainQtyBefore: 1,\r\n          trainQtyAfter: 1,\r\n          energyConsumptionBefore: 15660,\r\n          energyConsumptionAfter: 16600,\r\n          capitalInvestments: [\r\n            {\r\n              equipment: '2wwee',\r\n              equipmentType: 'qwqw',\r\n              price: 12,\r\n              amount: 12,\r\n              serviceLife: 1\r\n            }\r\n          ],\r\n          additionalExpenditures: [],\r\n          maintenanceSalaries: [],\r\n          profitOptions: {\r\n            profitRateForCargoTurnover: 1,\r\n            spendingRateForEconomicTasks: 1,\r\n            reducedEnergyConsumption: 1,\r\n            electricityCostPerTraction: 1\r\n          },\r\n          taxRates: {\r\n            incomeTax: 20,\r\n            propertyTax: 2.2,\r\n            averageAnnualRateOfSocialContributions: 30.4\r\n          },\r\n          inflation: {\r\n            discountRate: 10,\r\n            annualInflationRate: 5,\r\n            annualSalaryIndexation: 5,\r\n            annualIncreaseInElectricityTariff: 5\r\n          },\r\n          calculationPeriod: 5\r\n        }\r\n      }\r\n    ))\r\n  }, [])\r\n  \r\n  return (\r\n    <>\r\n      <div>\r\n        <StringStateInput\r\n          state={state.name}\r\n          onBlur={v => dispatch(economicSlice.actions.updateName(v))}\r\n          label='Наименование расчёта'\r\n        />\r\n        <StringStateInput\r\n          state={state.description}\r\n          onBlur={v => dispatch(economicSlice.actions.updateDescription(v))}\r\n          label='Примечание'\r\n        />\r\n      </div>\r\n      <div>\r\n        <h2>Участок</h2>\r\n        <p>\r\n          Текстовые поля предназначены для ручного ввода объектов в формате JSON. В рабочем\r\n          варианте эти объекты будут приходить по сети как результаты запросов к API, и согласованность\r\n          их структуры будет обеспечена системой типов Kotlin-а. Здесь поэтому корректность структуры\r\n          не проверяется. Если она все же не корректна (вследствие ошибки при ручном вводе), это\r\n          приведет к неопределенному поведению.\r\n        </p>\r\n        <p>\r\n          Если JSON не валиден (то есть в нем есть синтаксические ошибки,\r\n          и стандартная функция JSON.parse выбрасывает исключение), результатом его разбора\r\n          (неудачного) будет null.\r\n        </p>\r\n        <TextArea\r\n          obj={state.track}\r\n          onBlur={obj => dispatch(economicSlice.actions.updateTrack(obj))}\r\n          required\r\n        />\r\n      </div>\r\n      <MCapacityParamsView capacity={state.capacity} isTrackSelected={state.track !== null} />\r\n      <MParallelScheduleParamsView\r\n        sch={state.parallelSchedule}\r\n        isOldCapacitySelected={state.capacity.oldCapacityDto !== null}\r\n        isNewCapacitySelected={state.capacity.newCapacityDto !== null}\r\n      />\r\n      <MCapitalExpendituresView tbl={state.capitalExpenditures} />\r\n      <MAdditionalExpendituresView tbl={state.additionalExpenditures} capitalTbl={state.capitalExpenditures} />\r\n      <MSalaryView tbl={state.salary} capitalTbl={state.capitalExpenditures} />\r\n      <MRatesView rates={state.rates} />\r\n      <button\r\n        onClick={() => console.log(h.toDto(state))}\r\n        disabled={state.status > Status.Warning}\r\n        title={h.logErrors(state)}\r\n      >DTO в консоль</button>\r\n    </>\r\n  )\r\n}\r\n\r\nconst MCapacityParamsView = memo(CapacityParamsView)\r\nconst MParallelScheduleParamsView = memo(ParallelScheduleParamsView)\r\nconst MCapitalExpendituresView = memo(CapitalExpendituresView)\r\nconst MAdditionalExpendituresView = memo(AdditionalExpendituresView)\r\nconst MSalaryView = memo(SalaryView)\r\nconst MRatesView = memo(RatesView)","import { Provider } from 'react-redux';\nimport React from 'react';\nimport Root from './economic/component/Root';\nimport store from './store';\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <Root />\n    </Provider>\n  );\n}\n","import { render } from 'react-dom';\nimport React from 'react';\n\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nrender(<App />, rootElement);\n"],"sourceRoot":""}