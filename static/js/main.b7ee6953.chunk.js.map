{"version":3,"sources":["economic/std-messages.ts","common/verifiable.ts","common/StringStateHandler.ts","common/StringStateRecordHandler.ts","common/number-state-handler/FloatStringStateHandler.ts","common/number-state-handler/IntStringStateHandler.ts","economic/handler/CapacityParamsStateHandler.ts","economic/handler/ParallelScheduleParamsStateHandler.ts","common/StringStateTableHandler.ts","common/StringStringStateHandler.ts","economic/handler/CapitalExpendituresStateHandler.ts","economic/handler/AdditionalExpenduresStateHandler.ts","economic/handler/SalaryStateHandler.ts","economic/handler/RatesStateHandler.ts","economic/handler/EfficiencyComputationMainHandler.ts","economic/slice.ts","store/reducers/index.ts","store/index.ts","economic/component/CapacityParamsView.tsx","economic/component/CapitalExpendituresView.tsx","economic/component/ParallelScheduleParamsView.tsx","economic/component/AdditionalExpendituresView.tsx","economic/component/SalaryView.tsx","economic/component/Rates.tsx","economic/component/Root.tsx","App.tsx","index.tsx"],"names":["VALUE_IS_REQUIRED","NUMERIC_RANGE_VIOLATION","NOT_A_NUMBER","MAX_SYMBOL_QTY","DEFAULT_AND_ACTUAL_VALUES_MISMATCH","Status","StateHandler","_classCallCheck","_createClass","key","value","tgt","e","status","Error","what","find","it","push","w","Math","max","Warning","src","_src$what","_step","_iterator","_createForOfIteratorHelper","s","n","done","this","addWarning","addError","err","f","condition","msg","Ok","replace","NaN","parseNumber","isNaN","isBlank","trim","length","cnt","Number","MIN_SAFE_INTEGER","StringStateHandler","_StateHandler","_inherits","_super","_createSuper","apply","arguments","create","instance","handle","normalized","validate","newValue","_default","newInstance","numberValue","stringValue","blank","min","check","concat","isInteger","format","v","maxFractionDigits","minFractionDigits","deleteMinusIfNegativeZero","i","substring","undefined","options","maximumFractionDigits","minimumFractionDigits","signDisplay","c","re","toLocaleString","im","sign","StringStateRecordHandler","_this","_len","args","Array","_key","call","handlers","kwargs","row","_kwargs$key","h","toString","_kwargs$key2","reset","field","transferStatus","FloatStringStateHandler","_StringStateHandler","minValue","maxValue","precision","required","checkIsNotBlank","checkIsNumber","checkInRange","numberOfFractionDigits","expected","digits","toFixed","illegalNumberPrecisionMsg","MAX_SAFE_INTEGER","POSITIVE_INFINITY","NEGATIVE_INFINITY","defaultValue","equal","commaIdx","lastIndexOf","IntStringStateHandler","_FloatStringStateHand","CapacityParamsStateHandler","_StringStateRecordHan","massHandler","intervalHandler","trainQtyHandler","oldCapacityDto","newCapacityDto","maxTrainMass","oldInterval","newInterval","oldTrainQty","newTrainQty","trainInterval","trainQty","defaultMass","_get","_getPrototypeOf","prototype","_tgt$oldCapacityDto$t","_tgt$oldCapacityDto","_tgt$newCapacityDto$t","_tgt$newCapacityDto","trainWeightMaximum","ParallelScheduleParamsStateHandler","dcHandler","oldComputation","newComputation","oldDailyConsumption","newDailyConsumption","energyConsumption","StringStateTableHandler","rowHandler","rows","idx","splice","slice","kw","copy","update","StringStringStateHandler","minLength","maxLength","RowHandler","equipment","type","price","qty","serviceLife","CapitalExpendituresStateHandler","_StringStateTableHand","_super2","RowHanler","expItemHandler","equipmentHandler","priceHandler","qtyHandler","expendureItem","period","AdditionalExpendituresStateHandler","SalaryRowStateHandler","employee","hourlyRate","annualOutput","motivation","RatesStateHandler","DEFAULT_REDUCED_ENERGY_CONSUMPTION","DEFAULT_INCOME_TAX","DEFAULT_PROPERTY_TAX","DEFAULT_SOCIAL_TAX","DEFAULT_DISCOUNT_RATE","DEFAULT_ANNUAL_INFLATION_RATE","DEFAULT_ANNUAL_SALARY_INDEXATION","DEFAULT_ANNUAL_INCREASE_IN_ELECTRICITY_TARIFF","rateHandler","energyConsumptionHandler","electricityCostHandler","reqHandler","optHandler","calcPeriodHandler","profitRateForCargoTurnover","spendingRateForEconomicTasks","reducedEnergyConsumption","electricityCostPerTraction","incomeTax","propertyTax","socialTax","discountRate","annualInflationRate","annualSalaryIndexation","annualIncreaseInElectricityTariff","calculationPeriod","EfficiencyComputationMainHandler","capacityHandler","parSchHandler","capitalExpendituresHandler","additionalExpendituresHandler","salaryHandler","ratesHandler","nameHandler","descriptionHandler","state","_state$capacity$oldCa","_state$capacity$newCa","_state$parallelSchedu","_state$parallelSchedu2","_this$tryParseNumber","_this$tryParseNumber2","_this$tryParseNumber3","_this$tryParseNumber4","_this$tryParseNumber5","_this$tryParseNumber6","_this$tryParseNumber7","_this$tryParseNumber8","_this$tryParseNumber9","_this$tryParseNumber10","_this$tryParseNumber11","_this$tryParseNumber12","_this$tryParseNumber13","_this$tryParseNumber14","_state$what","_this2","join","id","name","description","trackId","track","trackName","trackLength","capacityComputationBefore","capacity","capacityComputationAfter","parallelComputationBefore","parallelSchedule","parallelComputationAfter","inputData","tryParseNumber","trainIntervalBefore","trainIntervalAfter","trainQtyBefore","trainQtyAfter","energyConsumptionBefore","energyConsumptionAfter","capitalInvestments","capitalExpenditures","map","r","equipmentType","amount","additionalExpenditures","maintenanceSalaries","salary","paidWorker","equipmentName","productivity","additionalPayments","profitOptions","rates","taxRates","averageAnnualRateOfSocialContributions","inflation","dto","_dto$inputData$trainW","_dto$inputData$trainI","_dto$inputData$trainI2","_dto$inputData$trainQ","_dto$inputData$trainQ2","_dto$inputData$energy","_dto$inputData$energy2","createDefault","insertRow","_step2","_iterator2","_step3","_iterator3","checkEquipmentNames","_tgt$what$map","_tgt$what","messages","includes","from","Set","sort","_old","_new","abs","rel","cp","_objectSpread","trackParams","_tgt$track","updateParallelScheduleParams","updateCapacityParams","_kwargs$oldCapacityDt","_tgt$capacity$oldCapa","_kwargs$newCapacityDt","_tgt$capacity$newCapa","schemaId","updateRow","deleteRow","duplicateRow","current","arr","names","dependentRows","_step4","equipmentNames","uniqueEquipmentNames","_iterator4","_instance","getInstance","economicSlice","createSlice","initialState","reducers","updateName","action","payload","updateDescription","updateTrack","updateCapitalExpendituresRow","insertCapitalExpendituresRow","deleteCapitalExpendituresRow","duplicateCapitalExpendituresRow","updateAdditionalExpendituresRow","insertAdditionalExpendituresRow","deleteAdditionalExpendituresRow","duplicateAdditionalExpendituresRow","insertSalaryRow","updateSalaryRow","deleteSalaryRow","duplicateSalaryRow","updateRates","fromDto","combineReducers","economic","reducer","store","configureStore","useAppDispatch","useDispatch","useAppSelector","useSelector","getStyle","color","backgroundColor","StringStateInput","props","_props$state$what$map","_props$state$what","_props$state$what$map2","_props$placeholder","_jsxs","children","_jsx","style","className","title","substr","localized","placeholder","onBlur","target","label","htmlFor","TextArea","_useState","useState","_useState2","_slicedToArray","text","setText","useEffect","JSON","stringify","obj","onChange","parse","width","height","disabled","titleIfDisabled","CapacityParamsView","_h$capacityHandler$de","_h$capacityHandler$de2","_props$capacity$oldCa","_props$capacity$oldCa2","_props$capacity$oldCa3","_props$capacity$newCa","_props$capacity$newCa2","_props$capacity$newCa3","_props$capacity$oldCa4","_props$capacity$oldCa5","_props$capacity$oldCa6","_props$capacity$newCa4","_props$capacity$newCa5","_props$capacity$newCa6","_props$capacity","oldCapacityInfo","newCapacityInfo","dispatch","intervalDiff","trainQtyDiff","actions","isTrackSelected","CapitalExpendituresView","onClick","tbl","ParallelScheduleParamsView","_props$sch$oldComputa","_props$sch$oldComputa2","_props$sch$oldComputa3","_props$sch$newComputa","_props$sch$newComputa2","_props$sch$newComputa3","powerDiff","sch","isOldCapacitySelected","isNewCapacitySelected","AdditionalExpendituresView","rowSpan","colSpan","_row$equipment$what$j","_row$equipment$what","capitalTbl","checked","readOnly","SalaryView","RatesView","display","discountCoefficient","Root","energyConsumptionCalculated","calculationDuration","_Fragment","MCapacityParamsView","MParallelScheduleParamsView","MCapitalExpendituresView","MAdditionalExpendituresView","MSalaryView","MRatesView","console","log","toDto","logErrors","memo","App","Provider","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.b7ee6953.chunk.js","sourcesContent":["export const VALUE_IS_REQUIRED = 'Поле обязательно для заполнения'\r\nexport const ANY_REQUIRED_VALUES_ARE_MISSED = 'Не все обязательные значения введены'\r\n\r\nexport const NUMERIC_RANGE_VIOLATION = 'Значение должно находиться в пределах'\r\nexport const ANY_NUMERIC_VALUES_ARE_OUT_OF_RANGE = 'Значения некоторых числовых полей не соответствуют ограничениям'\r\n\r\nexport const NOT_A_NUMBER = 'Значение должно быть числом'\r\nexport const ANY_NUMBERS_ARE_NOT_NUMBERS = 'Значения в некоторых числовых полях не удалось распознать как числа'\r\n\r\nexport const MAX_SYMBOL_QTY = 'Количество символов должно находиться в пределах'\r\nexport const ANY_STRINGS_HAVE_WRONG_LENGTH = 'Длины некоторых строк не соответствуют ограничениям'\r\n\r\nexport const DEFAULT_AND_ACTUAL_VALUES_MISMATCH = 'Уведомление: введенное значение не совпадает со значением по умолчанию'\r\n\r\nexport function illegalNumberPrecisionMsg(expected: number): string {\r\n    if (expected < 0) {\r\n        throw new Error('Количество знаков после зяпятой не может быть отрицательным числом')\r\n    }\r\n    if (expected === 0) {\r\n        return 'Должно быть целым числом'\r\n    }\r\n    const digits = expected === 1 ? 'знака' : 'знаков'\r\n    return `Допсукается не более ${expected.toFixed()} ${digits} после десятичной запятой`;\r\n}","/**\r\n * Здесь определены базовые типы, на которых основана предлагаемая стратегия управления\r\n * состоянием объектов со сложной валидацией.\r\n */\r\n\r\n/** Базовый интерфейс всех верифицируемых объектов. */\r\nexport interface Verifiable {\r\n    /** Идентификатор объекта. */\r\n    handle: number\r\n    /** Статус - результат последней валидации объекта. */\r\n    status: Status\r\n    /** Массив строк, разъясняющих ошибку или предупреждение. */\r\n    what?: string[]\r\n}\r\n\r\n/** Статус верифицируемого объекта. */\r\nexport enum Status {\r\n    Ok,\r\n    Warning,\r\n    Error\r\n}\r\n\r\n/**\r\n * Инкапсулирует логику управления состоянием верефицируемых объектов.\r\n * @param S тип управляемого объекта.\r\n * @param D тип Dto управляемого объекта.\r\n */\r\nexport abstract class StateHandler<S extends Verifiable> {\r\n    /** Счетчик с автоинкрементом при создании новго объекта StringState.\r\n     * Текущее значение присваивается полю handle вновь создаваемого объекта.\r\n     */\r\n    protected static cnt = Number.MIN_SAFE_INTEGER\r\n\r\n    /**\r\n     * Проверяет собственные инварианты объекта. Изменяет status и what управляемого объекта.\r\n     * @returns статус объекта\r\n     */\r\n    abstract validate(tgt: S): Status\r\n\r\n    /**\r\n     * Добавить сведения об ошибке в управляемом объекте.\r\n     * @param tgt целевой объект\r\n     * @param e строка или массив строк с текстами ошибок\r\n     */\r\n    addError(tgt: Verifiable, e: string): void {\r\n        tgt.status = Status.Error\r\n        if (tgt.what == null) {\r\n            tgt.what = []\r\n        }\r\n        if (tgt.what!.find((it) => it === e) == null) {\r\n            tgt.what.push(e)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Добавить сведения о предупреждении в управляемом объекте.\r\n     * @param tgt целевой объект\r\n     * @param w строка или массив строк с текстами ошибок\r\n     */\r\n    addWarning(tgt: Verifiable, w: string): void {\r\n        tgt.status = Math.max(Status.Warning, tgt.status)\r\n        if (tgt.what == null) {\r\n            tgt.what = []\r\n        }\r\n        if (tgt.what!.find((it) => it === w) == null) {\r\n            tgt.what.push(w)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Передать информацию о статусе верификации из одного объекта в другой.\r\n     * @param tgt состояние, в которое передается статус.\r\n     * @param src состояние, из которого передается статус.\r\n     */\r\n    transferStatus(tgt: Verifiable, src: Verifiable): void {\r\n        tgt.status = Math.max(tgt.status, src.status)\r\n        for (const s of src.what ?? []) {\r\n            const m = src.status === Status.Warning ? this.addWarning : this.addError\r\n            m(tgt, s)\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param tgt целевой объект.\r\n     * @param condition условие логическое значение или выражение, вычисляемое в логическое значение.\r\n     * @param status статус, который требуется назначить объекту, если условие ложно.\r\n     * @param msg текст ошибки или предупреждения.\r\n     */\r\n    check(\r\n        tgt: Verifiable,\r\n        condition: boolean,\r\n        status: Status.Error | Status.Warning,\r\n        msg: string\r\n    ) {\r\n        if (!condition) {\r\n            switch (status) {\r\n                case Status.Warning:\r\n                    this.addWarning(tgt, msg)\r\n                    break\r\n                case Status.Error:\r\n                    this.addError(tgt, msg)\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n        return condition\r\n    }\r\n\r\n    /** Подготовить объект в валидации: установить status = Ok, удалить what. */\r\n    reset(tgt: Verifiable) {\r\n        tgt.status = Status.Ok\r\n        delete tgt.what\r\n    }\r\n\r\n    parseNumber(s: string): number {\r\n        s = s.replace(',', '.').replace(/\\s/g, '')\r\n        if (s == '') {\r\n            return NaN\r\n        }\r\n        return +s\r\n    }\r\n\r\n    tryParseNumber(s: string): number | null {\r\n        const n = this.parseNumber(s)\r\n        if (isNaN(n)) {\r\n            return null\r\n        }\r\n        return n\r\n    }\r\n}\r\n","import { NOT_A_NUMBER, VALUE_IS_REQUIRED, NUMERIC_RANGE_VIOLATION } from 'economic/std-messages'\r\nimport { StateHandler, Status, Verifiable } from './verifiable'\r\n\r\n/** Верефицируемое строковое состояние. */\r\nexport interface StringState extends Verifiable {\r\n    value: string\r\n}\r\n\r\nexport function isBlank(s: string): boolean {\r\n    return s.trim().length === 0\r\n}\r\n\r\n/**\r\n * Определяет интерфейс и общую логику для управления верифицируемым строковым состоянием.\r\n */\r\nexport abstract class StringStateHandler extends StateHandler<StringState> {\r\n\r\n    /**\r\n     * Создать копию управляемого объекта.\r\n     * @param tgt целевой объект.\r\n     * @param value значение. Если не задано, значение берется из целевого объекта.\r\n     */\r\n    copy(tgt: StringState, value?: string): StringState {\r\n        return this.create(value != null ? value : tgt.value)\r\n    }\r\n\r\n    /**\r\n     * Создать новый объект StringState.\r\n     * @param value хранимое строковое значение.\r\n     */\r\n    create(value?: string): StringState {\r\n        const instance = {\r\n            handle: StateHandler.cnt++,\r\n            value: this.normalized(value),\r\n            status: Status.Ok\r\n        } as StringState\r\n        this.validate(instance)\r\n        return instance\r\n    }\r\n\r\n    createOrDefault(newValue: string | undefined, _default: StringState): StringState {\r\n        if (newValue != null && newValue !== _default.value) {\r\n            const newInstance = {\r\n                handle: StateHandler.cnt++,\r\n                value: this.normalized(newValue),\r\n                status: Status.Ok\r\n            } as StringState\r\n            this.validate(newInstance)\r\n            return newInstance\r\n        }\r\n        return _default\r\n    }\r\n\r\n    abstract validate(tgt: StringState): Status\r\n\r\n    /** Проверить, приводится ли хранимое значение к действительному числу. */\r\n    checkIsNumber(tgt: StringState): number {\r\n        const numberValue = this.parseNumber(tgt.value)\r\n        if (isNaN(numberValue)) {\r\n            this.addError(tgt, NOT_A_NUMBER)\r\n        }\r\n        return numberValue\r\n    }\r\n\r\n    /** Проверить, приводится ли хранимое значение к действительному числу. */\r\n    checkIsNumberOrBlank(tgt: StringState): number {\r\n        const stringValue = tgt.value\r\n        const numberValue = this.parseNumber(stringValue)\r\n        if (isNaN(numberValue)) {\r\n            this.addError(tgt, NOT_A_NUMBER)\r\n        }\r\n        return numberValue\r\n    }\r\n\r\n    checkIsNotBlank(tgt: StringState): boolean {\r\n        const blank = isBlank(tgt.value)\r\n        if (blank) {\r\n            this.addError(tgt, VALUE_IS_REQUIRED)\r\n        }\r\n        return !blank\r\n    }\r\n\r\n    /**\r\n     * Проверить, лежит ли хранимое значение в заданном диапазоне чисел (включительно для обеих границ).\r\n     * @param tgt целевой объект.\r\n     * @param value хранимое значение или число, к которому оно приводится.\r\n     * @param min минимальное значение.\r\n     * @param max максимальное значение.\r\n     */\r\n    checkInRange(\r\n        tgt: StringState,\r\n        value: string | number,\r\n        min: number,\r\n        max: number\r\n    ) {\r\n        const numberValue = typeof value === 'number' ? value : this.parseNumber(value)\r\n        return this.check(\r\n            tgt,\r\n            numberValue >= min && numberValue <= max,\r\n            Status.Error,\r\n            `${NUMERIC_RANGE_VIOLATION} [${min}...${max}]`\r\n        )\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param tgt целевой объект\r\n     * @param value хранимое значение или число, к которому оно приводится.\r\n     */\r\n    checkIsInteger(tgt: StringState, value: number | string) {\r\n        const numberValue = typeof value === 'number' ? value : this.parseNumber(value)\r\n        return this.check(\r\n            tgt,\r\n            Number.isInteger(numberValue),\r\n            Status.Error,\r\n            NOT_A_NUMBER\r\n        )\r\n    }\r\n\r\n    abstract normalized(s?: string): string\r\n}\r\n\r\nexport function format(\r\n    v: string | number /* | Complex */ | null | undefined,\r\n    maxFractionDigits?: number,\r\n    minFractionDigits?: number,\r\n    defaultValue: string = '-',\r\n    signDisplay: 'auto' | 'always' | 'exceptZero' | 'never' | undefined = 'auto'\r\n): string {\r\n\r\n    /**\r\n     * Удалить знак '-', если в строке-аргументе записан отрицательный ноль.\r\n     * \r\n     *  - TODO (30 авг. 2023 г.):\r\n     *      Intl.NumberFormat может принимать для параметра signDisplay значение 'negative'.\r\n     *      Эта опция решает проблему с отрицательным нулем, но она относительно новая и\r\n     *      слабо поддерживается браузерами.\r\n     */\r\n    function deleteMinusIfNegativeZero(s: string): string {\r\n        if (s.length >= 2 && s[0] === '-' && s[1] === '0') {\r\n        for (let i = 2; i < s.length; ++i) {\r\n            if (s[i] >= '1' && s[i] <= '9') {\r\n            return s\r\n            }\r\n        }\r\n        return s.substring(1, s.length)\r\n        }\r\n        return s\r\n    }\r\n\r\n    if (v == null) {\r\n        return defaultValue\r\n    }\r\n    const options = { maximumFractionDigits: maxFractionDigits, minimumFractionDigits: minFractionDigits, signDisplay: signDisplay }\r\n    if (typeof v === 'object') { // Complex\r\n        const c = v as { re: number, im: number }\r\n        const re = deleteMinusIfNegativeZero(c.re.toLocaleString('ru', options))\r\n        let im = deleteMinusIfNegativeZero(c.im.toLocaleString('ru', options))\r\n        if (Math.sign(c.im) >= 0) im = `+${im}`\r\n        return `${re}${im}j`\r\n    }\r\n    return deleteMinusIfNegativeZero((+v).toLocaleString('ru', options))\r\n}\r\n\r\nexport function localized(\r\n    s: string,\r\n    maxFractionDigits?: number,\r\n    minFractionDigits?: number\r\n): string {\r\n    return s.replace(/[-]?\\d+[.]?\\d+/g, (substr) => format(substr, maxFractionDigits, minFractionDigits))\r\n}\r\n","import { StringStateHandler } from './StringStateHandler'\r\nimport { StateHandler, Status, Verifiable } from './verifiable'\r\n\r\n/**\r\n * Контроллер для управления записью (в форме объекта JS).\r\n * Параметры обобщения:\r\n *  - R - объект-запись, является верифицируемым состоянием (Verified).\r\n *  - K - объект kwargs, соответствующий R. Конкретно это означает, что:\r\n *      1. множество ключей K есть подмножество ключей R;\r\n *      2. для любого key преобразование K[key] -> R[key] существует и его оператор есть this.handlers[key].\r\n * \r\n * Описанные выше условия должны быть соблюдены разработчиком подкласса.\r\n */\r\nexport abstract class StringStateRecordHandler<R extends Verifiable, K extends Record<string, any>> extends StateHandler<R> {\r\n\r\n    /** Контроллеры для управления состояниями полей записи. */\r\n    readonly abstract handlers: Record<keyof K, StringStateHandler | ((arg?: any) => any)>\r\n\r\n    /** \r\n     * Создать новую запись с хранимыми значениями согласно объекту kwargs.\r\n     * Если в kwargs отсутствует значение (kwargs[key] === undefined), применяется значение по умолчанию. \r\n     */\r\n    create(kwargs: K): R {\r\n        const row = {} as any\r\n        for (const key in this.handlers) {\r\n            const h = this.handlers[key]\r\n            if (h instanceof StringStateHandler) {\r\n                row[key] = h.create(kwargs[key]?.toString())\r\n            } else {\r\n                row[key] = h(kwargs[key])\r\n            }\r\n        }\r\n        row.handle = StateHandler.cnt++\r\n        row.status = Status.Ok\r\n        this.validate(row as R)\r\n        return row as R\r\n    }\r\n\r\n    /**\r\n     * Изменить состояние записи.\r\n     * @param tgt - целевая запись.\r\n     * @param kwargs - новые значения изменяемых полей.\r\n     * @returns целевой объект с обновленными полями.\r\n     * \r\n     * Реализация по умолчанию не создает копию целевого объекта, а модифицирует и возвращает исходный экземпляр.\r\n     * Изменяемые поля при этом заменяются новыми объектами.\r\n     */\r\n    update(tgt: R, kwargs: K): R {\r\n        const row = tgt as any\r\n        for (const key in this.handlers) {\r\n            const newValue = kwargs[key]\r\n            if (newValue !== undefined) {\r\n                const h = this.handlers[key]\r\n                if (h instanceof StringStateHandler) {\r\n                    row[key] = h.create(kwargs[key]?.toString())\r\n                } else {\r\n                    row[key] = h(kwargs[key])\r\n                }\r\n            }\r\n        }\r\n        this.validate(tgt)\r\n        return tgt\r\n    }\r\n\r\n    /**\r\n     * Проверяет собственные инварианты всех Verifiable полей записи.\r\n     * Статус записи есть худший из статусов полей, what записи содержит все уникальные элементы what полей.\r\n     * @param tgt целевая запись.\r\n     * @returns статус записи.\r\n     */\r\n    validate(tgt: R): Status {\r\n        this.reset(tgt)\r\n        for (const key in tgt) {\r\n            const field = tgt[key] as any\r\n            if (typeof field === 'object' && field !== null && field.status !== undefined) {\r\n                this.transferStatus(tgt, field as Verifiable)\r\n            }\r\n        }\r\n        return tgt.status\r\n    }\r\n}\r\n","import { DEFAULT_AND_ACTUAL_VALUES_MISMATCH, illegalNumberPrecisionMsg } from 'economic/std-messages'\r\nimport {\r\n    StringState,\r\n    StringStateHandler,\r\n    format,\r\n    isBlank\r\n} from '.././StringStateHandler'\r\nimport { Status } from '.././verifiable'\r\n\r\n/**\r\n * Контроллер для управления строковым состоянием, которое хранит представление действительного числа.\r\n */\r\nexport class FloatStringStateHandler extends StringStateHandler {\r\n    readonly minValue: number\r\n    readonly maxValue: number\r\n    readonly precision: number\r\n    readonly required: boolean\r\n\r\n    constructor(minValue: number, maxValue: number, precision: number, required: boolean) {\r\n        super()\r\n        this.minValue = minValue\r\n        this.maxValue = maxValue\r\n        this.precision = precision\r\n        this.required = required\r\n    }\r\n\r\n    validate(tgt: StringState): Status {\r\n        this.reset(tgt)\r\n        if (this.required) {\r\n            this.checkIsNotBlank(tgt)\r\n        }\r\n        if (!isBlank(tgt.value)) {\r\n            const n = this.checkIsNumber(tgt)\r\n            if (!isNaN(n)) {\r\n                this.checkInRange(tgt, n, this.minValue, this.maxValue)\r\n                this.check(\r\n                    tgt,\r\n                    this.numberOfFractionDigits(tgt.value) <= this.precision,\r\n                    Status.Error,\r\n                    illegalNumberPrecisionMsg(this.precision)\r\n                )\r\n            }\r\n        }\r\n        return tgt.status\r\n    }\r\n\r\n    /** Возвращает нормализованное строковое представление числа или пустую строку, если не удалось распознать число. */\r\n    normalized(s?: string): string {\r\n        let n = this.parseNumber(s ?? '')\r\n        if (isNaN(n)) {\r\n            return s ?? ''\r\n        } else if (n > Number.MAX_SAFE_INTEGER) {\r\n            n = Number.POSITIVE_INFINITY\r\n        } else if (n < Number.MIN_SAFE_INTEGER) {\r\n            n = Number.NEGATIVE_INFINITY\r\n        }\r\n        return format(n, 20)\r\n    }\r\n\r\n    /** Предикат для проверки равенства с точностью до заданной в поле precision. */\r\n    equal(tgt: StringState, value: number | string): boolean {\r\n        if (typeof (value) === 'number') {\r\n            value = format(value, undefined, undefined, '')\r\n        }\r\n        return value === tgt.value\r\n    }\r\n\r\n    /**\r\n     * Сравнить состояние с заданным значением и добавить предупреждение, если они не равны.\r\n     * @param tgt целевое состояние.\r\n     * @param defaultValue заданное значение для сравнения.\r\n     */\r\n    compareToDefault(tgt: StringState, defaultValue: number | string): boolean {\r\n        if (tgt.value !== '' && !this.equal(tgt, defaultValue)) {\r\n            this.addWarning(tgt, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    /** Количество цифр после десятичного разделителя в строковом представлении действительного числа. */\r\n    numberOfFractionDigits(s: string): number {\r\n        const commaIdx = s.lastIndexOf(',')\r\n        if (commaIdx < 0) {\r\n            return 0\r\n        }\r\n        return s.length - commaIdx - 1\r\n    }\r\n}\r\n","import { NUMERIC_RANGE_VIOLATION } from 'economic/std-messages';\r\nimport { FloatStringStateHandler } from './FloatStringStateHandler';\r\n\r\n/**\r\n * Контроллер для управления строковым состоянием, которое хранит представление целого числа.\r\n */\r\nexport class IntStringStateHandler extends FloatStringStateHandler {\r\n    readonly minValue: number;\r\n    readonly maxValue: number;\r\n    readonly required: boolean;\r\n\r\n    constructor(minValue: number, maxValue: number, required: boolean) {\r\n        super(minValue, maxValue, 0, required);\r\n        if (\r\n            minValue < Number.MIN_SAFE_INTEGER ||\r\n            maxValue > Number.MAX_SAFE_INTEGER\r\n        ) {\r\n            throw new Error(`${NUMERIC_RANGE_VIOLATION} [${Number.MIN_SAFE_INTEGER}...${Number.MAX_SAFE_INTEGER}]`);\r\n        }\r\n        this.minValue = minValue;\r\n        this.maxValue = maxValue;\r\n        this.required = required;\r\n    }\r\n}\r\n","import { StringStateHandler } from 'common/StringStateHandler'\r\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\r\nimport { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\r\nimport { IntStringStateHandler } from 'common/number-state-handler/IntStringStateHandler'\r\nimport { Status } from 'common/verifiable'\r\nimport { DEFAULT_AND_ACTUAL_VALUES_MISMATCH } from 'economic/std-messages'\r\nimport { CapacityParamsState, CapacityParamsKwargs } from 'economic/model/capacity-params'\r\nimport { CapacityEconComputationDto } from 'economic/model/dto'\r\n\r\n/**\r\n * Контроллер для управления состоянием раздела \"Пропускная способность\".\r\n */\r\nexport class CapacityParamsStateHandler extends StringStateRecordHandler<CapacityParamsState, CapacityParamsKwargs> {\r\n    private massHandler = new FloatStringStateHandler(1, 110e3, 3, false)\r\n    private intervalHandler = new IntStringStateHandler(1, 1440, false)\r\n    private trainQtyHandler = new IntStringStateHandler(1, 1000, false)\r\n\r\n    readonly handlers: Record<keyof CapacityParamsKwargs, StringStateHandler | ((arg?: any) => any)> = {\r\n        oldCapacityDto: (v: CapacityEconComputationDto) => v === undefined ? null : v,\r\n        newCapacityDto: (v: CapacityEconComputationDto) => v === undefined ? null : v,\r\n        maxTrainMass: this.massHandler,\r\n        oldInterval: this.intervalHandler,\r\n        newInterval: this.intervalHandler,\r\n        oldTrainQty: this.trainQtyHandler,\r\n        newTrainQty: this.trainQtyHandler\r\n    }\r\n\r\n    validate(tgt: CapacityParamsState): Status {\r\n        this.massHandler.validate(tgt.maxTrainMass)\r\n        this.intervalHandler.validate(tgt.oldInterval)\r\n        this.trainQtyHandler.validate(tgt.oldTrainQty)\r\n        this.intervalHandler.validate(tgt.newInterval)\r\n        this.trainQtyHandler.validate(tgt.newTrainQty)\r\n\r\n        if (tgt.oldCapacityDto === null) {\r\n            this.intervalHandler.checkIsNotBlank(tgt.oldInterval)\r\n            this.trainQtyHandler.checkIsNotBlank(tgt.oldTrainQty)\r\n        } else {\r\n            if (tgt.oldInterval.value !== '' && !this.intervalHandler.equal(tgt.oldInterval, tgt.oldCapacityDto.trainInterval)) {\r\n                this.intervalHandler.addWarning(tgt.oldInterval, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            }\r\n            if (tgt.oldTrainQty.value !== '' && !this.trainQtyHandler.equal(tgt.oldTrainQty, tgt.oldCapacityDto.trainQty)) {\r\n                this.trainQtyHandler.addWarning(tgt.oldTrainQty, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            }\r\n        }\r\n\r\n        if (tgt.newCapacityDto === null) {\r\n            this.intervalHandler.checkIsNotBlank(tgt.newInterval)\r\n            this.trainQtyHandler.checkIsNotBlank(tgt.newTrainQty)\r\n        } else {\r\n            if (tgt.newInterval.value !== '' && !this.intervalHandler.equal(tgt.newInterval, tgt.newCapacityDto.trainInterval)) {\r\n                this.intervalHandler.addWarning(tgt.newInterval, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            }\r\n            if (tgt.newTrainQty.value !== '' && !this.trainQtyHandler.equal(tgt.newTrainQty, tgt.newCapacityDto.trainQty)) {\r\n                this.trainQtyHandler.addWarning(tgt.newTrainQty, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            }\r\n        }\r\n\r\n        if (tgt.oldCapacityDto === null && tgt.newCapacityDto === null) {\r\n            this.massHandler.checkIsNotBlank(tgt.maxTrainMass)\r\n        } else {\r\n            this.massHandler.validate(tgt.maxTrainMass)\r\n            if (tgt.maxTrainMass.value !== '' && !this.massHandler.equal(tgt.maxTrainMass, this.defaultMass(tgt)!)) {\r\n                this.massHandler.addWarning(tgt.maxTrainMass, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            }\r\n        }\r\n\r\n        return super.validate(tgt)\r\n    }\r\n\r\n    /** Возвращает массу поезда по умолчанию (согласно выбранным расчетам пропускной способности). */\r\n    defaultMass(tgt: CapacityParamsState): string {\r\n        if (tgt.oldCapacityDto == null && tgt.newCapacityDto == null) {\r\n            return ''\r\n        }\r\n        return this.massHandler.normalized(Math.max(tgt.oldCapacityDto?.trainWeightMaximum ?? 0, tgt.newCapacityDto?.trainWeightMaximum ?? 0).toString())\r\n    }\r\n}\r\n","import { StringStateHandler } from 'common/StringStateHandler'\r\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\r\nimport { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\r\nimport { Status } from 'common/verifiable'\r\nimport { DEFAULT_AND_ACTUAL_VALUES_MISMATCH } from 'economic/std-messages'\r\nimport { ParallelEconComputationDto } from 'economic/model/dto'\r\nimport { ParallelScheduleParamsKwargs, ParallelScheduleParamsState } from 'economic/model/parallel-schedule-params'\r\n\r\n/**\r\n * Контроллер для управления состоянием раздела \"Нагрузочная способность\".\r\n */\r\nexport class ParallelScheduleParamsStateHandler extends StringStateRecordHandler<ParallelScheduleParamsState, ParallelScheduleParamsKwargs> {\r\n    \r\n    readonly dcHandler = new FloatStringStateHandler(0, 1e6, 3, false)\r\n    \r\n    handlers: Record<keyof ParallelScheduleParamsKwargs, StringStateHandler | ((arg?: any) => any)> = {\r\n        oldComputation: (c?: ParallelEconComputationDto) => c === undefined ? null : c,\r\n        newComputation: (c?: ParallelEconComputationDto) => c === undefined ? null : c,\r\n        oldDailyConsumption: this.dcHandler,\r\n        newDailyConsumption: this.dcHandler\r\n    }\r\n\r\n    validate(tgt: ParallelScheduleParamsState): Status {\r\n        this.reset(tgt)\r\n\r\n        this.dcHandler.validate(tgt.oldDailyConsumption)\r\n        if (tgt.oldComputation === null) {\r\n            this.dcHandler.checkIsNotBlank(tgt.oldDailyConsumption)\r\n        } else {\r\n            if (tgt.oldDailyConsumption.value !== '' && !this.dcHandler.equal(tgt.oldDailyConsumption, tgt.oldComputation.energyConsumption)) {\r\n                this.dcHandler.addWarning(tgt.oldDailyConsumption, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            }\r\n        }\r\n\r\n        this.dcHandler.validate(tgt.newDailyConsumption)\r\n        if (tgt.newComputation === null) {\r\n            this.dcHandler.checkIsNotBlank(tgt.newDailyConsumption)\r\n        } else {\r\n            if (tgt.newDailyConsumption.value !== '' && !this.dcHandler.equal(tgt.newDailyConsumption, tgt.newComputation.energyConsumption)) {\r\n                this.dcHandler.addWarning(tgt.newDailyConsumption, DEFAULT_AND_ACTUAL_VALUES_MISMATCH)\r\n            }\r\n        }\r\n\r\n        this.transferStatus(tgt, tgt.oldDailyConsumption)\r\n        this.transferStatus(tgt, tgt.newDailyConsumption)\r\n        return tgt.status\r\n    }\r\n}","import { StringState } from './StringStateHandler'\r\nimport { StringStateRecordHandler } from './StringStateRecordHandler'\r\nimport { StateHandler, Status, Verifiable } from './verifiable'\r\n\r\n/**\r\n * Верифицируцируемое состояние таблицы. В базовом сценарии предполагается, что строки таблицы - верифицируемые записи (см. StringStateRecordHandler).\r\n */\r\nexport interface StringStateTable<R extends Verifiable> extends Verifiable {\r\n    /** Строки таблицы. */\r\n    rows: R[]\r\n}\r\n\r\n/**\r\n * Контроллер для управления верифицируемой таблицей.\r\n *  - R - тип строки таблицы.\r\n *  - K - kwargs для строки таблицы (подробнее см. StringStateRecordHandler).\r\n */\r\nexport class StringStateTableHandler<R extends Verifiable, K extends Record<string, any>> extends StateHandler<StringStateTable<R>> {\r\n\r\n    /** Контроллер для управления состоянием строк таблицы. */\r\n    private rowHandler: StringStateRecordHandler<R, K>\r\n\r\n    constructor(rowHandler: StringStateRecordHandler<R, K>) {\r\n        super()\r\n        this.rowHandler = rowHandler\r\n    }\r\n\r\n    validate(tgt: StringStateTable<R>): Status {\r\n        this.reset(tgt)\r\n        for (const row of tgt.rows) {\r\n            this.transferStatus(tgt, row)\r\n        }\r\n        return tgt.status\r\n    }\r\n\r\n    /** Создать пустую таблицу. */\r\n    createDefault(): StringStateTable<R> {\r\n        const instance = {\r\n            handle: StateHandler.cnt++,\r\n            status: Status.Ok,\r\n            rows: []\r\n        }\r\n        this.validate(instance)\r\n        return instance\r\n    }\r\n\r\n    /**\r\n     * Вставить новую строку в таблицу. Метод копирует массив rows.\r\n     * @param tgt целевая таблица.\r\n     * @param idx индекс для вставки строки.\r\n     * @param kwargs значения полей новой строки.\r\n     * @returns вновь созданная строка.\r\n     */\r\n    insertRow(tgt: StringStateTable<R>, idx: number | null, kwargs: K): R {\r\n        const row = this.rowHandler.create(kwargs)\r\n        if (idx === null) {\r\n            idx = tgt.rows.length\r\n        }\r\n        if (idx < 0) {\r\n            idx += tgt.rows.length\r\n        }\r\n        tgt.rows.splice(idx, 0, row)\r\n        tgt.rows = tgt.rows.slice()\r\n        this.validate(tgt)\r\n        return row\r\n    }\r\n\r\n    /**\r\n     * Вставить в таблицу копию строки. Метод копирует массив rows.\r\n     * @param tgt целевая таблица.\r\n     * @param idx индекс копируемой строки. Строка-копия вставляется в массив строк сразу после оригинала.\r\n     * @returns вновь созданная строка.\r\n     */\r\n    duplicateRow(tgt: StringStateTable<R>, idx: number): R {\r\n        const row = tgt.rows[idx]\r\n        const kw = {} as any\r\n        for (const key in this.rowHandler.handlers) {\r\n            const value = (row as any)[key]\r\n            if (value.handle !== undefined) {\r\n                kw[key] = (value as StringState).value\r\n            } else {\r\n                kw[key] = value\r\n            }\r\n        }\r\n        const copy = this.rowHandler.create(kw)\r\n        tgt.rows.splice(idx, 0, copy)\r\n        tgt.rows = tgt.rows.slice()\r\n        this.validate(tgt)\r\n        return copy\r\n    }\r\n\r\n    /**\r\n     * Модифицировать строку таблицы. Метод не обновляет ссылку на массив rows.\r\n     * Обновится ли сама строка определяется реализацией контроллера строк (this.rowHandler).\r\n     * @param tgt целевая таблица.\r\n     * @param idx индекс изменяемой строки.\r\n     * @param kwargs новые значения полей.\r\n     */\r\n    updateRow(tgt: StringStateTable<R>, idx: number, kwargs: K) {\r\n        const row = tgt.rows[idx]\r\n        tgt.rows[idx] = this.rowHandler.update(row, kwargs)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    /**\r\n     * Удалить строку из таблицы. Метод копирует массив rows.\r\n     * @param tgt целевая таблица.\r\n     * @param idx индекс удаляемой строки.\r\n     */\r\n    deleteRow(tgt: StringStateTable<R>, idx: number) {\r\n        tgt.rows.splice(idx, 1)\r\n        tgt.rows = tgt.rows.slice()\r\n        this.validate(tgt)\r\n    }\r\n}","import { StringState, StringStateHandler } from 'common/StringStateHandler'\r\nimport { Status } from 'common/verifiable'\r\nimport { MAX_SYMBOL_QTY } from 'economic/std-messages'\r\n\r\n/**\r\n * Контроллер для управления строковым состоянием как строкой.\r\n */\r\nexport class StringStringStateHandler extends StringStateHandler {\r\n\r\n    private maxLength: number\r\n    private minLength: number\r\n\r\n    constructor(minLength: number, maxLength: number = 0) {\r\n        super()\r\n        this.maxLength = maxLength\r\n        this.minLength = minLength\r\n    }\r\n\r\n    validate(tgt: StringState): Status {\r\n        this.reset(tgt)\r\n        if (tgt.value.length > this.maxLength || tgt.value.length < this.minLength) {\r\n            this.addError(tgt, `${MAX_SYMBOL_QTY} [${this.minLength}...${this.maxLength}]`)\r\n        }\r\n        return tgt.status\r\n    }\r\n\r\n    normalized(s?: string | undefined): string {\r\n        if (s == null) {\r\n            return ''\r\n        } else {\r\n            return s.trim()\r\n        }\r\n    }\r\n}","import { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\r\nimport { IntStringStateHandler } from 'common/number-state-handler/IntStringStateHandler'\r\nimport { StringStateHandler } from 'common/StringStateHandler'\r\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\r\nimport { StringStateTableHandler } from 'common/StringStateTableHandler'\r\nimport { StringStringStateHandler } from 'common/StringStringStateHandler'\r\nimport {CapitalExpendituresRowKwargs, CapitalExpendituresRowState} from 'economic/model/capital-expenditures'\r\n\r\nclass RowHandler extends StringStateRecordHandler<CapitalExpendituresRowState, CapitalExpendituresRowKwargs> {\r\n\r\n    readonly handlers: Record<keyof CapitalExpendituresRowKwargs, StringStateHandler | ((arg?: any) => any)> = {\r\n        equipment: new StringStringStateHandler(1, 50),\r\n        type: new StringStringStateHandler(0, 50),\r\n        price: new FloatStringStateHandler(1, 100e6, 2, true),\r\n        qty: new FloatStringStateHandler(1, 1e3, 2, true),\r\n        serviceLife: new IntStringStateHandler(1, 100, true)\r\n    }\r\n}\r\n\r\n/**\r\n * Контроллер для управления состоянием раздела \"Капитальные затраты\".\r\n */\r\nexport class CapitalExpendituresStateHandler extends StringStateTableHandler<CapitalExpendituresRowState, CapitalExpendituresRowKwargs> {\r\n    constructor() {\r\n        super(new RowHandler())\r\n    }\r\n}","import { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\r\nimport { StringStateHandler } from 'common/StringStateHandler'\r\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\r\nimport { StringStateTableHandler } from 'common/StringStateTableHandler'\r\nimport { StringStringStateHandler } from 'common/StringStringStateHandler'\r\nimport { AdditionalExpendituresRowKwargs, AdditionalExpendituresRowState } from 'economic/model/additional-expendures'\r\nimport { ExpenditureType } from 'economic/model/dto'\r\n\r\nclass RowHanler extends StringStateRecordHandler<AdditionalExpendituresRowState, AdditionalExpendituresRowKwargs> {\r\n\r\n    private expItemHandler = new StringStringStateHandler(1, 50)\r\n    private equipmentHandler = new StringStringStateHandler(0, 50)\r\n    private priceHandler = new FloatStringStateHandler(1, 10e6, 2, true)\r\n    private qtyHandler = new FloatStringStateHandler(1, 1e3, 2, true)\r\n\r\n    handlers: Record<keyof AdditionalExpendituresRowKwargs, StringStateHandler | ((arg?: any) => any)> = {\r\n        expendureItem: this.expItemHandler,\r\n        equipment: this.equipmentHandler,\r\n        price: this.priceHandler,\r\n        qty: this.qtyHandler,\r\n        period: (s?: ExpenditureType) => s ?? 'ANNUAL'\r\n    }\r\n}\r\n\r\n/**\r\n * Контроллер для управления состоянием раздела \"Дополнительные затраты\".\r\n */\r\nexport class AdditionalExpendituresStateHandler extends StringStateTableHandler<AdditionalExpendituresRowState, AdditionalExpendituresRowKwargs> {\r\n    constructor() {\r\n        super(new RowHanler())\r\n    }\r\n}","import { StringStateHandler } from 'common/StringStateHandler'\r\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\r\nimport { StringStringStateHandler } from 'common/StringStringStateHandler'\r\nimport { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\r\nimport { IntStringStateHandler } from 'common/number-state-handler/IntStringStateHandler'\r\nimport { SalaryStateRow, SalaryStateKwargs } from 'economic/model/salary'\r\n\r\n/**\r\n * Контроллер для управления состоянием раздела \"Оплата труда\".\r\n */\r\nexport class SalaryRowStateHandler extends StringStateRecordHandler<SalaryStateRow, SalaryStateKwargs> {\r\n\r\n    handlers: Record<keyof SalaryStateKwargs, StringStateHandler | ((arg?: any) => any)> = {\r\n        employee: new StringStringStateHandler(1, 50),\r\n        equipment: new StringStringStateHandler(0, 50),\r\n        qty: new IntStringStateHandler(1, 100, true),\r\n        hourlyRate: new FloatStringStateHandler(1, 1e4, 2, true),\r\n        annualOutput: new IntStringStateHandler(1, 1e4, true),\r\n        motivation: new FloatStringStateHandler(0, 100, 2, true),\r\n    }\r\n}\r\n","import { StringStateHandler, format } from 'common/StringStateHandler'\r\nimport { StringStateRecordHandler } from 'common/StringStateRecordHandler'\r\nimport { FloatStringStateHandler } from 'common/number-state-handler/FloatStringStateHandler'\r\nimport { IntStringStateHandler } from 'common/number-state-handler/IntStringStateHandler'\r\nimport { Status } from 'common/verifiable'\r\nimport { RatesState, RatesStateKwargs } from 'economic/model/rates'\r\n\r\n\r\n/**\r\n * Контроллер для управления состоянием раздела \"Экономические ставки\".\r\n */\r\nexport class RatesStateHandler extends StringStateRecordHandler<RatesState, RatesStateKwargs> {\r\n\r\n    readonly DEFAULT_REDUCED_ENERGY_CONSUMPTION = 0\r\n    readonly DEFAULT_INCOME_TAX = 20.0\r\n    readonly DEFAULT_PROPERTY_TAX = 2.2\r\n    readonly DEFAULT_SOCIAL_TAX = 26\r\n    readonly DEFAULT_DISCOUNT_RATE = 10.0\r\n    readonly DEFAULT_ANNUAL_INFLATION_RATE = 5.0\r\n    readonly DEFAULT_ANNUAL_SALARY_INDEXATION = 5.0\r\n    readonly DEFAULT_ANNUAL_INCREASE_IN_ELECTRICITY_TARIFF = 5.0\r\n\r\n    private rateHandler = new FloatStringStateHandler(0, 1e4, 2, true)\r\n    private energyConsumptionHandler = new FloatStringStateHandler(-100, 50, 2, true)\r\n    private electricityCostHandler = new FloatStringStateHandler(0, 1e3, 2, true)\r\n    private reqHandler = new FloatStringStateHandler(0, 50, 2, true)\r\n    private optHandler = new FloatStringStateHandler(0, 50, 2, false)\r\n    private calcPeriodHandler = new IntStringStateHandler(1, 50, true)\r\n\r\n    handlers: Record<keyof RatesStateKwargs, StringStateHandler | ((arg?: any) => any)> = {\r\n        profitRateForCargoTurnover: this.rateHandler,\r\n        spendingRateForEconomicTasks: this.rateHandler,\r\n        reducedEnergyConsumption: this.energyConsumptionHandler,\r\n        electricityCostPerTraction: this.electricityCostHandler,\r\n        incomeTax: this.optHandler,\r\n        propertyTax: this.optHandler,\r\n        socialTax: this.optHandler,\r\n        discountRate: this.reqHandler,\r\n        annualInflationRate: this.reqHandler,\r\n        annualSalaryIndexation: this.reqHandler,\r\n        annualIncreaseInElectricityTariff: this.reqHandler,\r\n        calculationPeriod: this.calcPeriodHandler\r\n    }\r\n\r\n    /** Рассчитать коэффициент дисконтирования (в долях единицы). */\r\n    discountCoefficient(tgt: RatesState): string {\r\n        if (tgt.discountRate.status < Status.Error) {\r\n            const dr = tgt.discountRate.value !== ''\r\n             ? this.reqHandler.parseNumber(tgt.discountRate.value)\r\n             : this.DEFAULT_DISCOUNT_RATE\r\n            return format(1.0 / (1.0 + 0.01 * dr), 3)\r\n        }\r\n        return ''\r\n    }\r\n}","import { CapacityParamsStateHandler } from 'economic/handler/CapacityParamsStateHandler'\r\nimport { StateHandler, Status } from '../../common/verifiable'\r\nimport { CapacityParamsKwargs, CapacityParamsState } from '../model/capacity-params'\r\nimport { ParallelScheduleParamsKwargs, ParallelScheduleParamsState } from '../model/parallel-schedule-params'\r\nimport { ParallelScheduleParamsStateHandler } from 'economic/handler/ParallelScheduleParamsStateHandler'\r\nimport { CapitalExpendituresRowKwargs, CapitalExpendituresRowState } from '../model/capital-expenditures'\r\nimport { CapitalExpendituresStateHandler } from 'economic/handler/CapitalExpendituresStateHandler'\r\nimport { EfficiencyComputationState, TrackParams } from 'economic/model/efficiency-computation'\r\nimport { AdditionalExpendituresStateHandler } from './AdditionalExpenduresStateHandler'\r\nimport { AdditionalExpendituresRowKwargs } from 'economic/model/additional-expendures'\r\nimport { StringStateTableHandler } from 'common/StringStateTableHandler'\r\nimport { SalaryRowStateHandler } from './SalaryStateHandler'\r\nimport { SalaryStateKwargs } from 'economic/model/salary'\r\nimport { StringState, StringStateHandler, format } from 'common/StringStateHandler'\r\nimport { RatesStateHandler } from './RatesStateHandler'\r\nimport { RatesStateKwargs } from 'economic/model/rates'\r\nimport { EfficiencyComputationDto, EfficiencyInputDto } from 'economic/model/dto'\r\nimport { StringStringStateHandler } from 'common/StringStringStateHandler'\r\nimport { ANY_REQUIRED_VALUES_ARE_MISSED, MAX_SYMBOL_QTY, VALUE_IS_REQUIRED, NUMERIC_RANGE_VIOLATION, ANY_NUMERIC_VALUES_ARE_OUT_OF_RANGE, ANY_STRINGS_HAVE_WRONG_LENGTH, NOT_A_NUMBER, ANY_NUMBERS_ARE_NOT_NUMBERS } from 'economic/std-messages'\r\n\r\n/**\r\n * Главный контроллер раздела \"Эффективность мероприятий (экономика)\".\r\n */\r\nexport class EfficiencyComputationMainHandler extends StateHandler<EfficiencyComputationState> {\r\n\r\n    private static _instance?: EfficiencyComputationMainHandler = undefined\r\n    readonly capacityHandler = new CapacityParamsStateHandler()\r\n    readonly parSchHandler = new ParallelScheduleParamsStateHandler()\r\n    private capitalExpendituresHandler = new CapitalExpendituresStateHandler()\r\n    private additionalExpendituresHandler = new AdditionalExpendituresStateHandler()\r\n    private salaryHandler = new StringStateTableHandler(new SalaryRowStateHandler())\r\n    readonly ratesHandler = new RatesStateHandler()\r\n    private nameHandler = new StringStringStateHandler(1, 50)\r\n    private descriptionHandler = new StringStringStateHandler(0, 50)\r\n\r\n    private constructor() {\r\n        super()\r\n    }\r\n\r\n    static getInstance(): EfficiencyComputationMainHandler {\r\n        if (!EfficiencyComputationMainHandler._instance) {\r\n            EfficiencyComputationMainHandler._instance = new EfficiencyComputationMainHandler()\r\n        }\r\n        return EfficiencyComputationMainHandler._instance\r\n    }\r\n\r\n    toDto(state: EfficiencyComputationState): EfficiencyComputationDto {\r\n        if (state.status > Status.Warning) {\r\n            throw new Error(state.what?.join('\\n'))\r\n        }\r\n        return {\r\n            id: state.id,\r\n            name: state.name.value,\r\n            description: state.description.value,\r\n            trackId: state.track!.id,\r\n            trackName: state.track!.name,\r\n            trackLength: state.track!.length,\r\n            capacityComputationBefore: state.capacity.oldCapacityDto ?? undefined,\r\n            capacityComputationAfter: state.capacity.newCapacityDto ?? undefined,\r\n            parallelComputationBefore: state.parallelSchedule.oldComputation ?? undefined,\r\n            parallelComputationAfter: state.parallelSchedule.newComputation ?? undefined,\r\n            inputData: {\r\n                trainWeightMaximum: this.tryParseNumber(state.capacity.maxTrainMass.value) ?? undefined,\r\n                trainIntervalBefore: this.tryParseNumber(state.capacity.oldInterval.value) ?? undefined,\r\n                trainIntervalAfter: this.tryParseNumber(state.capacity.newInterval.value) ?? undefined,\r\n                trainQtyBefore: this.tryParseNumber(state.capacity.oldTrainQty.value) ?? undefined,\r\n                trainQtyAfter: this.tryParseNumber(state.capacity.newTrainQty.value) ?? undefined,\r\n                energyConsumptionBefore: this.tryParseNumber(\r\n                    state.parallelSchedule.oldDailyConsumption.value\r\n                ) ?? undefined,\r\n                energyConsumptionAfter: this.tryParseNumber(\r\n                    state.parallelSchedule.newDailyConsumption.value\r\n                ) ?? undefined,\r\n                capitalInvestments: state.capitalExpenditures.rows.map(r => {\r\n                    return {\r\n                        equipment: r.equipment.value,\r\n                        equipmentType: r.type.value,\r\n                        price: this.parseNumber(r.price.value),\r\n                        amount: this.parseNumber(r.qty.value),\r\n                        serviceLife: this.parseNumber(r.serviceLife.value)\r\n                    }\r\n                }),\r\n                additionalExpenditures: state.additionalExpenditures.rows.map(r => {\r\n                    return {\r\n                        name: r.expendureItem.value,\r\n                        equipment: r.equipment.value,\r\n                        amount: this.parseNumber(r.qty.value),\r\n                        price: this.parseNumber(r.price.value),\r\n                        type: r.period\r\n                    }\r\n                }),\r\n                maintenanceSalaries: state.salary.rows.map(r => {\r\n                    const hourlyRate = this.parseNumber(r.hourlyRate.value)\r\n                    return {\r\n                        paidWorker: r.employee.value,\r\n                        equipmentName: r.equipment.value,\r\n                        amount: this.parseNumber(r.qty.value),\r\n                        hourlyRate: hourlyRate,\r\n                        productivity: this.parseNumber(r.annualOutput.value),\r\n                        additionalPayments: this.parseNumber(r.motivation.value)\r\n                    }\r\n                }),\r\n                profitOptions: {\r\n                    profitRateForCargoTurnover: this.parseNumber(state.rates.profitRateForCargoTurnover.value),\r\n                    spendingRateForEconomicTasks: this.parseNumber(state.rates.spendingRateForEconomicTasks.value),\r\n                    reducedEnergyConsumption: this.parseNumber(state.rates.reducedEnergyConsumption.value),\r\n                    electricityCostPerTraction: this.parseNumber(state.rates.electricityCostPerTraction.value)\r\n                },\r\n                taxRates: {\r\n                    incomeTax: this.tryParseNumber(state.rates.incomeTax.value)\r\n                        ?? this.ratesHandler.DEFAULT_INCOME_TAX,\r\n                    propertyTax: this.tryParseNumber(state.rates.propertyTax.value)\r\n                        ?? this.ratesHandler.DEFAULT_PROPERTY_TAX,\r\n                    averageAnnualRateOfSocialContributions: this.tryParseNumber(state.rates.socialTax.value)\r\n                        ?? this.ratesHandler.DEFAULT_SOCIAL_TAX\r\n                },\r\n                inflation: {\r\n                    discountRate: this.tryParseNumber(state.rates.discountRate.value)\r\n                        ?? this.ratesHandler.DEFAULT_DISCOUNT_RATE,\r\n                    annualInflationRate: this.tryParseNumber(state.rates.annualInflationRate.value)\r\n                        ?? this.ratesHandler.DEFAULT_ANNUAL_INFLATION_RATE,\r\n                    annualSalaryIndexation: this.tryParseNumber(state.rates.annualSalaryIndexation.value)\r\n                        ?? this.ratesHandler.DEFAULT_ANNUAL_SALARY_INDEXATION,\r\n                    annualIncreaseInElectricityTariff: this.tryParseNumber(state.rates.annualIncreaseInElectricityTariff.value)\r\n                        ?? this.ratesHandler.DEFAULT_ANNUAL_INCREASE_IN_ELECTRICITY_TARIFF\r\n                },\r\n                calculationPeriod: this.parseNumber(state.rates.calculationPeriod.value)\r\n            }\r\n        }\r\n    }\r\n\r\n    fromDto(dto: EfficiencyComputationDto): EfficiencyComputationState {\r\n        const capitalExpenditures = this.capitalExpendituresHandler.createDefault()\r\n        for (const row of dto.inputData.capitalInvestments) {\r\n            this.capitalExpendituresHandler.insertRow(\r\n                capitalExpenditures,\r\n                null,\r\n                {\r\n                    equipment: row.equipment,\r\n                    price: row.price,\r\n                    qty: row.amount,\r\n                    serviceLife: row.serviceLife,\r\n                    type: row.equipmentType\r\n                }\r\n            )\r\n        }\r\n\r\n        const additionalExpenditures = this.additionalExpendituresHandler.createDefault()\r\n        for (const row of dto.inputData.additionalExpenditures) {\r\n            this.additionalExpendituresHandler.insertRow(\r\n                additionalExpenditures,\r\n                null,\r\n                {\r\n                    equipment: row.equipment,\r\n                    expendureItem: row.name,\r\n                    period: row.type,\r\n                    price: row.price,\r\n                    qty: row.amount\r\n                }\r\n            )\r\n        }\r\n\r\n        const salary = this.salaryHandler.createDefault()\r\n        for (const row of dto.inputData.maintenanceSalaries) {\r\n            this.salaryHandler.insertRow(\r\n                salary,\r\n                null,\r\n                {\r\n                    employee: row.paidWorker,\r\n                    equipment: row.equipmentName,\r\n                    qty: row.amount,\r\n                    hourlyRate: row.hourlyRate,\r\n                    annualOutput: row.productivity,\r\n                    motivation: row.additionalPayments\r\n                }\r\n            )\r\n        }\r\n\r\n        const state: EfficiencyComputationState = {\r\n            handle: StateHandler.cnt++,\r\n            status: Status.Ok,\r\n            id: dto.id,\r\n            name: this.nameHandler.create(dto.name),\r\n            description: this.descriptionHandler.create(dto.description),\r\n            track: {\r\n                id: dto.trackId,\r\n                name: dto.trackName,\r\n                length: dto.trackLength\r\n            },\r\n            capacity: this.capacityHandler.create({\r\n                oldCapacityDto: dto.capacityComputationBefore,\r\n                newCapacityDto: dto.capacityComputationAfter,\r\n                maxTrainMass: dto.inputData.trainWeightMaximum?.toString(),\r\n                oldInterval: dto.inputData.trainIntervalBefore?.toString(),\r\n                newInterval: dto.inputData.trainIntervalAfter?.toString(),\r\n                oldTrainQty: dto.inputData.trainQtyBefore?.toString(),\r\n                newTrainQty: dto.inputData.trainQtyAfter?.toString()\r\n            }),\r\n            parallelSchedule: this.parSchHandler.create({\r\n                oldComputation: dto.parallelComputationBefore,\r\n                newComputation: dto.parallelComputationAfter,\r\n                oldDailyConsumption: dto.inputData.energyConsumptionBefore?.toString(),\r\n                newDailyConsumption: dto.inputData.energyConsumptionAfter?.toString()\r\n            }),\r\n            capitalExpenditures: capitalExpenditures,\r\n            additionalExpenditures: additionalExpenditures,\r\n            salary: salary,\r\n            rates: this.ratesHandler.create({\r\n                profitRateForCargoTurnover: dto.inputData.profitOptions.profitRateForCargoTurnover,\r\n                spendingRateForEconomicTasks: dto.inputData.profitOptions.spendingRateForEconomicTasks,\r\n                reducedEnergyConsumption: dto.inputData.profitOptions.reducedEnergyConsumption,\r\n                electricityCostPerTraction: dto.inputData.profitOptions.electricityCostPerTraction,\r\n                incomeTax: dto.inputData.taxRates.incomeTax,\r\n                propertyTax: dto.inputData.taxRates.propertyTax,\r\n                socialTax: dto.inputData.taxRates.averageAnnualRateOfSocialContributions,\r\n                discountRate: dto.inputData.inflation.discountRate,\r\n                annualInflationRate: dto.inputData.inflation.annualInflationRate,\r\n                annualSalaryIndexation: dto.inputData.inflation.annualSalaryIndexation,\r\n                annualIncreaseInElectricityTariff: dto.inputData.inflation.annualIncreaseInElectricityTariff,\r\n                calculationPeriod: dto.inputData.calculationPeriod\r\n            })\r\n        }\r\n        this.validate(state)\r\n        return state\r\n    }\r\n\r\n    validate(tgt: EfficiencyComputationState): Status {\r\n        this.reset(tgt)\r\n        this.check(tgt, tgt.track !== null, Status.Error, 'Необходимо выбрать участок')\r\n        this.check(\r\n            tgt,\r\n            tgt.capitalExpenditures.rows.length > 0 || tgt.additionalExpenditures.rows.length > 0 || tgt.salary.rows.length > 0,\r\n            Status.Error,\r\n            'Необходимо ввести хотя бы одну строку затрат'\r\n        )\r\n        this.checkEquipmentNames(tgt, tgt.additionalExpenditures.rows)\r\n        this.checkEquipmentNames(tgt, tgt.salary.rows)\r\n        this.transferStatus(tgt, tgt.name)\r\n        this.transferStatus(tgt, tgt.description)\r\n        this.transferStatus(tgt, tgt.capacity)\r\n        this.transferStatus(tgt, tgt.parallelSchedule)\r\n        this.transferStatus(tgt, tgt.capitalExpenditures)\r\n        this.transferStatus(tgt, tgt.additionalExpenditures)\r\n        this.transferStatus(tgt, tgt.salary)\r\n        this.transferStatus(tgt, tgt.rates)\r\n        return tgt.status\r\n    }\r\n\r\n    createDefault(): EfficiencyComputationState {\r\n        const state: EfficiencyComputationState = {\r\n            id: undefined,\r\n            name: this.nameHandler.create(),\r\n            description: this.descriptionHandler.create(),\r\n            track: null,\r\n            handle: StateHandler.cnt++,\r\n            status: Status.Ok,\r\n            capacity: this.capacityHandler.create({}),\r\n            parallelSchedule: this.parSchHandler.create({}),\r\n            capitalExpenditures: this.capitalExpendituresHandler.createDefault(),\r\n            additionalExpenditures: this.additionalExpendituresHandler.createDefault(),\r\n            salary: this.salaryHandler.createDefault(),\r\n            rates: this.ratesHandler.create({\r\n                reducedEnergyConsumption: this.ratesHandler.DEFAULT_REDUCED_ENERGY_CONSUMPTION,\r\n                discountRate: this.ratesHandler.DEFAULT_DISCOUNT_RATE,\r\n                annualInflationRate: this.ratesHandler.DEFAULT_ANNUAL_INFLATION_RATE,\r\n                annualSalaryIndexation: this.ratesHandler.DEFAULT_ANNUAL_SALARY_INDEXATION,\r\n                annualIncreaseInElectricityTariff: this.ratesHandler.DEFAULT_ANNUAL_INCREASE_IN_ELECTRICITY_TARIFF\r\n            })\r\n        }\r\n        this.validate(state)\r\n        return state\r\n    }\r\n\r\n    logErrors(tgt: EfficiencyComputationState): string {\r\n        const messages = tgt.what\r\n            ?.map(msg => {\r\n                if (msg === VALUE_IS_REQUIRED) {\r\n                    return ANY_REQUIRED_VALUES_ARE_MISSED\r\n                } else if (msg.includes(MAX_SYMBOL_QTY)) {\r\n                    return ANY_STRINGS_HAVE_WRONG_LENGTH\r\n                } else if (msg.includes(NUMERIC_RANGE_VIOLATION)) {\r\n                    return ANY_NUMERIC_VALUES_ARE_OUT_OF_RANGE\r\n                } else if (msg.includes(NOT_A_NUMBER)) {\r\n                    return ANY_NUMBERS_ARE_NOT_NUMBERS\r\n                }\r\n                return msg\r\n            }) ?? []\r\n        return Array.from(new Set(messages)).sort()\r\n            .map((s, i) => `${i + 1}. ${s}`)\r\n            .join('\\n')\r\n    }\r\n\r\n    powerDiff(tgt: ParallelScheduleParamsState): { abs: string, rel: string } {\r\n        if (tgt.status < Status.Error) {\r\n            let _old: number = 0\r\n            if (tgt.oldDailyConsumption.value !== '') {\r\n                _old = this.parSchHandler.dcHandler.parseNumber(tgt.oldDailyConsumption.value)\r\n            } else {\r\n                _old = tgt.oldComputation!.energyConsumption\r\n            }\r\n\r\n            let _new: number = 0\r\n            if (tgt.newDailyConsumption.value !== '') {\r\n                _new = this.parSchHandler.dcHandler.parseNumber(tgt.newDailyConsumption.value)\r\n            } else {\r\n                _new = tgt.newComputation!.energyConsumption\r\n            }\r\n\r\n            return {\r\n                abs: format(_new - _old, 2, 0, '', 'always'),\r\n                rel: format(100 * (_new - _old) / _old, 2, 0, '', 'always') + ' %'\r\n            }\r\n        }\r\n        return { abs: '', rel: '' }\r\n    }\r\n\r\n    intervalDiff(tgt: CapacityParamsState): { abs: string, rel: string } {\r\n        if (tgt.newInterval.status < Status.Error && tgt.oldInterval.status < Status.Error) {\r\n            let _old: number = 0\r\n            if (tgt.oldInterval.value !== '') {\r\n                _old = this.parSchHandler.dcHandler.parseNumber(tgt.oldInterval.value)\r\n            } else {\r\n                _old = tgt.oldCapacityDto!.trainInterval\r\n            }\r\n\r\n            let _new: number = 0\r\n            if (tgt.newInterval.value !== '') {\r\n                _new = this.parSchHandler.dcHandler.parseNumber(tgt.newInterval.value)\r\n            } else {\r\n                _new = tgt.newCapacityDto!.trainInterval\r\n            }\r\n\r\n            return {\r\n                abs: format(_new - _old, 0, 0, '', 'always'),\r\n                rel: format(100 * (_new - _old) / _old, 2, 0, '', 'always') + ' %'\r\n            }\r\n        }\r\n        return { abs: '', rel: '' }\r\n    }\r\n\r\n    trainQtyDiff(tgt: CapacityParamsState): { abs: string, rel: string } {\r\n        if (tgt.newTrainQty.status < Status.Error && tgt.oldTrainQty.status < Status.Error) {\r\n            let _old: number = 0\r\n            if (tgt.oldTrainQty.value !== '') {\r\n                _old = this.parSchHandler.dcHandler.parseNumber(tgt.oldTrainQty.value)\r\n            } else {\r\n                _old = tgt.oldCapacityDto!.trainQty\r\n            }\r\n\r\n            let _new: number = 0\r\n            if (tgt.newTrainQty.value !== '') {\r\n                _new = this.parSchHandler.dcHandler.parseNumber(tgt.newTrainQty.value)\r\n            } else {\r\n                _new = tgt.newCapacityDto!.trainQty\r\n            }\r\n\r\n            return {\r\n                abs: format(_new - _old, 0, 0, '', 'always'),\r\n                rel: format(100 * (_new - _old) / _old, 2, 0, '', 'always') + ' %'\r\n            }\r\n        }\r\n        return { abs: '', rel: '' }\r\n    }\r\n\r\n    copy(tgt: EfficiencyComputationState): EfficiencyComputationState {\r\n        const cp = { ...tgt }\r\n        cp.handle = StateHandler.cnt++\r\n        return cp\r\n    }\r\n\r\n    updateName(tgt: EfficiencyComputationState, name: string) {\r\n        tgt.name = this.nameHandler.create(name)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateDescription(tgt: EfficiencyComputationState, description: string) {\r\n        tgt.description = this.descriptionHandler.create(description)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateTrack(tgt: EfficiencyComputationState, trackParams: TrackParams | null) {\r\n        if (trackParams?.id !== tgt.track?.id) {\r\n            this.updateParallelScheduleParams(tgt, { oldComputation: null, newComputation: null })\r\n            this.updateCapacityParams(tgt, { oldCapacityDto: null, newCapacityDto: null })\r\n        }\r\n        tgt.track = trackParams\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateCapacityParams(tgt: EfficiencyComputationState, kwargs: CapacityParamsKwargs) {\r\n        if ((kwargs.oldCapacityDto != null || kwargs.newCapacityDto != null) && tgt.track === null) {\r\n            throw new Error('Попытка выбора расчета пропускной способности при невыбранном участке')\r\n        }\r\n        if (kwargs.oldCapacityDto !== undefined && kwargs.oldCapacityDto?.schemaId !== tgt.capacity.oldCapacityDto?.schemaId) {\r\n            this.updateParallelScheduleParams(tgt, { oldComputation: null })\r\n        }\r\n        if (kwargs.newCapacityDto !== undefined && kwargs.newCapacityDto?.schemaId !== tgt.capacity.newCapacityDto?.schemaId) {\r\n            this.updateParallelScheduleParams(tgt, { newComputation: null })\r\n        }\r\n        this.capacityHandler.update(tgt.capacity, kwargs)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateParallelScheduleParams(tgt: EfficiencyComputationState, kwargs: ParallelScheduleParamsKwargs) {\r\n        if (\r\n            tgt.capacity.oldCapacityDto === null && kwargs.oldComputation != null ||\r\n            tgt.capacity.newCapacityDto === null && kwargs.newComputation != null\r\n        ) {\r\n            throw new Error('Попытка выбрать расчет нагрузочной способности при невыбранном расчете пропускной способности')\r\n        }\r\n        this.parSchHandler.update(tgt.parallelSchedule, kwargs)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateCapitalExpendituresRow(tgt: EfficiencyComputationState, idx: number, kwargs: CapitalExpendituresRowKwargs) {\r\n        this.capitalExpendituresHandler.updateRow(tgt.capitalExpenditures, idx, kwargs)\r\n        if (kwargs.equipment !== undefined) {\r\n            this.checkEquipmentNames(tgt, tgt.additionalExpenditures.rows)\r\n            this.checkEquipmentNames(tgt, tgt.salary.rows)\r\n        }\r\n        this.validate(tgt)\r\n    }\r\n\r\n    insertCapitalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\r\n        this.capitalExpendituresHandler.insertRow(tgt.capitalExpenditures, idx, {})\r\n        this.validate(tgt)\r\n    }\r\n\r\n    deleteCapitalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\r\n        this.capitalExpendituresHandler.deleteRow(tgt.capitalExpenditures, idx)\r\n        this.checkEquipmentNames(tgt, tgt.additionalExpenditures.rows)\r\n        this.checkEquipmentNames(tgt, tgt.salary.rows)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    duplicateCapitalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\r\n        this.capitalExpendituresHandler.duplicateRow(tgt.capitalExpenditures, idx)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateAdditionalExpendituresRow(tgt: EfficiencyComputationState, idx: number, kwargs: AdditionalExpendituresRowKwargs) {\r\n        this.additionalExpendituresHandler.updateRow(tgt.additionalExpenditures, idx, kwargs)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    insertAdditionalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\r\n        const row = this.additionalExpendituresHandler.insertRow(tgt.additionalExpenditures, idx, {})\r\n        this.checkEquipmentNames(tgt, [row])\r\n        this.validate(tgt)\r\n    }\r\n\r\n    deleteAdditionalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\r\n        this.additionalExpendituresHandler.deleteRow(tgt.additionalExpenditures, idx)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    duplicateAdditionalExpendituresRow(tgt: EfficiencyComputationState, idx: number) {\r\n        const row = this.additionalExpendituresHandler.duplicateRow(tgt.additionalExpenditures, idx)\r\n        this.checkEquipmentNames(tgt, [row])\r\n        this.validate(tgt)\r\n    }\r\n\r\n    uniqueEquipmentNames(current: string, arr: CapitalExpendituresRowState[]): string[] {\r\n        const names = arr.map(row => row.equipment.value)\r\n        names.splice(0, 0, '')\r\n        names.push(current)\r\n        return Array.from(new Set(names))\r\n    }\r\n\r\n    insertSalaryRow(tgt: EfficiencyComputationState, idx: number) {\r\n        const row = this.salaryHandler.insertRow(tgt.salary, idx, {})\r\n        this.checkEquipmentNames(tgt, [row])\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateSalaryRow(tgt: EfficiencyComputationState, idx: number, kwargs: SalaryStateKwargs) {\r\n        this.salaryHandler.updateRow(tgt.salary, idx, kwargs)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    deleteSalaryRow(tgt: EfficiencyComputationState, idx: number) {\r\n        this.salaryHandler.deleteRow(tgt.salary, idx)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    duplicateSalaryRow(tgt: EfficiencyComputationState, idx: number) {\r\n        const row = this.salaryHandler.duplicateRow(tgt.salary, idx)\r\n        this.checkEquipmentNames(tgt, [row])\r\n        this.validate(tgt)\r\n    }\r\n\r\n    updateRates(tgt: EfficiencyComputationState, kwargs: RatesStateKwargs) {\r\n        this.ratesHandler.update(tgt.rates, kwargs)\r\n        this.validate(tgt)\r\n    }\r\n\r\n    private checkEquipmentNames(tgt: EfficiencyComputationState, dependentRows: { equipment: StringState }[]) {\r\n        const equipmentNames = this.uniqueEquipmentNames('', tgt.capitalExpenditures.rows)\r\n        for (const row of dependentRows) {\r\n            this.reset(row.equipment)\r\n            if (!equipmentNames.includes(row.equipment.value)) {\r\n                this.addWarning(row.equipment, 'Необъявленное оборудование')\r\n                this.transferStatus(tgt, row.equipment)\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { CapacityParamsKwargs } from './model/capacity-params';\r\nimport { EfficiencyComputationMainHandler } from './handler/EfficiencyComputationMainHandler';\r\nimport { ParallelScheduleParamsKwargs } from './model/parallel-schedule-params';\r\nimport { CapitalExpendituresRowKwargs } from './model/capital-expenditures';\r\nimport { AdditionalExpendituresRowKwargs } from './model/additional-expendures';\r\nimport { SalaryStateKwargs } from './model/salary'\r\nimport { RatesStateKwargs } from './model/rates'\r\nimport { TrackParams } from './model/efficiency-computation';\r\nimport { EfficiencyComputationDto } from './model/dto';\r\n\r\nconst h = EfficiencyComputationMainHandler.getInstance();\r\n\r\nconst economicSlice = createSlice({\r\n    name: 'economic',\r\n    initialState: h.createDefault(),\r\n    reducers: {\r\n        updateName(state, action: PayloadAction<string>) {\r\n            h.updateName(state, action.payload)\r\n        },\r\n\r\n        updateDescription(state, action: PayloadAction<string>) {\r\n            h.updateDescription(state, action.payload)\r\n        },\r\n\r\n        updateTrack(state, action: PayloadAction<TrackParams | null>) {\r\n            h.updateTrack(state, action.payload)\r\n        },\r\n\r\n        updateCapacityParams(state, action: PayloadAction<CapacityParamsKwargs>) {\r\n            h.updateCapacityParams(state, action.payload);\r\n        },\r\n\r\n        updateParallelScheduleParams(state, action: PayloadAction<ParallelScheduleParamsKwargs>) {\r\n            h.updateParallelScheduleParams(state, action.payload);\r\n        },\r\n\r\n        updateCapitalExpendituresRow(state, action: PayloadAction<{ idx: number } & CapitalExpendituresRowKwargs>) {\r\n            h.updateCapitalExpendituresRow(state, action.payload.idx, action.payload)\r\n        },\r\n\r\n        insertCapitalExpendituresRow(state, action: PayloadAction<number>) {\r\n            h.insertCapitalExpendituresRow(state, action.payload)\r\n            return state\r\n        },\r\n\r\n        deleteCapitalExpendituresRow(state, action: PayloadAction<number>) {\r\n            h.deleteCapitalExpendituresRow(state, action.payload)\r\n        },\r\n\r\n        duplicateCapitalExpendituresRow(state, action: PayloadAction<number>) {\r\n            h.duplicateCapitalExpendituresRow(state, action.payload)\r\n        },\r\n\r\n        updateAdditionalExpendituresRow(state, action: PayloadAction<{ idx: number } & AdditionalExpendituresRowKwargs>) {\r\n            h.updateAdditionalExpendituresRow(state, action.payload.idx, action.payload)\r\n        },\r\n\r\n        insertAdditionalExpendituresRow(state, action: PayloadAction<number>) {\r\n            h.insertAdditionalExpendituresRow(state, action.payload)\r\n        },\r\n\r\n        deleteAdditionalExpendituresRow(state, action: PayloadAction<number>) {\r\n            h.deleteAdditionalExpendituresRow(state, action.payload)\r\n        },\r\n\r\n        duplicateAdditionalExpendituresRow(state, action: PayloadAction<number>) {\r\n            h.duplicateAdditionalExpendituresRow(state, action.payload)\r\n        },\r\n\r\n        insertSalaryRow(state, action: PayloadAction<number>) {\r\n            h.insertSalaryRow(state, action.payload)\r\n        },\r\n\r\n        updateSalaryRow(state, action: PayloadAction<{ idx: number } & SalaryStateKwargs>) {\r\n            h.updateSalaryRow(state, action.payload.idx, action.payload)\r\n        },\r\n\r\n        deleteSalaryRow(state, action: PayloadAction<number>) {\r\n            h.deleteSalaryRow(state, action.payload)\r\n        },\r\n\r\n        duplicateSalaryRow(state, action: PayloadAction<number>) {\r\n            h.duplicateSalaryRow(state, action.payload)\r\n        },\r\n\r\n        updateRates(state, action: PayloadAction<RatesStateKwargs>) {\r\n            h.updateRates(state, action.payload)\r\n        },\r\n\r\n        fromDto(state, action: PayloadAction<EfficiencyComputationDto>) {\r\n            return h.fromDto(action.payload)\r\n        }\r\n    }\r\n});\r\n\r\nexport default economicSlice;\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport economicSlice from '../../economic/slice';\r\n\r\nconst reducers = combineReducers({\r\n  economic: economicSlice.reducer\r\n});\r\n\r\nexport default reducers;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport reducers from './reducers';\r\n\r\nconst store = configureStore({\r\n  reducer: reducers\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport default store;\r\n","import { CSSProperties, useEffect, useState } from 'react'\r\nimport React from 'react'\r\nimport { StringState, localized } from '../../common/StringStateHandler'\r\nimport { Status } from '../../common/verifiable'\r\nimport { useAppDispatch } from '../../store'\r\nimport { CapacityParamsState } from '../model/capacity-params'\r\nimport { EfficiencyComputationMainHandler } from '../handler/EfficiencyComputationMainHandler'\r\nimport economicSlice from '../slice'\r\n\r\nexport function getStyle(status: Status): CSSProperties {\r\n  let color = ''\r\n  if (status === Status.Error) {\r\n    color = 'pink'\r\n  } else if (status === Status.Warning) {\r\n    color = 'lightyellow'\r\n  }\r\n  return {\r\n    backgroundColor: color\r\n  }\r\n}\r\n\r\nexport const StringStateInput = (props: {\r\n  state: StringState\r\n  label?: string\r\n  placeholder?: string\r\n  onBlur: (v: string) => void\r\n}) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        key={props.state.handle}\r\n        name=\"mass\"\r\n        type=\"text\"\r\n        defaultValue={props.state.value}\r\n        style={getStyle(props.state.status)}\r\n        className={'warning'}\r\n        title={props.state.what?.map(s => localized(s))?.join('\\n') ?? ''}\r\n        placeholder={props.placeholder ?? ''}\r\n        onBlur={(e) => props.onBlur(e.target.value)}\r\n      />\r\n      {props.label && <label htmlFor=\"mass\"> - {props.label}</label>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function TextArea<T>(props: {\r\n  obj: T | null,\r\n  onBlur: (v: T | null) => void,\r\n  disabled?: boolean,\r\n  titleIfDisabled?: string,\r\n  required?: boolean\r\n}) {\r\n  const [text, setText] = useState('null')\r\n  useEffect(() => {\r\n    let text: string\r\n    try {\r\n      text = JSON.stringify(props.obj)\r\n    } catch (e: any) {\r\n      text = 'null'\r\n    }\r\n    setText(text)\r\n  }, [props.obj])\r\n  return (\r\n    <textarea\r\n      value={text}\r\n      onChange={e => setText(e.target.value)}\r\n      onBlur={e => {\r\n        let obj: T | null\r\n        try {\r\n          obj = JSON.parse(e.target.value) as T\r\n        } catch (e: any) {\r\n          obj = null\r\n        }\r\n        props.onBlur(obj)\r\n      }}\r\n      style={{ width: 300, height: 120, backgroundColor: props.required && props.obj === null ? 'pink' : '' }}\r\n      disabled={props.disabled}\r\n      title={props.disabled ? props.titleIfDisabled : ''}\r\n    />\r\n  )\r\n}\r\n\r\nexport function CapacityParamsView(props: { capacity: CapacityParamsState, isTrackSelected: boolean }) {\r\n  const {\r\n    oldCapacityDto: oldCapacityInfo,\r\n    newCapacityDto: newCapacityInfo,\r\n    maxTrainMass,\r\n    oldInterval,\r\n    newInterval,\r\n    oldTrainQty,\r\n    newTrainQty\r\n  } = props.capacity\r\n  const dispatch = useAppDispatch()\r\n  const h = EfficiencyComputationMainHandler.getInstance()\r\n  const intervalDiff = h.intervalDiff(props.capacity)\r\n  const trainQtyDiff = h.trainQtyDiff(props.capacity)\r\n  return (\r\n    <div>\r\n      <h2>Пропускная</h2>\r\n      <TextArea\r\n        obj={oldCapacityInfo}\r\n        onBlur={obj => dispatch(economicSlice.actions.updateCapacityParams({ oldCapacityDto: obj }))}\r\n        disabled={!props.isTrackSelected}\r\n        titleIfDisabled='Сначала нужно выбрать участок'\r\n      />\r\n      <TextArea\r\n        obj={newCapacityInfo}\r\n        onBlur={obj => dispatch(economicSlice.actions.updateCapacityParams({ newCapacityDto: obj }))}\r\n        disabled={!props.isTrackSelected}\r\n        titleIfDisabled='Сначала нужно выбрать участок'\r\n      />\r\n      <StringStateInput\r\n        state={maxTrainMass}\r\n        label={'Масса'}\r\n        placeholder={\r\n          h.capacityHandler.defaultMass(props.capacity)?.toString() ?? ''\r\n        }\r\n        onBlur={(v) =>\r\n          dispatch(\r\n            economicSlice.actions.updateCapacityParams({ maxTrainMass: v })\r\n          )\r\n        }\r\n      />\r\n      <StringStateInput\r\n        state={oldInterval}\r\n        label={'Старый интервал'}\r\n        placeholder={props.capacity.oldCapacityDto?.trainInterval?.toString() ?? ''}\r\n        onBlur={(v) =>\r\n          dispatch(\r\n            economicSlice.actions.updateCapacityParams({ oldInterval: v })\r\n          )\r\n        }\r\n      />\r\n      <StringStateInput\r\n        state={newInterval}\r\n        label={'Новый интервал'}\r\n        placeholder={props.capacity.newCapacityDto?.trainInterval?.toString() ?? ''}\r\n        onBlur={(v) =>\r\n          dispatch(\r\n            economicSlice.actions.updateCapacityParams({ newInterval: v })\r\n          )\r\n        }\r\n      />\r\n      <StringStateInput\r\n        state={oldTrainQty}\r\n        label={'Старое количество'}\r\n        placeholder={props.capacity.oldCapacityDto?.trainQty?.toString() ?? ''}\r\n        onBlur={(v) =>\r\n          dispatch(\r\n            economicSlice.actions.updateCapacityParams({ oldTrainQty: v })\r\n          )\r\n        }\r\n      />\r\n      <StringStateInput\r\n        state={newTrainQty}\r\n        label={'Новое количество'}\r\n        placeholder={props.capacity.newCapacityDto?.trainQty?.toString() ?? ''}\r\n        onBlur={(v) =>\r\n          dispatch(\r\n            economicSlice.actions.updateCapacityParams({ newTrainQty: v })\r\n          )\r\n        }\r\n      />\r\n\r\n      <div>\r\n        <input type=\"text\" name=\"absPowerDiff\" disabled value={intervalDiff.abs} />\r\n        <input type=\"text\" name=\"relPowerDiff\" disabled value={intervalDiff.rel} />\r\n        <label htmlFor=\"relPowerDiff\">Изменение в межпоездном интервале</label>\r\n      </div>\r\n      <div>\r\n        <input type=\"text\" name=\"absPowerDiff\" disabled value={trainQtyDiff.abs} />\r\n        <input type=\"text\" name=\"relPowerDiff\" disabled value={trainQtyDiff.rel} />\r\n        <label htmlFor=\"relPowerDiff\">Изменение в количестве поездов</label>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import { CapitalExpendituresTableState } from 'economic/model/capital-expenditures'\r\nimport React from 'react'\r\nimport { StringStateInput } from './CapacityParamsView'\r\nimport economicSlice from 'economic/slice'\r\nimport { useAppDispatch } from 'store'\r\n\r\nexport function CapitalExpendituresView(props: { tbl: CapitalExpendituresTableState }) {\r\n    const dispatch = useAppDispatch()\r\n    return (\r\n        <div>\r\n            <h2>Капитальные затраты</h2>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Оборудование</th>\r\n                        <th>Тип</th>\r\n                        <th>Стоимость</th>\r\n                        <th>Количество</th>\r\n                        <th>Срок службы</th>\r\n                        <th>\r\n                            <button onClick={() => dispatch(economicSlice.actions.insertCapitalExpendituresRow(0))}\r\n                            >+</button>\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.tbl.rows.map((row, idx) => {\r\n                        return (\r\n                            <tr key={row.handle}>\r\n                                <td>\r\n                                    <StringStateInput\r\n                                        state={row.equipment}\r\n                                        placeholder={''}\r\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, equipment: v }))}\r\n                                    />\r\n                                </td>\r\n                                <td>\r\n                                    <StringStateInput\r\n                                        state={row.type}\r\n                                        placeholder={''}\r\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, type: v }))}\r\n                                    />\r\n                                </td>\r\n                                <td>\r\n                                    <StringStateInput\r\n                                        state={row.price}\r\n                                        placeholder={''}\r\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, price: v }))}\r\n                                    />\r\n                                </td>\r\n                                <td>\r\n                                    <StringStateInput\r\n                                        state={row.qty}\r\n                                        placeholder={''}\r\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, qty: v }))}\r\n                                    />\r\n                                </td>\r\n                                <td>\r\n                                    <StringStateInput\r\n                                        state={row.serviceLife}\r\n                                        placeholder={''}\r\n                                        onBlur={v => dispatch(economicSlice.actions.updateCapitalExpendituresRow({ idx: idx, serviceLife: v }))}\r\n                                    />\r\n                                </td>\r\n                                <td>\r\n                                    <button\r\n                                        onClick={() => dispatch(economicSlice.actions.insertCapitalExpendituresRow(idx + 1))}\r\n                                    >+</button>\r\n                                    <button\r\n                                        onClick={() => dispatch(economicSlice.actions.deleteCapitalExpendituresRow(idx))}\r\n                                    >-</button>\r\n                                    <button\r\n                                        onClick={() => dispatch(economicSlice.actions.duplicateCapitalExpendituresRow(idx))}\r\n                                    >c</button>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}","import { ParallelScheduleParamsState } from 'economic/model/parallel-schedule-params'\r\nimport { StringStateInput, TextArea } from './CapacityParamsView'\r\nimport React from 'react'\r\nimport { useAppDispatch } from 'store'\r\nimport economicSlice from 'economic/slice'\r\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\r\n\r\nexport function ParallelScheduleParamsView(\r\n    props: { sch: ParallelScheduleParamsState, isOldCapacitySelected: boolean, isNewCapacitySelected: boolean }\r\n) {\r\n    const dispatch = useAppDispatch()\r\n    const h = EfficiencyComputationMainHandler.getInstance()\r\n    const powerDiff = h.powerDiff(props.sch)\r\n    return (\r\n        <div>\r\n            <h2>Нагрузочная</h2>\r\n            <TextArea\r\n                obj={props.sch.oldComputation}\r\n                onBlur={v =>\r\n                    dispatch(\r\n                        economicSlice.actions.updateParallelScheduleParams({oldComputation: v})\r\n                    )\r\n                }\r\n                disabled={!props.isOldCapacitySelected}\r\n                titleIfDisabled={'Сначала нужно выбрать базовый расчет пропускной способности'}\r\n            />\r\n            <TextArea\r\n                obj={props.sch.newComputation}\r\n                onBlur={v =>\r\n                    dispatch(\r\n                        economicSlice.actions.updateParallelScheduleParams({newComputation: v})\r\n                    )\r\n                }\r\n                disabled={!props.isNewCapacitySelected}\r\n                titleIfDisabled={'Сначала нужно выбрать базовый расчет пропускной способности'}\r\n            />\r\n            <StringStateInput\r\n                state={props.sch.oldDailyConsumption}\r\n                label={'Старое суточное потербление'}\r\n                placeholder={props.sch.oldComputation?.energyConsumption?.toString() ?? ''}\r\n                onBlur={v => dispatch(economicSlice.actions.updateParallelScheduleParams({ oldDailyConsumption: v }))}\r\n            />\r\n            <StringStateInput\r\n                state={props.sch.newDailyConsumption}\r\n                label={'Новое суточное потербление'}\r\n                placeholder={props.sch.newComputation?.energyConsumption?.toString() ?? ''}\r\n                onBlur={v => dispatch(economicSlice.actions.updateParallelScheduleParams({ newDailyConsumption: v }))}\r\n            />\r\n            <div>\r\n                <input type=\"text\" name=\"absPowerDiff\" disabled value={powerDiff.abs} />\r\n                <input type=\"text\" name=\"relPowerDiff\" disabled value={powerDiff.rel} />\r\n                <label htmlFor=\"relPowerDiff\">Изменение в расходе электроэнергии</label>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { StringStateInput, getStyle } from './CapacityParamsView'\r\nimport economicSlice from 'economic/slice'\r\nimport { useAppDispatch } from 'store'\r\nimport { AdditionalExpendituresTableState } from 'economic/model/additional-expendures'\r\nimport { CapitalExpendituresTableState } from 'economic/model/capital-expenditures'\r\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\r\nimport React from 'react'\r\n\r\nexport function AdditionalExpendituresView(props: { tbl: AdditionalExpendituresTableState, capitalTbl: CapitalExpendituresTableState }) {\r\n  const dispatch = useAppDispatch()\r\n  const h = EfficiencyComputationMainHandler.getInstance()\r\n  return (\r\n    <div>\r\n      <h2>Дополнительные затраты</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th rowSpan={2}>Статья расходов</th>\r\n            <th rowSpan={2}>Оборудование</th>\r\n            <th rowSpan={2}>Стоимость</th>\r\n            <th rowSpan={2}>Количество</th>\r\n            <th colSpan={2}>Характер расходов</th>\r\n            <th rowSpan={2}>\r\n              <button onClick={() => dispatch(economicSlice.actions.insertAdditionalExpendituresRow(0))}>+</button>\r\n            </th>\r\n          </tr>\r\n          <tr>\r\n            <th>единовременные</th>\r\n            <th>годовые</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.tbl.rows.map((row, idx) => {\r\n            return (\r\n              <tr key={row.handle}>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.expendureItem}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx: idx, expendureItem: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <select\r\n                    value={row.equipment.value}\r\n                    onChange={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx, equipment: v.target.value }))}\r\n                    style={getStyle(row.equipment.status)}\r\n                    title={row.equipment.what?.join('\\n') ?? ''}\r\n                  >\r\n                    {h.uniqueEquipmentNames(row.equipment.value, props.capitalTbl.rows).map((name, i) => {\r\n                      return (\r\n                        <option key={name} value={name}>{name}</option>\r\n                      )\r\n                    })}\r\n                  </select>\r\n                </td>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.price}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx: idx, price: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.qty}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx: idx, qty: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type='radio'\r\n                    name={`${row.handle}`}\r\n                    value='ONETIME'\r\n                    checked={row.period === 'ONETIME'}\r\n                    onClick={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx, period: 'ONETIME' }))}\r\n                    readOnly\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type='radio'\r\n                    name={`${row.handle}`}\r\n                    value='ANNUAL'\r\n                    checked={row.period === 'ANNUAL'}\r\n                    onClick={v => dispatch(economicSlice.actions.updateAdditionalExpendituresRow({ idx, period: 'ANNUAL' }))}\r\n                    readOnly\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    onClick={() => dispatch(economicSlice.actions.insertAdditionalExpendituresRow(idx + 1))}\r\n                  >+</button>\r\n                  <button\r\n                    onClick={() => dispatch(economicSlice.actions.deleteAdditionalExpendituresRow(idx))}\r\n                  >-</button>\r\n                  <button\r\n                    onClick={() => dispatch(economicSlice.actions.duplicateAdditionalExpendituresRow(idx))}\r\n                  >c</button>\r\n                </td>\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n","import { SalaryStateTable } from 'economic/model/salary'\r\nimport { useAppDispatch } from 'store'\r\nimport React from 'react'\r\nimport { StringStateInput, getStyle } from './CapacityParamsView'\r\nimport economicSlice from 'economic/slice'\r\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\r\nimport { CapitalExpendituresTableState } from 'economic/model/capital-expenditures'\r\n\r\nexport function SalaryView(props: { tbl: SalaryStateTable, capitalTbl: CapitalExpendituresTableState }) {\r\n  const dispatch = useAppDispatch()\r\n  const h = EfficiencyComputationMainHandler.getInstance()\r\n  return (\r\n    <div>\r\n      <h2>Оплата труда</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Работник</th>\r\n            <th>Оборудование</th>\r\n            <th>Число работников</th>\r\n            <th>Часовая тарифная ставка</th>\r\n            <th>Годовая выработка</th>\r\n            <th>Стимулирующие выплаты</th>\r\n            <th>\r\n              <button onClick={() => dispatch(economicSlice.actions.insertSalaryRow(0))}\r\n              >+</button>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.tbl.rows.map((row, idx) => {\r\n            return (\r\n              <tr key={row.handle}>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.employee}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, employee: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <select\r\n                    value={row.equipment.value}\r\n                    onChange={v => dispatch(economicSlice.actions.updateSalaryRow({ idx, equipment: v.target.value }))}\r\n                    style={getStyle(row.equipment.status)}\r\n                    title={row.equipment.what?.join('\\n') ?? ''}\r\n                  >\r\n                    {h.uniqueEquipmentNames(row.equipment.value, props.capitalTbl.rows).map((name, i) => {\r\n                      return (\r\n                        <option key={name} value={name}>{name}</option>\r\n                      )\r\n                    })}\r\n                  </select>\r\n                </td>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.qty}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, qty: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.hourlyRate}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, hourlyRate: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.annualOutput}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, annualOutput: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <StringStateInput\r\n                    state={row.motivation}\r\n                    placeholder={''}\r\n                    onBlur={v => dispatch(economicSlice.actions.updateSalaryRow({ idx: idx, motivation: v }))}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    onClick={() => dispatch(economicSlice.actions.insertSalaryRow(idx + 1))}\r\n                  >+</button>\r\n                  <button\r\n                    onClick={() => dispatch(economicSlice.actions.deleteSalaryRow(idx))}\r\n                  >-</button>\r\n                  <button\r\n                    onClick={() => dispatch(economicSlice.actions.duplicateSalaryRow(idx))}\r\n                  >c</button>\r\n                </td>\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}","import * as taxes from 'economic/model/rates'\r\nimport React, { memo } from 'react'\r\nimport { StringStateInput } from './CapacityParamsView'\r\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\r\nimport economicSlice from 'economic/slice'\r\nimport { useAppDispatch } from 'store'\r\n\r\nexport const RatesView = (props: { rates: taxes.RatesState }) => {\r\n  const h = EfficiencyComputationMainHandler.getInstance()\r\n  const dispatch = useAppDispatch()\r\n  return (\r\n    <div>\r\n      <h2>Ставки</h2>\r\n      <StringStateInput\r\n        state={props.rates.profitRateForCargoTurnover}\r\n        label='Доходная ставка за грузооборот, руб / 1000 т·км брутто'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ profitRateForCargoTurnover: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.spendingRateForEconomicTasks}\r\n        label='Расходная ставка для экономических задач, руб / 1000 т·км брутто'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ spendingRateForEconomicTasks: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.reducedEnergyConsumption}\r\n        label='Снижение энергопотребления благодаря проводимым мероприятиям, %'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ reducedEnergyConsumption: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.electricityCostPerTraction}\r\n        label='Стоимость электроэнергии на тягу, руб / кВт·ч'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ electricityCostPerTraction: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.incomeTax}\r\n        label='Налог на прибыль, %'\r\n        placeholder={h.ratesHandler.DEFAULT_INCOME_TAX.toString()}\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ incomeTax: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.propertyTax}\r\n        label='Налог на имущество, %'\r\n        placeholder={h.ratesHandler.DEFAULT_PROPERTY_TAX.toString()}\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ propertyTax: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.socialTax}\r\n        label='Единый социальный налог, %'\r\n        placeholder={h.ratesHandler.DEFAULT_SOCIAL_TAX.toString()}\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ socialTax: v }))}\r\n      />\r\n      <div style={{ display: 'inline-block' }}>\r\n        <StringStateInput\r\n          state={props.rates.discountRate}\r\n          label='Ставка дисконтирования, %'\r\n          onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ discountRate: v }))}\r\n        />\r\n        <input name='coef' value={h.ratesHandler.discountCoefficient(props.rates)} disabled />\r\n        <label htmlFor=\"coef\">- Коэффициент дисконтирования</label>\r\n      </div>\r\n      <StringStateInput\r\n        state={props.rates.annualInflationRate}\r\n        label='Годовой темп инфляции, %'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ annualInflationRate: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.annualSalaryIndexation}\r\n        label='Годовая индексация заработной платы, %'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ annualSalaryIndexation: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.annualIncreaseInElectricityTariff}\r\n        label='Годовой рост тарифа на электроэнергию, %'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ annualIncreaseInElectricityTariff: v }))}\r\n      />\r\n      <StringStateInput\r\n        state={props.rates.calculationPeriod}\r\n        label='Расчетный период, лет'\r\n        onBlur={(v: string) => dispatch(economicSlice.actions.updateRates({ calculationPeriod: v }))}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import { useAppDispatch, useAppSelector } from '../../store'\r\nimport { CapacityParamsView, StringStateInput, TextArea } from './CapacityParamsView'\r\nimport { CapitalExpendituresView } from './CapitalExpendituresView'\r\nimport { ParallelScheduleParamsView } from './ParallelScheduleParamsView'\r\nimport React, { memo, useEffect } from 'react'\r\nimport { AdditionalExpendituresView } from './AdditionalExpendituresView'\r\nimport { SalaryView } from './SalaryView'\r\nimport { RatesView } from './Rates'\r\nimport { EfficiencyComputationMainHandler } from 'economic/handler/EfficiencyComputationMainHandler'\r\nimport { Status } from 'common/verifiable'\r\nimport { useDispatch } from 'react-redux'\r\nimport economicSlice from 'economic/slice'\r\n\r\nexport default function Root() {\r\n  const state = useAppSelector((state) => state.economic)\r\n  const dispatch = useAppDispatch()\r\n  const h = EfficiencyComputationMainHandler.getInstance()\r\n  \r\n  useEffect(() => {\r\n    dispatch(economicSlice.actions.fromDto(\r\n      {\r\n        id: 12,\r\n        name: 'qwrrt',\r\n        description: '',\r\n        trackId: 1,\r\n        trackName: 'Участок',\r\n        trackLength: 100,\r\n        capacityComputationBefore: {\r\n          id: 1,\r\n          name: 'Пропускная-1',\r\n          schemaId: 1,\r\n          trainWeightMaximum: 9000,\r\n          trainInterval: 16,\r\n          trainQty: 145\r\n        },\r\n        capacityComputationAfter: {\r\n          id: 1,\r\n          name: 'Пропускная-1',\r\n          schemaId: 1,\r\n          trainWeightMaximum: 9000,\r\n          trainInterval: 16,\r\n          trainQty: 145\r\n        },\r\n        parallelComputationBefore: {\r\n          id: 1,\r\n          name: 'Нагрузочная-1',\r\n          schemaId: 1,\r\n          energyConsumptionCalculated: 1300,\r\n          calculationDuration: 120,\r\n          energyConsumption: 15600\r\n        },\r\n        parallelComputationAfter: {\r\n          id: 1,\r\n          name: 'Нагрузочная-1',\r\n          schemaId: 1,\r\n          energyConsumptionCalculated: 1300,\r\n          calculationDuration: 120,\r\n          energyConsumption: 15600\r\n        },\r\n        inputData: {\r\n          trainWeightMaximum: 12,\r\n          trainIntervalBefore: 1,\r\n          trainIntervalAfter: 11,\r\n          trainQtyBefore: 1,\r\n          trainQtyAfter: 1,\r\n          energyConsumptionBefore: 15660,\r\n          energyConsumptionAfter: 16600,\r\n          capitalInvestments: [\r\n            {\r\n              equipment: '2wwee',\r\n              equipmentType: 'qwqw',\r\n              price: 12,\r\n              amount: 12,\r\n              serviceLife: 1\r\n            }\r\n          ],\r\n          additionalExpenditures: [],\r\n          maintenanceSalaries: [],\r\n          profitOptions: {\r\n            profitRateForCargoTurnover: 1,\r\n            spendingRateForEconomicTasks: 1,\r\n            reducedEnergyConsumption: 1,\r\n            electricityCostPerTraction: 1\r\n          },\r\n          taxRates: {\r\n            incomeTax: 20,\r\n            propertyTax: 2.2,\r\n            averageAnnualRateOfSocialContributions: 30.4\r\n          },\r\n          inflation: {\r\n            discountRate: 10,\r\n            annualInflationRate: 5,\r\n            annualSalaryIndexation: 5,\r\n            annualIncreaseInElectricityTariff: 5\r\n          },\r\n          calculationPeriod: 5\r\n        }\r\n      }\r\n    ))\r\n  }, [])\r\n  \r\n  return (\r\n    <>\r\n      <div>\r\n        <StringStateInput\r\n          state={state.name}\r\n          onBlur={v => dispatch(economicSlice.actions.updateName(v))}\r\n          label='Наименование расчёта'\r\n        />\r\n        <StringStateInput\r\n          state={state.description}\r\n          onBlur={v => dispatch(economicSlice.actions.updateDescription(v))}\r\n          label='Примечание'\r\n        />\r\n      </div>\r\n      <div>\r\n        <h2>Участок</h2>\r\n        <p>\r\n          Текстовые поля предназначены для ручного ввода объектов в формате JSON. В рабочем\r\n          варианте эти объекты будут приходить по сети как результаты запросов к API, и согласованность\r\n          их структуры будет обеспечена системой типов Kotlin-а. Здесь поэтому корректность структуры\r\n          не проверяется. Если она все же не корректна (вследствие ошибки при ручном вводе), это\r\n          приведет к неопределенному поведению.\r\n        </p>\r\n        <p>\r\n          Если JSON не валиден (то есть в нем есть синтаксические ошибки,\r\n          и стандартная функция JSON.parse выбрасывает исключение), результатом его разбора\r\n          (неудачного) будет null.\r\n        </p>\r\n        <TextArea\r\n          obj={state.track}\r\n          onBlur={obj => dispatch(economicSlice.actions.updateTrack(obj))}\r\n          required\r\n        />\r\n      </div>\r\n      <MCapacityParamsView capacity={state.capacity} isTrackSelected={state.track !== null} />\r\n      <MParallelScheduleParamsView\r\n        sch={state.parallelSchedule}\r\n        isOldCapacitySelected={state.capacity.oldCapacityDto !== null}\r\n        isNewCapacitySelected={state.capacity.newCapacityDto !== null}\r\n      />\r\n      <MCapitalExpendituresView tbl={state.capitalExpenditures} />\r\n      <MAdditionalExpendituresView tbl={state.additionalExpenditures} capitalTbl={state.capitalExpenditures} />\r\n      <MSalaryView tbl={state.salary} capitalTbl={state.capitalExpenditures} />\r\n      <MRatesView rates={state.rates} />\r\n      <button\r\n        onClick={() => console.log(h.toDto(state))}\r\n        disabled={state.status > Status.Warning}\r\n        title={h.logErrors(state)}\r\n      >DTO в консоль</button>\r\n    </>\r\n  )\r\n}\r\n\r\nconst MCapacityParamsView = memo(CapacityParamsView)\r\nconst MParallelScheduleParamsView = memo(ParallelScheduleParamsView)\r\nconst MCapitalExpendituresView = memo(CapitalExpendituresView)\r\nconst MAdditionalExpendituresView = memo(AdditionalExpendituresView)\r\nconst MSalaryView = memo(SalaryView)\r\nconst MRatesView = memo(RatesView)","import { Provider } from 'react-redux';\nimport React from 'react';\nimport Root from './economic/component/Root';\nimport store from './store';\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <Root />\n    </Provider>\n  );\n}\n","import { render } from 'react-dom';\nimport React from 'react';\n\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nrender(<App />, rootElement);\n"],"sourceRoot":""}